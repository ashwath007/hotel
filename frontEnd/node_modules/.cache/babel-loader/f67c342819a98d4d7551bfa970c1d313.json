{"ast":null,"code":"import { useCallback, useRef, useState } from \"react\";\n/**\n * This is the main visibility hook to be used for the `DropdownMenu` and\n * `DropdownMenuItem` components. It'll provide the current visibility as well\n * as the default focus type once the menu becomes visible.\n *\n * @private\n */\n\nexport default function useVisibility(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.defaultVisible,\n      defaultVisible = _c === void 0 ? false : _c,\n      _d = _b.defaultFocus,\n      defaultFocusValue = _d === void 0 ? \"first\" : _d,\n      onVisibilityChange = _b.onVisibilityChange;\n\n  var _e = useState({\n    visible: defaultVisible,\n    defaultFocus: defaultFocusValue\n  }),\n      _f = _e[0],\n      visible = _f.visible,\n      defaultFocus = _f.defaultFocus,\n      setState = _e[1];\n\n  var prevVisible = useRef(visible);\n\n  if (prevVisible.current !== visible) {\n    prevVisible.current = visible;\n\n    if (onVisibilityChange) {\n      onVisibilityChange(visible);\n    }\n  }\n  /**\n   * A callback to use that allows you to provide a string for if the focus\n   * target should be the \"first\" or \"last\" focusable element in the menu.  This\n   * should be \"first\" for all cases except when the control opens the menu with\n   * an arrow up key event.\n   */\n\n\n  var showWithFocus = useCallback(function (defaultFocus) {\n    setState({\n      visible: true,\n      defaultFocus: defaultFocus\n    });\n  }, []);\n  /**\n   * The default implementation of showing the menu that will focus the first\n   * menu item once visible.\n   */\n\n  var show = useCallback(function () {\n    showWithFocus(\"first\");\n  }, [showWithFocus]);\n  /**\n   * Hides the menu.\n   */\n\n  var hide = useCallback(function () {\n    setState({\n      visible: false,\n      defaultFocus: \"first\"\n    });\n  }, []);\n  /**\n   * Toggles the visibility of the menu.\n   */\n\n  var toggle = useCallback(function () {\n    setState(function (_a) {\n      var visible = _a.visible,\n          defaultFocus = _a.defaultFocus;\n      return {\n        visible: !visible,\n        defaultFocus: defaultFocus\n      };\n    });\n  }, []);\n  return {\n    visible: visible,\n    defaultFocus: defaultFocus,\n    show: show,\n    showWithFocus: showWithFocus,\n    hide: hide,\n    toggle: toggle\n  };\n}","map":{"version":3,"sources":["../src/useVisibility.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,MAAtB,EAA8B,QAA9B,QAA8C,OAA9C;AAwBA;;;;;;;;AAOA,eAAc,SAAU,aAAV,CAAwB,EAAxB,EAIW;MAJa,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAIf,EAJe,GAIb,E;MAHvB,EAAA,GAAA,EAAA,CAAA,c;MAAA,cAAc,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MACtB,EAAA,GAAA,EAAA,CAAA,Y;MAAc,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,OAAH,GAAU,E;MACzC,kBAAkB,GAAA,EAAA,CAAA,kB;;AAEZ,MAAA,EAAA,GAAwC,QAAQ,CAAkB;AACtE,IAAA,OAAO,EAAE,cAD6D;AAEtE,IAAA,YAAY,EAAE;AAFwD,GAAlB,CAAhD;AAAA,MAAC,EAAA,GAAA,EAAA,CAAA,CAAA,CAAD;AAAA,MAAG,OAAO,GAAA,EAAA,CAAA,OAAV;AAAA,MAAY,YAAY,GAAA,EAAA,CAAA,YAAxB;AAAA,MAA4B,QAAQ,GAAA,EAAA,CAAA,CAAA,CAApC;;AAIN,MAAM,WAAW,GAAG,MAAM,CAAC,OAAD,CAA1B;;AACA,MAAI,WAAW,CAAC,OAAZ,KAAwB,OAA5B,EAAqC;AACnC,IAAA,WAAW,CAAC,OAAZ,GAAsB,OAAtB;;AACA,QAAI,kBAAJ,EAAwB;AACtB,MAAA,kBAAkB,CAAC,OAAD,CAAlB;AACD;AACF;AAED;;;;;;;;AAMA,MAAM,aAAa,GAAG,WAAW,CAAC,UAAC,YAAD,EAAwB;AACxD,IAAA,QAAQ,CAAC;AAAE,MAAA,OAAO,EAAE,IAAX;AAAiB,MAAA,YAAY,EAAA;AAA7B,KAAD,CAAR;AACD,GAFgC,EAE9B,EAF8B,CAAjC;AAIA;;;;;AAIA,MAAM,IAAI,GAAG,WAAW,CAAC,YAAA;AACvB,IAAA,aAAa,CAAC,OAAD,CAAb;AACD,GAFuB,EAErB,CAAC,aAAD,CAFqB,CAAxB;AAIA;;;;AAGA,MAAM,IAAI,GAAG,WAAW,CAAC,YAAA;AACvB,IAAA,QAAQ,CAAC;AAAE,MAAA,OAAO,EAAE,KAAX;AAAkB,MAAA,YAAY,EAAE;AAAhC,KAAD,CAAR;AACD,GAFuB,EAErB,EAFqB,CAAxB;AAIA;;;;AAGA,MAAM,MAAM,GAAG,WAAW,CAAC,YAAA;AACzB,IAAA,QAAQ,CAAC,UAAC,EAAD,EAA0B;UAAvB,OAAO,GAAA,EAAA,CAAA,O;UAAE,YAAY,GAAA,EAAA,CAAA,Y;AAAO,aAAC;AACvC,QAAA,OAAO,EAAE,CAAC,OAD6B;AAEvC,QAAA,YAAY,EAAA;AAF2B,OAAD;AAGtC,KAHM,CAAR;AAID,GALyB,EAKvB,EALuB,CAA1B;AAOA,SAAO;AACL,IAAA,OAAO,EAAA,OADF;AAEL,IAAA,YAAY,EAAA,YAFP;AAGL,IAAA,IAAI,EAAA,IAHC;AAIL,IAAA,aAAa,EAAA,aAJR;AAKL,IAAA,IAAI,EAAA,IALC;AAML,IAAA,MAAM,EAAA;AAND,GAAP;AAQD","sourceRoot":"","sourcesContent":["import { useCallback, useRef, useState } from \"react\";\n/**\n * This is the main visibility hook to be used for the `DropdownMenu` and\n * `DropdownMenuItem` components. It'll provide the current visibility as well\n * as the default focus type once the menu becomes visible.\n *\n * @private\n */\nexport default function useVisibility(_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.defaultVisible, defaultVisible = _c === void 0 ? false : _c, _d = _b.defaultFocus, defaultFocusValue = _d === void 0 ? \"first\" : _d, onVisibilityChange = _b.onVisibilityChange;\n    var _e = useState({\n        visible: defaultVisible,\n        defaultFocus: defaultFocusValue,\n    }), _f = _e[0], visible = _f.visible, defaultFocus = _f.defaultFocus, setState = _e[1];\n    var prevVisible = useRef(visible);\n    if (prevVisible.current !== visible) {\n        prevVisible.current = visible;\n        if (onVisibilityChange) {\n            onVisibilityChange(visible);\n        }\n    }\n    /**\n     * A callback to use that allows you to provide a string for if the focus\n     * target should be the \"first\" or \"last\" focusable element in the menu.  This\n     * should be \"first\" for all cases except when the control opens the menu with\n     * an arrow up key event.\n     */\n    var showWithFocus = useCallback(function (defaultFocus) {\n        setState({ visible: true, defaultFocus: defaultFocus });\n    }, []);\n    /**\n     * The default implementation of showing the menu that will focus the first\n     * menu item once visible.\n     */\n    var show = useCallback(function () {\n        showWithFocus(\"first\");\n    }, [showWithFocus]);\n    /**\n     * Hides the menu.\n     */\n    var hide = useCallback(function () {\n        setState({ visible: false, defaultFocus: \"first\" });\n    }, []);\n    /**\n     * Toggles the visibility of the menu.\n     */\n    var toggle = useCallback(function () {\n        setState(function (_a) {\n            var visible = _a.visible, defaultFocus = _a.defaultFocus;\n            return ({\n                visible: !visible,\n                defaultFocus: defaultFocus,\n            });\n        });\n    }, []);\n    return {\n        visible: visible,\n        defaultFocus: defaultFocus,\n        show: show,\n        showWithFocus: showWithFocus,\n        hide: hide,\n        toggle: toggle,\n    };\n}\n//# sourceMappingURL=useVisibility.js.map"]},"metadata":{},"sourceType":"module"}