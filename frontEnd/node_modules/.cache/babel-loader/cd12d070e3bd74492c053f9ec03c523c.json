{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n/* eslint-disable react/prop-types */\n\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { bem } from \"@react-md/utils\";\nimport { useInheritContext } from \"./useInheritContext\";\nvar block = bem(\"rmd-app-bar\");\n/**\n * This component is really just a simple wrapper for the `Button` component\n * that adds some additional styles for adding spacing before and after this\n * button so that it aligns to the main \"keyline\" of your application's\n * navigation. In simpler terms, it will make the left side of the icon in this\n * button aligns with all the other icons that appear in `ListItem`s in your\n * main navigation.\n *\n * This component is generally really only used when you want to have a\n * temporary navigation element like a hamburger menu.\n */\n\nvar AppBarNav = forwardRef(function AppBarNav(_a, ref) {\n  var className = _a.className,\n      children = _a.children,\n      inheritColor = _a.inheritColor,\n      floating = _a.floating,\n      _b = _a.theme,\n      theme = _b === void 0 ? floating ? \"secondary\" : \"clear\" : _b,\n      _c = _a.buttonType,\n      buttonType = _c === void 0 ? \"icon\" : _c,\n      props = __rest(_a, [\"className\", \"children\", \"inheritColor\", \"floating\", \"theme\", \"buttonType\"]);\n\n  return React.createElement(Button, __assign({}, props, {\n    theme: theme,\n    floating: floating,\n    buttonType: buttonType,\n    ref: ref,\n    className: cn(block(\"nav\", {\n      inherit: useInheritContext(inheritColor)\n    }), className)\n  }), children);\n});\nexport default AppBarNav;","map":{"version":3,"sources":["../src/AppBarNav.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AACA,OAAO,KAAP,IAAgB,UAAhB,QAAkC,OAAlC;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,MAAT,QAAoC,kBAApC;AACA,SAAS,GAAT,QAAoB,iBAApB;AAEA,SAA6B,iBAA7B,QAAsD,qBAAtD;AAIA,IAAM,KAAK,GAAG,GAAG,CAAC,aAAD,CAAjB;AAEA;;;;;;;;;;;;AAWA,IAAM,SAAS,GAAG,UAAU,CAC1B,SAAS,SAAT,CACE,EADF,EAUE,GAVF,EAUK;AARD,MAAA,SAAS,GAAA,EAAA,CAAA,SAAT;AAAA,MACA,QAAQ,GAAA,EAAA,CAAA,QADR;AAAA,MAEA,YAAY,GAAA,EAAA,CAAA,YAFZ;AAAA,MAGA,QAAQ,GAAA,EAAA,CAAA,QAHR;AAAA,MAIA,EAAA,GAAA,EAAA,CAAA,KAJA;AAAA,MAIA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,QAAQ,GAAG,WAAH,GAAiB,OAA5B,GAAmC,EAJxC;AAAA,MAKA,EAAA,GAAA,EAAA,CAAA,UALA;AAAA,MAKA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,MAAH,GAAS,EALnB;AAAA,MAMG,KAAK,GAAA,MAAA,CAAA,EAAA,EAPV,CAAA,WAAA,EAAA,UAAA,EAAA,cAAA,EAAA,UAAA,EAAA,OAAA,EAAA,YAAA,CAOU,CANR;;AAUF,SACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,QAAA,CAAA,EAAA,EACD,KADC,EACI;AACT,IAAA,KAAK,EAAE,KADE;AAET,IAAA,QAAQ,EAAE,QAFD;AAGT,IAAA,UAAU,EAAE,UAHH;AAIT,IAAA,GAAG,EAAE,GAJI;AAKT,IAAA,SAAS,EAAE,EAAE,CACX,KAAK,CAAC,KAAD,EAAQ;AACX,MAAA,OAAO,EAAE,iBAAiB,CAAC,YAAD;AADf,KAAR,CADM,EAIX,SAJW;AALJ,GADJ,CAAP,EAaG,QAbH,CADF;AAiBD,CA9ByB,CAA5B;AAiCA,eAAe,SAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable react/prop-types */\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { bem } from \"@react-md/utils\";\nimport { useInheritContext } from \"./useInheritContext\";\nvar block = bem(\"rmd-app-bar\");\n/**\n * This component is really just a simple wrapper for the `Button` component\n * that adds some additional styles for adding spacing before and after this\n * button so that it aligns to the main \"keyline\" of your application's\n * navigation. In simpler terms, it will make the left side of the icon in this\n * button aligns with all the other icons that appear in `ListItem`s in your\n * main navigation.\n *\n * This component is generally really only used when you want to have a\n * temporary navigation element like a hamburger menu.\n */\nvar AppBarNav = forwardRef(function AppBarNav(_a, ref) {\n    var className = _a.className, children = _a.children, inheritColor = _a.inheritColor, floating = _a.floating, _b = _a.theme, theme = _b === void 0 ? floating ? \"secondary\" : \"clear\" : _b, _c = _a.buttonType, buttonType = _c === void 0 ? \"icon\" : _c, props = __rest(_a, [\"className\", \"children\", \"inheritColor\", \"floating\", \"theme\", \"buttonType\"]);\n    return (React.createElement(Button, __assign({}, props, { theme: theme, floating: floating, buttonType: buttonType, ref: ref, className: cn(block(\"nav\", {\n            inherit: useInheritContext(inheritColor),\n        }), className) }), children));\n});\nexport default AppBarNav;\n//# sourceMappingURL=AppBarNav.js.map"]},"metadata":{},"sourceType":"module"}