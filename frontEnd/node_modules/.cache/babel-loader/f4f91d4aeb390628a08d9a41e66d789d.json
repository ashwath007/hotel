{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, useCallback } from \"react\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isToggleableLayout } from \"./utils\";\n/**\n * The `LayoutCloseNavigationButton` is used to close the navigation panel for\n * toggleable layouts.\n */\n\nvar LayoutCloseNavigationButton = forwardRef(function LayoutCloseNavigationButton(_a, ref) {\n  var propId = _a.id,\n      ariaLabelledBy = _a[\"aria-labelledby\"],\n      _b = _a[\"aria-label\"],\n      ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : \"Hide Navigation\" : _b,\n      onClick = _a.onClick,\n      _c = _a.first,\n      first = _c === void 0 ? true : _c,\n      _d = _a.last,\n      last = _d === void 0 ? true : _d,\n      _e = _a.buttonType,\n      buttonType = _e === void 0 ? \"icon\" : _e,\n      propChildren = _a.children,\n      rendered = _a.rendered,\n      props = __rest(_a, [\"id\", \"aria-labelledby\", \"aria-label\", \"onClick\", \"first\", \"last\", \"buttonType\", \"children\", \"rendered\"]);\n\n  var children = useIcon(\"back\", propChildren);\n\n  var _f = useLayoutConfig(),\n      baseId = _f.baseId,\n      layout = _f.layout,\n      hideNav = _f.hideNav;\n\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      onClick(event);\n    }\n\n    hideNav();\n  }, [onClick, hideNav]);\n  var id = propId !== null && propId !== void 0 ? propId : baseId + \"-nav-x\";\n  var isRendered = rendered !== null && rendered !== void 0 ? rendered : isToggleableLayout(layout);\n\n  if (!isRendered) {\n    return null;\n  }\n\n  return React.createElement(AppBarAction, __assign({}, props, {\n    id: id,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    ref: ref,\n    first: first,\n    last: last,\n    buttonType: buttonType,\n    onClick: handleClick\n  }), children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    LayoutCloseNavigationButton.propTypes = {\n      id: PropTypes.string,\n      \"aria-label\": PropTypes.string,\n      \"aria-labelledby\": PropTypes.string,\n      first: PropTypes.bool,\n      last: PropTypes.bool,\n      onClick: PropTypes.func,\n      children: PropTypes.node,\n      buttonType: PropTypes.oneOf([\"icon\", \"text\"]),\n      rendered: PropTypes.bool\n    };\n  } catch (error) {}\n}\n\nexport default LayoutCloseNavigationButton;","map":{"version":3,"sources":["../src/LayoutCloseNavigationButton.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, useCallback } from \"react\";\nimport { AppBarAction } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isToggleableLayout } from \"./utils\";\n/**\n * The `LayoutCloseNavigationButton` is used to close the navigation panel for\n * toggleable layouts.\n */\nvar LayoutCloseNavigationButton = forwardRef(function LayoutCloseNavigationButton(_a, ref) {\n    var propId = _a.id, ariaLabelledBy = _a[\"aria-labelledby\"], _b = _a[\"aria-label\"], ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : \"Hide Navigation\" : _b, onClick = _a.onClick, _c = _a.first, first = _c === void 0 ? true : _c, _d = _a.last, last = _d === void 0 ? true : _d, _e = _a.buttonType, buttonType = _e === void 0 ? \"icon\" : _e, propChildren = _a.children, rendered = _a.rendered, props = __rest(_a, [\"id\", \"aria-labelledby\", \"aria-label\", \"onClick\", \"first\", \"last\", \"buttonType\", \"children\", \"rendered\"]);\n    var children = useIcon(\"back\", propChildren);\n    var _f = useLayoutConfig(), baseId = _f.baseId, layout = _f.layout, hideNav = _f.hideNav;\n    var handleClick = useCallback(function (event) {\n        if (onClick) {\n            onClick(event);\n        }\n        hideNav();\n    }, [onClick, hideNav]);\n    var id = propId !== null && propId !== void 0 ? propId : baseId + \"-nav-x\";\n    var isRendered = rendered !== null && rendered !== void 0 ? rendered : isToggleableLayout(layout);\n    if (!isRendered) {\n        return null;\n    }\n    return (React.createElement(AppBarAction, __assign({}, props, { id: id, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy, ref: ref, first: first, last: last, buttonType: buttonType, onClick: handleClick }), children));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        LayoutCloseNavigationButton.propTypes = {\n            id: PropTypes.string,\n            \"aria-label\": PropTypes.string,\n            \"aria-labelledby\": PropTypes.string,\n            first: PropTypes.bool,\n            last: PropTypes.bool,\n            onClick: PropTypes.func,\n            children: PropTypes.node,\n            buttonType: PropTypes.oneOf([\"icon\", \"text\"]),\n            rendered: PropTypes.bool,\n        };\n    }\n    catch (error) { }\n}\nexport default LayoutCloseNavigationButton;\n//# sourceMappingURL=LayoutCloseNavigationButton.js.map"]},"metadata":{},"sourceType":"module"}