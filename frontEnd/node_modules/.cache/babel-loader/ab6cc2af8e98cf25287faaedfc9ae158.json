{"ast":null,"code":"import { useCloseOnOutsideClick, useEnsuredRef } from \"@react-md/utils\";\nimport useMenuClick from \"./useMenuClick\";\nimport useMenuKeyDown from \"./useMenuKeyDown\";\n/**\n * This hook is used to provide all the menu functionality within the `Menu`\n * component.  It'll ensure that:\n *\n * - the menu will be closed if an element outside of the menu is clicked\n * - the menu items within the menu are keyboard focusable after typing or using\n *   the arrow keys\n * - the menu will close if the Escape key or Tab key is pressed (tab since\n *   it'll lose focus)\n * - conditionally close the menu if the page is scrolled while visible.\n */\n\nexport default function useMenu(_a) {\n  var propRef = _a.ref,\n      visible = _a.visible,\n      controlId = _a.controlId,\n      _b = _a.horizontal,\n      horizontal = _b === void 0 ? false : _b,\n      propOnClick = _a.onClick,\n      propOnKeyDown = _a.onKeyDown,\n      _c = _a.portalled,\n      portalled = _c === void 0 ? false : _c,\n      defaultFocus = _a.defaultFocus,\n      onRequestClose = _a.onRequestClose,\n      _d = _a.disableControlClickOkay,\n      disableControlClickOkay = _d === void 0 ? false : _d;\n\n  var _e = useEnsuredRef(propRef),\n      ref = _e[0],\n      refHandler = _e[1];\n\n  useCloseOnOutsideClick({\n    element: ref,\n    enabled: visible,\n    onOutsideClick: function (element, target, contains) {\n      if (!element || !target) {\n        return;\n      }\n\n      var control = document.getElementById(controlId); // Need to also check if we have an `aria-expanded` visible anywhere since\n      // the child menus need to be portalled out to fix the overflow issue in\n      // Safari. If we didn't need to portal, this line could be removed as the\n      // `menu.current` would contain the child menu and not close.\n\n      var expanded = ref.current && ref.current.querySelector('[aria-expanded=\"true\"]') && target.closest('[role=\"menu\"]');\n\n      if ((disableControlClickOkay || !contains(control, target)) && !expanded) {\n        onRequestClose();\n      }\n    }\n  });\n  var onClick = useMenuClick({\n    onClick: propOnClick,\n    onRequestClose: onRequestClose\n  });\n  var onKeyDown = useMenuKeyDown({\n    menu: ref.current,\n    onKeyDown: propOnKeyDown,\n    onRequestClose: onRequestClose,\n    portalled: portalled,\n    horizontal: horizontal,\n    defaultFocus: defaultFocus\n  });\n  return {\n    ref: refHandler,\n    menuRef: ref,\n    onClick: onClick,\n    onKeyDown: onKeyDown\n  };\n}","map":{"version":3,"sources":["../src/useMenu.ts"],"names":[],"mappings":"AACA,SAAS,sBAAT,EAAiC,aAAjC,QAAsD,iBAAtD;AAEA,OAAO,YAAP,MAAyB,gBAAzB;AACA,OAAO,cAAP,MAA2B,kBAA3B;AA0EA;;;;;;;;;;;;AAWA,eAAc,SAAU,OAAV,CAAkB,EAAlB,EAWA;MAVP,OAAO,GAAA,EAAA,CAAA,G;MACZ,OAAO,GAAA,EAAA,CAAA,O;MACP,SAAS,GAAA,EAAA,CAAA,S;MACT,EAAA,GAAA,EAAA,CAAA,U;MAAA,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MACT,WAAW,GAAA,EAAA,CAAA,O;MACT,aAAa,GAAA,EAAA,CAAA,S;MACxB,EAAA,GAAA,EAAA,CAAA,S;MAAA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MACjB,YAAY,GAAA,EAAA,CAAA,Y;MACZ,cAAc,GAAA,EAAA,CAAA,c;MACd,EAAA,GAAA,EAAA,CAAA,uB;MAAA,uBAAuB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;;AAEzB,MAAA,EAAA,GAAoB,aAAa,CAAC,OAAD,CAAjC;AAAA,MAAC,GAAG,GAAA,EAAA,CAAA,CAAA,CAAJ;AAAA,MAAM,UAAU,GAAA,EAAA,CAAA,CAAA,CAAhB;;AAEN,EAAA,sBAAsB,CAAC;AACrB,IAAA,OAAO,EAAE,GADY;AAErB,IAAA,OAAO,EAAE,OAFY;AAGrB,IAAA,cAAc,EAAA,UAAC,OAAD,EAAU,MAAV,EAAkB,QAAlB,EAA0B;AACtC,UAAI,CAAC,OAAD,IAAY,CAAC,MAAjB,EAAyB;AACvB;AACD;;AAED,UAAM,OAAO,GAAG,QAAQ,CAAC,cAAT,CAAwB,SAAxB,CAAhB,CALsC,CAOtC;AACA;AACA;AACA;;AACA,UAAM,QAAQ,GACZ,GAAG,CAAC,OAAJ,IACA,GAAG,CAAC,OAAJ,CAAY,aAAZ,CAA0B,wBAA1B,CADA,IAEA,MAAM,CAAC,OAAP,CAAe,eAAf,CAHF;;AAKA,UACE,CAAC,uBAAuB,IAAI,CAAC,QAAQ,CAAC,OAAD,EAAU,MAAV,CAArC,KACA,CAAC,QAFH,EAGE;AACA,QAAA,cAAc;AACf;AACF;AAzBoB,GAAD,CAAtB;AA4BA,MAAM,OAAO,GAAG,YAAY,CAAC;AAAE,IAAA,OAAO,EAAE,WAAX;AAAwB,IAAA,cAAc,EAAA;AAAtC,GAAD,CAA5B;AACA,MAAM,SAAS,GAAG,cAAc,CAAC;AAC/B,IAAA,IAAI,EAAE,GAAG,CAAC,OADqB;AAE/B,IAAA,SAAS,EAAE,aAFoB;AAG/B,IAAA,cAAc,EAAA,cAHiB;AAI/B,IAAA,SAAS,EAAA,SAJsB;AAK/B,IAAA,UAAU,EAAA,UALqB;AAM/B,IAAA,YAAY,EAAA;AANmB,GAAD,CAAhC;AASA,SAAO;AACL,IAAA,GAAG,EAAE,UADA;AAEL,IAAA,OAAO,EAAE,GAFJ;AAGL,IAAA,OAAO,EAAA,OAHF;AAIL,IAAA,SAAS,EAAA;AAJJ,GAAP;AAMD","sourceRoot":"","sourcesContent":["import { useCloseOnOutsideClick, useEnsuredRef } from \"@react-md/utils\";\nimport useMenuClick from \"./useMenuClick\";\nimport useMenuKeyDown from \"./useMenuKeyDown\";\n/**\n * This hook is used to provide all the menu functionality within the `Menu`\n * component.  It'll ensure that:\n *\n * - the menu will be closed if an element outside of the menu is clicked\n * - the menu items within the menu are keyboard focusable after typing or using\n *   the arrow keys\n * - the menu will close if the Escape key or Tab key is pressed (tab since\n *   it'll lose focus)\n * - conditionally close the menu if the page is scrolled while visible.\n */\nexport default function useMenu(_a) {\n    var propRef = _a.ref, visible = _a.visible, controlId = _a.controlId, _b = _a.horizontal, horizontal = _b === void 0 ? false : _b, propOnClick = _a.onClick, propOnKeyDown = _a.onKeyDown, _c = _a.portalled, portalled = _c === void 0 ? false : _c, defaultFocus = _a.defaultFocus, onRequestClose = _a.onRequestClose, _d = _a.disableControlClickOkay, disableControlClickOkay = _d === void 0 ? false : _d;\n    var _e = useEnsuredRef(propRef), ref = _e[0], refHandler = _e[1];\n    useCloseOnOutsideClick({\n        element: ref,\n        enabled: visible,\n        onOutsideClick: function (element, target, contains) {\n            if (!element || !target) {\n                return;\n            }\n            var control = document.getElementById(controlId);\n            // Need to also check if we have an `aria-expanded` visible anywhere since\n            // the child menus need to be portalled out to fix the overflow issue in\n            // Safari. If we didn't need to portal, this line could be removed as the\n            // `menu.current` would contain the child menu and not close.\n            var expanded = ref.current &&\n                ref.current.querySelector('[aria-expanded=\"true\"]') &&\n                target.closest('[role=\"menu\"]');\n            if ((disableControlClickOkay || !contains(control, target)) &&\n                !expanded) {\n                onRequestClose();\n            }\n        },\n    });\n    var onClick = useMenuClick({ onClick: propOnClick, onRequestClose: onRequestClose });\n    var onKeyDown = useMenuKeyDown({\n        menu: ref.current,\n        onKeyDown: propOnKeyDown,\n        onRequestClose: onRequestClose,\n        portalled: portalled,\n        horizontal: horizontal,\n        defaultFocus: defaultFocus,\n    });\n    return {\n        ref: refHandler,\n        menuRef: ref,\n        onClick: onClick,\n        onKeyDown: onKeyDown,\n    };\n}\n//# sourceMappingURL=useMenu.js.map"]},"metadata":{},"sourceType":"module"}