{"ast":null,"code":"import { useCallback, useState } from \"react\";\nimport { getViewportSize, useRefCache } from \"@react-md/utils\";\n\nvar NOOP = function () {};\n/**\n * A small hook that will set the tooltip position automatically based on the\n * container element's location within the viewport. However, if the `position`\n * option/prop was provided, that value will always be used instead.\n */\n\n\nexport default function usePosition(_a) {\n  var determinedPosition = _a.position,\n      defaultPosition = _a.defaultPosition,\n      threshold = _a.threshold;\n\n  var _b = useState(defaultPosition),\n      position = _b[0],\n      setPosition = _b[1];\n\n  var prevPosition = useRefCache(position);\n  /**\n   * This will only be used when the `determinedPosition` is undefined. When the\n   * container element starts the tooltip \"visibility\" mode, this will be called\n   * so that we can best guess what the position of the tooltip should be based\n   * on the current position of the container element within the viewport. If\n   * this isn't done and the tooltip swaps position due to the positioning\n   * logic, the animation will be reversed.\n   */\n\n  var setEstimatedPosition = useCallback(function (container) {\n    var _a = container.getBoundingClientRect(),\n        top = _a.top,\n        left = _a.left;\n\n    var nextPosition = defaultPosition;\n    var vh = getViewportSize(\"height\");\n    var vw = getViewportSize(\"width\");\n\n    switch (defaultPosition) {\n      case \"above\":\n        if (top < vh - vh * threshold) {\n          nextPosition = \"below\";\n        }\n\n        break;\n\n      case \"below\":\n        if (top > vh * threshold) {\n          nextPosition = \"above\";\n        }\n\n        break;\n\n      case \"left\":\n        if (left < vw - vw * threshold) {\n          nextPosition = \"right\";\n        }\n\n        break;\n\n      case \"right\":\n        if (left > vw * threshold) {\n          nextPosition = \"left\";\n        }\n\n        break;\n      // no default\n    }\n\n    if (prevPosition.current !== nextPosition) {\n      setPosition(nextPosition);\n    }\n  }, // disabled since useRefCache for prevPosition\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [defaultPosition, threshold]);\n\n  if (typeof determinedPosition !== \"undefined\") {\n    return {\n      position: determinedPosition,\n      setEstimatedPosition: NOOP\n    };\n  }\n\n  return {\n    position: position,\n    setEstimatedPosition: setEstimatedPosition\n  };\n}","map":{"version":3,"sources":["../src/usePosition.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AACA,SAAS,eAAT,EAA0C,WAA1C,QAA6D,iBAA7D;;AAQA,IAAM,IAAI,GAAG,YAAA,CAAc,CAA3B;AAOA;;;;;;;AAKA,eAAc,SAAU,WAAV,CAAsB,EAAtB,EAII;MAHN,kBAAkB,GAAA,EAAA,CAAA,Q;MAC5B,eAAe,GAAA,EAAA,CAAA,e;MACf,SAAS,GAAA,EAAA,CAAA,S;;AAEH,MAAA,EAAA,GAA0B,QAAQ,CAAC,eAAD,CAAlC;AAAA,MAAC,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAT;AAAA,MAAW,WAAW,GAAA,EAAA,CAAA,CAAA,CAAtB;;AACN,MAAM,YAAY,GAAG,WAAW,CAAC,QAAD,CAAhC;AAEA;;;;;;;;;AAQA,MAAM,oBAAoB,GAAG,WAAW,CACtC,UAAC,SAAD,EAAuB;AACf,QAAA,EAAA,GAAgB,SAAS,CAAC,qBAAV,EAAhB;AAAA,QAAE,GAAG,GAAA,EAAA,CAAA,GAAL;AAAA,QAAO,IAAI,GAAA,EAAA,CAAA,IAAX;;AAEN,QAAI,YAAY,GAAG,eAAnB;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,QAAD,CAA1B;AACA,QAAM,EAAE,GAAG,eAAe,CAAC,OAAD,CAA1B;;AACA,YAAQ,eAAR;AACE,WAAK,OAAL;AACE,YAAI,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,SAApB,EAA+B;AAC7B,UAAA,YAAY,GAAG,OAAf;AACD;;AACD;;AACF,WAAK,OAAL;AACE,YAAI,GAAG,GAAG,EAAE,GAAG,SAAf,EAA0B;AACxB,UAAA,YAAY,GAAG,OAAf;AACD;;AACD;;AACF,WAAK,MAAL;AACE,YAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,SAArB,EAAgC;AAC9B,UAAA,YAAY,GAAG,OAAf;AACD;;AACD;;AACF,WAAK,OAAL;AACE,YAAI,IAAI,GAAG,EAAE,GAAG,SAAhB,EAA2B;AACzB,UAAA,YAAY,GAAG,MAAf;AACD;;AACD;AACF;AArBF;;AAwBA,QAAI,YAAY,CAAC,OAAb,KAAyB,YAA7B,EAA2C;AACzC,MAAA,WAAW,CAAC,YAAD,CAAX;AACD;AACF,GAlCqC,EAmCtC;AACA;AACA,GAAC,eAAD,EAAkB,SAAlB,CArCsC,CAAxC;;AAwCA,MAAI,OAAO,kBAAP,KAA8B,WAAlC,EAA+C;AAC7C,WAAO;AACL,MAAA,QAAQ,EAAE,kBADL;AAEL,MAAA,oBAAoB,EAAE;AAFjB,KAAP;AAID;;AAED,SAAO;AACL,IAAA,QAAQ,EAAA,QADH;AAEL,IAAA,oBAAoB,EAAA;AAFf,GAAP;AAID","sourceRoot":"","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { getViewportSize, useRefCache } from \"@react-md/utils\";\nvar NOOP = function () { };\n/**\n * A small hook that will set the tooltip position automatically based on the\n * container element's location within the viewport. However, if the `position`\n * option/prop was provided, that value will always be used instead.\n */\nexport default function usePosition(_a) {\n    var determinedPosition = _a.position, defaultPosition = _a.defaultPosition, threshold = _a.threshold;\n    var _b = useState(defaultPosition), position = _b[0], setPosition = _b[1];\n    var prevPosition = useRefCache(position);\n    /**\n     * This will only be used when the `determinedPosition` is undefined. When the\n     * container element starts the tooltip \"visibility\" mode, this will be called\n     * so that we can best guess what the position of the tooltip should be based\n     * on the current position of the container element within the viewport. If\n     * this isn't done and the tooltip swaps position due to the positioning\n     * logic, the animation will be reversed.\n     */\n    var setEstimatedPosition = useCallback(function (container) {\n        var _a = container.getBoundingClientRect(), top = _a.top, left = _a.left;\n        var nextPosition = defaultPosition;\n        var vh = getViewportSize(\"height\");\n        var vw = getViewportSize(\"width\");\n        switch (defaultPosition) {\n            case \"above\":\n                if (top < vh - vh * threshold) {\n                    nextPosition = \"below\";\n                }\n                break;\n            case \"below\":\n                if (top > vh * threshold) {\n                    nextPosition = \"above\";\n                }\n                break;\n            case \"left\":\n                if (left < vw - vw * threshold) {\n                    nextPosition = \"right\";\n                }\n                break;\n            case \"right\":\n                if (left > vw * threshold) {\n                    nextPosition = \"left\";\n                }\n                break;\n            // no default\n        }\n        if (prevPosition.current !== nextPosition) {\n            setPosition(nextPosition);\n        }\n    }, \n    // disabled since useRefCache for prevPosition\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [defaultPosition, threshold]);\n    if (typeof determinedPosition !== \"undefined\") {\n        return {\n            position: determinedPosition,\n            setEstimatedPosition: NOOP,\n        };\n    }\n    return {\n        position: position,\n        setEstimatedPosition: setEstimatedPosition,\n    };\n}\n//# sourceMappingURL=usePosition.js.map"]},"metadata":{},"sourceType":"module"}