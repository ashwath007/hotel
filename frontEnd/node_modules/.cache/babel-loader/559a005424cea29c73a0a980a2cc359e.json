{"ast":null,"code":"import { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT } from \"./constants\";\n/**\n * Gets the current layout based on the app size and layout configuration.\n *\n * @return The current layout type\n */\n\nexport function getLayoutType(_a) {\n  var appSize = _a.appSize,\n      _b = _a.phoneLayout,\n      phoneLayout = _b === void 0 ? DEFAULT_PHONE_LAYOUT : _b,\n      _c = _a.tabletLayout,\n      tabletLayout = _c === void 0 ? DEFAULT_TABLET_LAYOUT : _c,\n      _d = _a.landscapeTabletLayout,\n      landscapeTabletLayout = _d === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d,\n      _e = _a.desktopLayout,\n      desktopLayout = _e === void 0 ? DEFAULT_DESKTOP_LAYOUT : _e,\n      _f = _a.largeDesktopLayout,\n      largeDesktopLayout = _f === void 0 ? desktopLayout : _f;\n  var isPhone = appSize.isPhone,\n      isTablet = appSize.isTablet,\n      isLargeDesktop = appSize.isLargeDesktop,\n      isLandscape = appSize.isLandscape;\n\n  if (isPhone) {\n    return phoneLayout;\n  }\n\n  if (isTablet) {\n    return isLandscape ? landscapeTabletLayout : tabletLayout;\n  }\n\n  if (isLargeDesktop) {\n    return largeDesktopLayout;\n  }\n\n  return desktopLayout;\n}\n/**\n * Checks if the current `layout` is one of the temporary types\n *\n * @param layout The layout to check against\n * @return true if the current layout has a temporary navigation.\n */\n\nexport function isTemporaryLayout(layout) {\n  return layout === \"temporary\" || layout === \"temporary-mini\";\n}\n/**\n * Checks if the current `layout` is one of the toggleable types\n *\n * @param layout The layout to check against\n * @return true if the current layout is toggleable.\n */\n\nexport function isToggleableLayout(layout) {\n  return layout === \"toggleable\" || layout === \"toggleable-mini\";\n}\n/**\n * Checks if the current `layout` is `\"clipped\"`, `\"floating\"`, or `\"full-height\"`.\n *\n * @param layout The layout to check against\n * @return true if the current layout is persistent.\n */\n\nexport function isPersistentLayout(layout) {\n  return layout === \"clipped\" || layout === \"floating\" || layout === \"full-height\";\n}\n/**\n * Checks if the current `layout` is the `\"full-height\"` variant.\n *\n * @param layout The layout to check against\n * @return true if the current layout is the full height variant.\n */\n\nexport function isFullHeightLayout(layout) {\n  return layout === \"full-height\";\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"AAEA,SACE,sBADF,EAEE,+BAFF,EAGE,oBAHF,EAIE,qBAJF,QAKO,aALP;AAgBA;;;;;;AAKA,OAAM,SAAU,aAAV,CAAwB,EAAxB,EAOa;MANjB,OAAO,GAAA,EAAA,CAAA,O;MACP,EAAA,GAAA,EAAA,CAAA,W;MAAA,WAAW,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,oBAAH,GAAuB,E;MAClC,EAAA,GAAA,EAAA,CAAA,Y;MAAA,YAAY,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,qBAAH,GAAwB,E;MACpC,EAAA,GAAA,EAAA,CAAA,qB;MAAA,qBAAqB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,+BAAH,GAAkC,E;MACvD,EAAA,GAAA,EAAA,CAAA,a;MAAA,aAAa,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,sBAAH,GAAyB,E;MACtC,EAAA,GAAA,EAAA,CAAA,kB;MAAA,kBAAkB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,aAAH,GAAgB,E;AAE1B,MAAA,OAAO,GAA4C,OAAO,CAAnD,OAAP;AAAA,MAAS,QAAQ,GAAkC,OAAO,CAAzC,QAAjB;AAAA,MAAmB,cAAc,GAAkB,OAAO,CAAzB,cAAjC;AAAA,MAAmC,WAAW,GAAK,OAAO,CAAZ,WAA9C;;AACR,MAAI,OAAJ,EAAa;AACX,WAAO,WAAP;AACD;;AAED,MAAI,QAAJ,EAAc;AACZ,WAAO,WAAW,GAAG,qBAAH,GAA2B,YAA7C;AACD;;AAED,MAAI,cAAJ,EAAoB;AAClB,WAAO,kBAAP;AACD;;AAED,SAAO,aAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAU,iBAAV,CAA4B,MAA5B,EAAuD;AAC3D,SAAO,MAAM,KAAK,WAAX,IAA0B,MAAM,KAAK,gBAA5C;AACD;AAED;;;;;;;AAMA,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAAwD;AAC5D,SAAO,MAAM,KAAK,YAAX,IAA2B,MAAM,KAAK,iBAA7C;AACD;AAED;;;;;;;AAMA,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAAwD;AAC5D,SACE,MAAM,KAAK,SAAX,IAAwB,MAAM,KAAK,UAAnC,IAAiD,MAAM,KAAK,aAD9D;AAGD;AAED;;;;;;;AAMA,OAAM,SAAU,kBAAV,CAA6B,MAA7B,EAAwD;AAC5D,SAAO,MAAM,KAAK,aAAlB;AACD","sourceRoot":"","sourcesContent":["import { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT, } from \"./constants\";\n/**\n * Gets the current layout based on the app size and layout configuration.\n *\n * @return The current layout type\n */\nexport function getLayoutType(_a) {\n    var appSize = _a.appSize, _b = _a.phoneLayout, phoneLayout = _b === void 0 ? DEFAULT_PHONE_LAYOUT : _b, _c = _a.tabletLayout, tabletLayout = _c === void 0 ? DEFAULT_TABLET_LAYOUT : _c, _d = _a.landscapeTabletLayout, landscapeTabletLayout = _d === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d, _e = _a.desktopLayout, desktopLayout = _e === void 0 ? DEFAULT_DESKTOP_LAYOUT : _e, _f = _a.largeDesktopLayout, largeDesktopLayout = _f === void 0 ? desktopLayout : _f;\n    var isPhone = appSize.isPhone, isTablet = appSize.isTablet, isLargeDesktop = appSize.isLargeDesktop, isLandscape = appSize.isLandscape;\n    if (isPhone) {\n        return phoneLayout;\n    }\n    if (isTablet) {\n        return isLandscape ? landscapeTabletLayout : tabletLayout;\n    }\n    if (isLargeDesktop) {\n        return largeDesktopLayout;\n    }\n    return desktopLayout;\n}\n/**\n * Checks if the current `layout` is one of the temporary types\n *\n * @param layout The layout to check against\n * @return true if the current layout has a temporary navigation.\n */\nexport function isTemporaryLayout(layout) {\n    return layout === \"temporary\" || layout === \"temporary-mini\";\n}\n/**\n * Checks if the current `layout` is one of the toggleable types\n *\n * @param layout The layout to check against\n * @return true if the current layout is toggleable.\n */\nexport function isToggleableLayout(layout) {\n    return layout === \"toggleable\" || layout === \"toggleable-mini\";\n}\n/**\n * Checks if the current `layout` is `\"clipped\"`, `\"floating\"`, or `\"full-height\"`.\n *\n * @param layout The layout to check against\n * @return true if the current layout is persistent.\n */\nexport function isPersistentLayout(layout) {\n    return (layout === \"clipped\" || layout === \"floating\" || layout === \"full-height\");\n}\n/**\n * Checks if the current `layout` is the `\"full-height\"` variant.\n *\n * @param layout The layout to check against\n * @return true if the current layout is the full height variant.\n */\nexport function isFullHeightLayout(layout) {\n    return layout === \"full-height\";\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}