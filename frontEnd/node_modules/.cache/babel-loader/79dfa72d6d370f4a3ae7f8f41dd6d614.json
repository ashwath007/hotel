{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { AppBarNav } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { DEFAULT_SHEET_TIMEOUT } from \"@react-md/sheet\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES } from \"./constants\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isTemporaryLayout, isToggleableLayout } from \"./utils\";\n/**\n * This is the default implementation for the navigation toggle button within\n * the `Layout` component and should normally be the first child for the\n * `LayoutAppBar`. In addition, this component will automatically update itself\n * to provide an accessible `aria-label` for screen readers and change to a\n * toggle button for toggleable layouts.\n */\n\nvar LayoutNavToggle = forwardRef(function LayoutNavToggle(_a, forwardedRef) {\n  var propAriaLabel = _a[\"aria-label\"],\n      propAriaPressed = _a[\"aria-pressed\"],\n      propChildren = _a.children,\n      propClassName = _a.className,\n      _b = _a.buttonType,\n      buttonType = _b === void 0 ? \"icon\" : _b,\n      onClick = _a.onClick,\n      propOffset = _a.offset,\n      rendered = _a.rendered,\n      propTabIndex = _a.tabIndex,\n      _c = _a.timeout,\n      timeout = _c === void 0 ? DEFAULT_SHEET_TIMEOUT : _c,\n      _d = _a.classNames,\n      classNames = _d === void 0 ? DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES : _d,\n      props = __rest(_a, [\"aria-label\", \"aria-pressed\", \"children\", \"className\", \"buttonType\", \"onClick\", \"offset\", \"rendered\", \"tabIndex\", \"timeout\", \"classNames\"]);\n\n  var icon = useIcon(\"menu\");\n\n  var _e = useLayoutConfig(),\n      baseId = _e.baseId,\n      layout = _e.layout,\n      showNav = _e.showNav,\n      hideNav = _e.hideNav,\n      visible = _e.visible;\n\n  var isToggleable = isToggleableLayout(layout);\n  var isTemporary = isTemporaryLayout(layout);\n  var isRendered = rendered;\n\n  if (typeof isRendered === \"undefined\") {\n    isRendered = isTemporary || isToggleable;\n  }\n\n  var offset = propOffset;\n\n  if (typeof offset === \"undefined\") {\n    offset = isToggleable && visible;\n  }\n\n  var _f = useCSSTransition({\n    ref: forwardedRef,\n    transitionIn: offset,\n    temporary: false,\n    className: propClassName,\n    timeout: timeout,\n    classNames: classNames\n  }),\n      _g = _f[1],\n      ref = _g.ref,\n      className = _g.className;\n\n  if (!isRendered) {\n    return null;\n  }\n\n  var children = propChildren;\n\n  if (buttonType === \"icon\" && typeof children === \"undefined\") {\n    children = icon;\n  }\n\n  var tabIndex = propTabIndex;\n\n  if (typeof tabIndex === \"undefined\" && visible && isToggleable) {\n    // set to -1 so it isn't tab focusable but is still programmatically\n    // focusable for temporary navigation drawers to re-focus once closed\n    tabIndex = -1;\n  }\n\n  var ariaPressed = propAriaPressed;\n\n  if (typeof ariaPressed === \"undefined\" && isToggleable) {\n    ariaPressed = visible;\n  }\n\n  var ariaLabel = propAriaLabel;\n\n  if (typeof ariaLabel === \"undefined\" && typeof props[\"aria-labelledby\"] === \"undefined\") {\n    ariaLabel = isToggleable ? \"Navigation\" : \"Show Navigation\";\n  }\n\n  return React.createElement(AppBarNav, __assign({\n    id: baseId + \"-nav-toggle\"\n  }, props, {\n    \"aria-label\": ariaLabel,\n    \"aria-pressed\": ariaPressed,\n    ref: ref,\n    onClick: function (event) {\n      if (onClick) {\n        onClick(event);\n      }\n\n      if (!visible) {\n        showNav();\n      } else {\n        hideNav();\n      }\n    },\n    buttonType: buttonType,\n    tabIndex: tabIndex,\n    className: cn(\"rmd-layout-nav-toggle\", className)\n  }), children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    LayoutNavToggle.propTypes = {\n      \"aria-label\": PropTypes.string,\n      \"aria-labelledby\": PropTypes.string,\n      \"aria-pressed\": PropTypes.bool,\n      className: PropTypes.string,\n      children: PropTypes.node,\n      onClick: PropTypes.func,\n      rendered: PropTypes.bool,\n      tabIndex: PropTypes.number,\n      buttonType: PropTypes.oneOf([\"text\", \"icon\"]),\n      offset: PropTypes.bool,\n      timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n        appear: PropTypes.number,\n        enter: PropTypes.number,\n        exit: PropTypes.number\n      })]),\n      classNames: PropTypes.oneOfType([PropTypes.string, PropTypes.shape({\n        appear: PropTypes.string,\n        appearActive: PropTypes.string,\n        enter: PropTypes.string,\n        enterActive: PropTypes.string,\n        enterDone: PropTypes.string,\n        exit: PropTypes.string,\n        exitActive: PropTypes.string,\n        exitDone: PropTypes.string\n      })])\n    };\n  } catch (error) {}\n}\n\nexport default LayoutNavToggle;","map":{"version":3,"sources":["../src/LayoutNavToggle.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { AppBarNav } from \"@react-md/app-bar\";\nimport { useIcon } from \"@react-md/icon\";\nimport { DEFAULT_SHEET_TIMEOUT } from \"@react-md/sheet\";\nimport { useCSSTransition } from \"@react-md/transition\";\nimport { DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES } from \"./constants\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isTemporaryLayout, isToggleableLayout } from \"./utils\";\n/**\n * This is the default implementation for the navigation toggle button within\n * the `Layout` component and should normally be the first child for the\n * `LayoutAppBar`. In addition, this component will automatically update itself\n * to provide an accessible `aria-label` for screen readers and change to a\n * toggle button for toggleable layouts.\n */\nvar LayoutNavToggle = forwardRef(function LayoutNavToggle(_a, forwardedRef) {\n    var propAriaLabel = _a[\"aria-label\"], propAriaPressed = _a[\"aria-pressed\"], propChildren = _a.children, propClassName = _a.className, _b = _a.buttonType, buttonType = _b === void 0 ? \"icon\" : _b, onClick = _a.onClick, propOffset = _a.offset, rendered = _a.rendered, propTabIndex = _a.tabIndex, _c = _a.timeout, timeout = _c === void 0 ? DEFAULT_SHEET_TIMEOUT : _c, _d = _a.classNames, classNames = _d === void 0 ? DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES : _d, props = __rest(_a, [\"aria-label\", \"aria-pressed\", \"children\", \"className\", \"buttonType\", \"onClick\", \"offset\", \"rendered\", \"tabIndex\", \"timeout\", \"classNames\"]);\n    var icon = useIcon(\"menu\");\n    var _e = useLayoutConfig(), baseId = _e.baseId, layout = _e.layout, showNav = _e.showNav, hideNav = _e.hideNav, visible = _e.visible;\n    var isToggleable = isToggleableLayout(layout);\n    var isTemporary = isTemporaryLayout(layout);\n    var isRendered = rendered;\n    if (typeof isRendered === \"undefined\") {\n        isRendered = isTemporary || isToggleable;\n    }\n    var offset = propOffset;\n    if (typeof offset === \"undefined\") {\n        offset = isToggleable && visible;\n    }\n    var _f = useCSSTransition({\n        ref: forwardedRef,\n        transitionIn: offset,\n        temporary: false,\n        className: propClassName,\n        timeout: timeout,\n        classNames: classNames,\n    }), _g = _f[1], ref = _g.ref, className = _g.className;\n    if (!isRendered) {\n        return null;\n    }\n    var children = propChildren;\n    if (buttonType === \"icon\" && typeof children === \"undefined\") {\n        children = icon;\n    }\n    var tabIndex = propTabIndex;\n    if (typeof tabIndex === \"undefined\" && visible && isToggleable) {\n        // set to -1 so it isn't tab focusable but is still programmatically\n        // focusable for temporary navigation drawers to re-focus once closed\n        tabIndex = -1;\n    }\n    var ariaPressed = propAriaPressed;\n    if (typeof ariaPressed === \"undefined\" && isToggleable) {\n        ariaPressed = visible;\n    }\n    var ariaLabel = propAriaLabel;\n    if (typeof ariaLabel === \"undefined\" &&\n        typeof props[\"aria-labelledby\"] === \"undefined\") {\n        ariaLabel = isToggleable ? \"Navigation\" : \"Show Navigation\";\n    }\n    return (React.createElement(AppBarNav, __assign({ id: baseId + \"-nav-toggle\" }, props, { \"aria-label\": ariaLabel, \"aria-pressed\": ariaPressed, ref: ref, onClick: function (event) {\n            if (onClick) {\n                onClick(event);\n            }\n            if (!visible) {\n                showNav();\n            }\n            else {\n                hideNav();\n            }\n        }, buttonType: buttonType, tabIndex: tabIndex, className: cn(\"rmd-layout-nav-toggle\", className) }), children));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        LayoutNavToggle.propTypes = {\n            \"aria-label\": PropTypes.string,\n            \"aria-labelledby\": PropTypes.string,\n            \"aria-pressed\": PropTypes.bool,\n            className: PropTypes.string,\n            children: PropTypes.node,\n            onClick: PropTypes.func,\n            rendered: PropTypes.bool,\n            tabIndex: PropTypes.number,\n            buttonType: PropTypes.oneOf([\"text\", \"icon\"]),\n            offset: PropTypes.bool,\n            timeout: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.shape({\n                    appear: PropTypes.number,\n                    enter: PropTypes.number,\n                    exit: PropTypes.number,\n                }),\n            ]),\n            classNames: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.shape({\n                    appear: PropTypes.string,\n                    appearActive: PropTypes.string,\n                    enter: PropTypes.string,\n                    enterActive: PropTypes.string,\n                    enterDone: PropTypes.string,\n                    exit: PropTypes.string,\n                    exitActive: PropTypes.string,\n                    exitDone: PropTypes.string,\n                }),\n            ]),\n        };\n    }\n    catch (error) { }\n}\nexport default LayoutNavToggle;\n//# sourceMappingURL=LayoutNavToggle.js.map"]},"metadata":{},"sourceType":"module"}