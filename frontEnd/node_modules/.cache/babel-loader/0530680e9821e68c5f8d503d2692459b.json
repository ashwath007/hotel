{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, useCallback, useState, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nimport TextField from \"./TextField\";\nvar block = bem(\"rmd-password\");\n\nfunction isConfigurableIcon(icon) {\n  return !!icon && !isValidElement(icon);\n}\n/**\n * This component is a simple wrapper of the `TextField` that can only be\n * rendered for password inputs. There is built-in functionality to be able to\n * temporarily show the password's value by swapping the `type` to `\"text\"`.\n */\n\n\nvar Password = forwardRef(function Password(_a, ref) {\n  var className = _a.className,\n      inputClassName = _a.inputClassName,\n      propVisibilityIcon = _a.visibilityIcon,\n      visibilityStyle = _a.visibilityStyle,\n      visibilityClassName = _a.visibilityClassName,\n      _b = _a.visibilityLabel,\n      visibilityLabel = _b === void 0 ? \"Show password\" : _b,\n      onVisibilityClick = _a.onVisibilityClick,\n      getVisibilityIcon = _a.getVisibilityIcon,\n      _c = _a.disableVisibility,\n      disableVisibility = _c === void 0 ? false : _c,\n      props = __rest(_a, [\"className\", \"inputClassName\", \"visibilityIcon\", \"visibilityStyle\", \"visibilityClassName\", \"visibilityLabel\", \"onVisibilityClick\", \"getVisibilityIcon\", \"disableVisibility\"]);\n\n  var id = props.id;\n\n  var _d = useState(\"password\"),\n      type = _d[0],\n      setType = _d[1];\n\n  var toggle = useCallback(function (event) {\n    if (onVisibilityClick) {\n      onVisibilityClick(event);\n    }\n\n    setType(function (prevType) {\n      return prevType === \"password\" ? \"text\" : \"password\";\n    });\n  }, [onVisibilityClick]);\n  var visible = type === \"text\";\n  var visibilityIcon = useIcon(\"password\", propVisibilityIcon);\n\n  if (isConfigurableIcon(propVisibilityIcon)) {\n    visibilityIcon = visible ? propVisibilityIcon.visible : propVisibilityIcon.invisible;\n  }\n\n  return React.createElement(TextField, __assign({}, props, {\n    className: cn(block({\n      offset: !disableVisibility\n    }), className),\n    inputClassName: cn(block(\"input\", {\n      offset: !disableVisibility\n    }), inputClassName),\n    ref: ref,\n    type: type,\n    isRightAddon: false,\n    rightChildren: !disableVisibility && React.createElement(Button, {\n      id: id + \"-password-toggle\",\n      \"aria-label\": visibilityLabel,\n      \"aria-pressed\": visible,\n      buttonType: \"icon\",\n      onClick: toggle,\n      style: visibilityStyle,\n      className: cn(block(\"toggle\"), visibilityClassName)\n    }, typeof getVisibilityIcon === \"function\" ? getVisibilityIcon(type) : visibilityIcon)\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    Password.propTypes = {\n      id: PropTypes.string.isRequired,\n      className: PropTypes.string,\n      inputClassName: PropTypes.string,\n      visibilityIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.shape({\n        visible: PropTypes.node,\n        invisible: PropTypes.node\n      })]),\n      visibilityStyle: PropTypes.object,\n      visibilityClassName: PropTypes.string,\n      visibilityLabel: PropTypes.string,\n      disableVisibility: PropTypes.bool,\n      onVisibilityClick: PropTypes.func,\n      getVisibilityIcon: PropTypes.func\n    };\n  } catch (e) {}\n}\n\nexport default Password;","map":{"version":3,"sources":["../../src/text-field/Password.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, useCallback, useState, isValidElement, } from \"react\";\nimport cn from \"classnames\";\nimport { Button } from \"@react-md/button\";\nimport { useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nimport TextField from \"./TextField\";\nvar block = bem(\"rmd-password\");\nfunction isConfigurableIcon(icon) {\n    return !!icon && !isValidElement(icon);\n}\n/**\n * This component is a simple wrapper of the `TextField` that can only be\n * rendered for password inputs. There is built-in functionality to be able to\n * temporarily show the password's value by swapping the `type` to `\"text\"`.\n */\nvar Password = forwardRef(function Password(_a, ref) {\n    var className = _a.className, inputClassName = _a.inputClassName, propVisibilityIcon = _a.visibilityIcon, visibilityStyle = _a.visibilityStyle, visibilityClassName = _a.visibilityClassName, _b = _a.visibilityLabel, visibilityLabel = _b === void 0 ? \"Show password\" : _b, onVisibilityClick = _a.onVisibilityClick, getVisibilityIcon = _a.getVisibilityIcon, _c = _a.disableVisibility, disableVisibility = _c === void 0 ? false : _c, props = __rest(_a, [\"className\", \"inputClassName\", \"visibilityIcon\", \"visibilityStyle\", \"visibilityClassName\", \"visibilityLabel\", \"onVisibilityClick\", \"getVisibilityIcon\", \"disableVisibility\"]);\n    var id = props.id;\n    var _d = useState(\"password\"), type = _d[0], setType = _d[1];\n    var toggle = useCallback(function (event) {\n        if (onVisibilityClick) {\n            onVisibilityClick(event);\n        }\n        setType(function (prevType) { return (prevType === \"password\" ? \"text\" : \"password\"); });\n    }, [onVisibilityClick]);\n    var visible = type === \"text\";\n    var visibilityIcon = useIcon(\"password\", propVisibilityIcon);\n    if (isConfigurableIcon(propVisibilityIcon)) {\n        visibilityIcon = visible\n            ? propVisibilityIcon.visible\n            : propVisibilityIcon.invisible;\n    }\n    return (React.createElement(TextField, __assign({}, props, { className: cn(block({ offset: !disableVisibility }), className), inputClassName: cn(block(\"input\", { offset: !disableVisibility }), inputClassName), ref: ref, type: type, isRightAddon: false, rightChildren: !disableVisibility && (React.createElement(Button, { id: id + \"-password-toggle\", \"aria-label\": visibilityLabel, \"aria-pressed\": visible, buttonType: \"icon\", onClick: toggle, style: visibilityStyle, className: cn(block(\"toggle\"), visibilityClassName) }, typeof getVisibilityIcon === \"function\"\n            ? getVisibilityIcon(type)\n            : visibilityIcon)) })));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        Password.propTypes = {\n            id: PropTypes.string.isRequired,\n            className: PropTypes.string,\n            inputClassName: PropTypes.string,\n            visibilityIcon: PropTypes.oneOfType([\n                PropTypes.node,\n                PropTypes.shape({\n                    visible: PropTypes.node,\n                    invisible: PropTypes.node,\n                }),\n            ]),\n            visibilityStyle: PropTypes.object,\n            visibilityClassName: PropTypes.string,\n            visibilityLabel: PropTypes.string,\n            disableVisibility: PropTypes.bool,\n            onVisibilityClick: PropTypes.func,\n            getVisibilityIcon: PropTypes.func,\n        };\n    }\n    catch (e) { }\n}\nexport default Password;\n//# sourceMappingURL=Password.js.map"]},"metadata":{},"sourceType":"module"}