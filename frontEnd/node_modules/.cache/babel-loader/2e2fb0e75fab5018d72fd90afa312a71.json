{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { useFixedPositioning } from \"@react-md/transition\";\nimport { MovementPresets, scrollIntoView, useActiveDescendantMovement, useCloseOnOutsideClick, useEnsuredRef, useIsUserInteractionMode, useToggle } from \"@react-md/utils\";\nimport { getFilterFunction } from \"./utils\";\n/**\n * This hook handles all the autocomplete's \"logic\" and behavior.\n *\n * @private\n */\n\nexport default function useAutoComplete(_a) {\n  var _b;\n\n  var suggestionsId = _a.suggestionsId,\n      data = _a.data,\n      propValue = _a.propValue,\n      _c = _a.defaultValue,\n      defaultValue = _c === void 0 ? \"\" : _c,\n      filterFn = _a.filter,\n      filterOptions = _a.filterOptions,\n      filterOnNoValue = _a.filterOnNoValue,\n      valueKey = _a.valueKey,\n      getResultId = _a.getResultId,\n      getResultValue = _a.getResultValue,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      onClick = _a.onClick,\n      onChange = _a.onChange,\n      onKeyDown = _a.onKeyDown,\n      forwardedRef = _a.forwardedRef,\n      onAutoComplete = _a.onAutoComplete,\n      clearOnAutoComplete = _a.clearOnAutoComplete,\n      anchor = _a.anchor,\n      xMargin = _a.xMargin,\n      yMargin = _a.yMargin,\n      vwMargin = _a.vwMargin,\n      vhMargin = _a.vhMargin,\n      transformOrigin = _a.transformOrigin,\n      listboxWidth = _a.listboxWidth,\n      listboxStyle = _a.listboxStyle,\n      preventOverlap = _a.preventOverlap,\n      disableSwapping = _a.disableSwapping,\n      disableVHBounds = _a.disableVHBounds,\n      closeOnResize = _a.closeOnResize,\n      closeOnScroll = _a.closeOnScroll,\n      propDisableShowOnFocus = _a.disableShowOnFocus,\n      isListAutocomplete = _a.isListAutocomplete,\n      isInlineAutocomplete = _a.isInlineAutocomplete;\n\n  var _d = useEnsuredRef(forwardedRef),\n      ref = _d[0],\n      refHandler = _d[1];\n\n  var filter = getFilterFunction(filterFn);\n\n  var _e = useState(function () {\n    var _a;\n\n    var options = __assign(__assign({}, filterOptions), {\n      valueKey: valueKey,\n      getItemValue: getResultValue,\n      startsWith: (_a = filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.startsWith) !== null && _a !== void 0 ? _a : isInlineAutocomplete\n    });\n\n    var value = propValue !== null && propValue !== void 0 ? propValue : defaultValue;\n    var filteredData = filterOnNoValue || value ? filter(value, data, options) : data;\n    var match = value;\n\n    if (isInlineAutocomplete && filteredData.length) {\n      match = getResultValue(filteredData[0], valueKey);\n    }\n\n    return {\n      value: value,\n      match: match,\n      filteredData: filteredData\n    };\n  }),\n      _f = _e[0],\n      stateValue = _f.value,\n      match = _f.match,\n      stateFilteredData = _f.filteredData,\n      setState = _e[1];\n\n  var filteredData = filterFn === \"none\" ? data : stateFilteredData;\n  var startsWith = (_b = filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.startsWith) !== null && _b !== void 0 ? _b : isInlineAutocomplete;\n  var value = propValue !== null && propValue !== void 0 ? propValue : stateValue;\n  var setValue = useCallback(function (nextValue) {\n    var isBackspace = value.length > nextValue.length || !!match && value.length === nextValue.length;\n    var filtered = data;\n\n    if (nextValue || filterOnNoValue) {\n      var options = __assign(__assign({}, filterOptions), {\n        valueKey: valueKey,\n        getItemValue: getResultValue,\n        startsWith: startsWith\n      });\n\n      filtered = filter(nextValue, data, options);\n    }\n\n    var nextMatch = nextValue;\n\n    if (isInlineAutocomplete && filtered.length && !isBackspace) {\n      nextMatch = getResultValue(filtered[0], valueKey);\n      var input = ref.current;\n\n      if (input && !isBackspace) {\n        input.value = nextMatch;\n        input.setSelectionRange(nextValue.length, nextMatch.length);\n      }\n    }\n\n    setState({\n      value: nextValue,\n      match: nextMatch,\n      filteredData: filtered\n    });\n  }, [ref, data, filter, filterOnNoValue, filterOptions, isInlineAutocomplete, getResultValue, value, match, startsWith, valueKey]); // this is really just a hacky way to make sure that once a value has been\n  // autocompleted, the menu doesn't immediately re-appear due to the hook below\n  // for showing when the value/ filtered data list change\n\n  var autocompleted = useRef(false);\n  var handleChange = useCallback(function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n\n    autocompleted.current = false;\n    setValue(event.currentTarget.value);\n  }, [setValue, onChange]);\n\n  var _g = useToggle(false),\n      visible = _g[0],\n      show = _g[1],\n      hide = _g[2];\n\n  var isTouch = useIsUserInteractionMode(\"touch\");\n  var disableShowOnFocus = propDisableShowOnFocus !== null && propDisableShowOnFocus !== void 0 ? propDisableShowOnFocus : isTouch;\n  var focused = useRef(false);\n  var handleBlur = useCallback(function (event) {\n    if (onBlur) {\n      onBlur(event);\n    }\n\n    focused.current = false;\n  }, [onBlur]);\n  var handleFocus = useCallback(function (event) {\n    if (onFocus) {\n      onFocus(event);\n    }\n\n    if (disableShowOnFocus) {\n      return;\n    }\n\n    focused.current = true;\n\n    if (isListAutocomplete && filteredData.length) {\n      show();\n    }\n  }, [filteredData, isListAutocomplete, onFocus, show, disableShowOnFocus]);\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      onClick(event);\n    } // since click events also trigger focus events right beforehand, want to\n    // skip the first click handler and require a second click to show it.\n    // this is why the focused.current isn't set onFocus for\n    // disableShowOnFocus\n\n\n    if (disableShowOnFocus && !focused.current) {\n      focused.current = true;\n      return;\n    }\n\n    if (isListAutocomplete && filteredData.length) {\n      show();\n    }\n  }, [disableShowOnFocus, filteredData.length, isListAutocomplete, onClick, show]);\n  var handleAutoComplete = useCallback(function (index) {\n    var result = filteredData[index];\n    var resultValue = getResultValue(result, valueKey);\n\n    if (onAutoComplete) {\n      onAutoComplete({\n        value: resultValue,\n        index: index,\n        result: result,\n        dataIndex: data.findIndex(function (datum) {\n          return getResultValue(datum, valueKey) === resultValue;\n        }),\n        filteredData: filteredData\n      });\n    }\n\n    setValue(clearOnAutoComplete ? \"\" : resultValue);\n    autocompleted.current = true;\n  }, [clearOnAutoComplete, data, filteredData, getResultValue, onAutoComplete, valueKey, setValue]);\n  var listboxRef = useRef(null);\n\n  var _h = useActiveDescendantMovement(__assign(__assign({}, MovementPresets.VERTICAL_COMBOBOX), {\n    getId: getResultId,\n    items: filteredData,\n    baseId: suggestionsId,\n    onChange: function (_a, itemRefs) {\n      var index = _a.index,\n          items = _a.items,\n          target = _a.target; // the default scroll into view behavior for aria-activedescendant\n      // movement won't work here since the \"target\" element will actually be\n      // the input element instead of the listbox. So need to implement the\n      // scroll into view behavior manually from the listbox instead.\n\n      var item = itemRefs[index] && itemRefs[index].current;\n      var listbox = listboxRef.current;\n\n      if (item && listbox && listbox.scrollHeight > listbox.offsetHeight) {\n        scrollIntoView(listbox, item);\n      }\n\n      if (!isInlineAutocomplete) {\n        return;\n      }\n\n      var nextMatch = getResultValue(items[index], valueKey);\n      target.value = nextMatch;\n      target.setSelectionRange(0, nextMatch.length);\n      setState(function (prevState) {\n        return __assign(__assign({}, prevState), {\n          value: nextMatch,\n          match: nextMatch\n        });\n      });\n    },\n    onKeyDown: function (event) {\n      if (onKeyDown) {\n        onKeyDown(event);\n      }\n\n      var input = event.currentTarget;\n\n      switch (event.key) {\n        case \"ArrowDown\":\n          if (isListAutocomplete && event.altKey && !visible && filteredData.length) {\n            // don't want the cursor to move if there is text\n            event.preventDefault();\n            event.stopPropagation();\n            show();\n            setFocusedIndex(-1);\n          }\n\n          break;\n\n        case \"ArrowUp\":\n          if (isListAutocomplete && event.altKey && visible) {\n            // don't want the cursor to move if there is text\n            event.preventDefault();\n            event.stopPropagation();\n            hide();\n          }\n\n          break;\n\n        case \"Tab\":\n          event.stopPropagation();\n          hide();\n          break;\n\n        case \"ArrowRight\":\n          if (isInlineAutocomplete && input.selectionStart !== input.selectionEnd) {\n            var index = focusedIndex !== -1 ? focusedIndex : 0;\n            hide();\n            handleAutoComplete(index);\n          }\n\n          break;\n\n        case \"Enter\":\n          if (visible && focusedIndex >= 0) {\n            event.stopPropagation();\n            handleAutoComplete(focusedIndex);\n            hide();\n          }\n\n          break;\n\n        case \"Escape\":\n          if (visible) {\n            event.stopPropagation();\n            hide();\n          } else if (value) {\n            event.stopPropagation();\n            setValue(\"\");\n          }\n\n          break;\n        // no default\n      }\n    }\n  })),\n      activeId = _h.activeId,\n      itemRefs = _h.itemRefs,\n      handleKeyDown = _h.onKeyDown,\n      focusedIndex = _h.focusedIndex,\n      setFocusedIndex = _h.setFocusedIndex;\n\n  useCloseOnOutsideClick({\n    enabled: visible,\n    element: ref.current,\n    onOutsideClick: hide\n  });\n\n  var _j = useFixedPositioning({\n    fixedTo: function () {\n      return ref.current;\n    },\n    anchor: anchor,\n    onScroll: function (_event, _a) {\n      var visible = _a.visible;\n\n      if (closeOnScroll || !visible) {\n        hide();\n      }\n    },\n    onResize: closeOnResize ? hide : undefined,\n    width: listboxWidth,\n    xMargin: xMargin,\n    yMargin: yMargin,\n    vwMargin: vwMargin,\n    vhMargin: vhMargin,\n    transformOrigin: transformOrigin,\n    preventOverlap: preventOverlap,\n    disableSwapping: disableSwapping,\n    disableVHBounds: disableVHBounds\n  }),\n      style = _j.style,\n      onEnter = _j.onEnter,\n      onEntering = _j.onEntering,\n      onEntered = _j.onEntered,\n      onExited = _j.onExited,\n      updateStyle = _j.updateStyle;\n\n  useEffect(function () {\n    if (!focused.current || autocompleted.current) {\n      return;\n    }\n\n    if (filteredData.length && !visible && value.length && isListAutocomplete) {\n      show();\n    } else if (!filteredData.length && visible) {\n      hide();\n    } // this effect is just for toggling the visibility states as needed if the\n    // value or filter data list changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [filteredData, value]);\n  useEffect(function () {\n    if (!visible) {\n      setFocusedIndex(-1);\n      return;\n    }\n\n    updateStyle(); // only want to trigger on data changes and setFocusedIndex shouldn't change\n    // anyways\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [visible, filteredData]);\n  return {\n    ref: refHandler,\n    value: value,\n    match: match,\n    visible: visible,\n    activeId: activeId,\n    itemRefs: itemRefs,\n    filteredData: filteredData,\n    fixedStyle: __assign(__assign({}, style), listboxStyle),\n    transitionHooks: {\n      onEnter: onEnter,\n      onEntering: onEntering,\n      onEntered: onEntered,\n      onExited: onExited\n    },\n    listboxRef: listboxRef,\n    handleBlur: handleBlur,\n    handleFocus: handleFocus,\n    handleClick: handleClick,\n    handleChange: handleChange,\n    handleKeyDown: handleKeyDown,\n    handleAutoComplete: handleAutoComplete\n  };\n}","map":{"version":3,"sources":["../src/useAutoComplete.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useCallback, useEffect, useRef, useState, } from \"react\";\nimport { useFixedPositioning } from \"@react-md/transition\";\nimport { MovementPresets, scrollIntoView, useActiveDescendantMovement, useCloseOnOutsideClick, useEnsuredRef, useIsUserInteractionMode, useToggle, } from \"@react-md/utils\";\nimport { getFilterFunction } from \"./utils\";\n/**\n * This hook handles all the autocomplete's \"logic\" and behavior.\n *\n * @private\n */\nexport default function useAutoComplete(_a) {\n    var _b;\n    var suggestionsId = _a.suggestionsId, data = _a.data, propValue = _a.propValue, _c = _a.defaultValue, defaultValue = _c === void 0 ? \"\" : _c, filterFn = _a.filter, filterOptions = _a.filterOptions, filterOnNoValue = _a.filterOnNoValue, valueKey = _a.valueKey, getResultId = _a.getResultId, getResultValue = _a.getResultValue, onBlur = _a.onBlur, onFocus = _a.onFocus, onClick = _a.onClick, onChange = _a.onChange, onKeyDown = _a.onKeyDown, forwardedRef = _a.forwardedRef, onAutoComplete = _a.onAutoComplete, clearOnAutoComplete = _a.clearOnAutoComplete, anchor = _a.anchor, xMargin = _a.xMargin, yMargin = _a.yMargin, vwMargin = _a.vwMargin, vhMargin = _a.vhMargin, transformOrigin = _a.transformOrigin, listboxWidth = _a.listboxWidth, listboxStyle = _a.listboxStyle, preventOverlap = _a.preventOverlap, disableSwapping = _a.disableSwapping, disableVHBounds = _a.disableVHBounds, closeOnResize = _a.closeOnResize, closeOnScroll = _a.closeOnScroll, propDisableShowOnFocus = _a.disableShowOnFocus, isListAutocomplete = _a.isListAutocomplete, isInlineAutocomplete = _a.isInlineAutocomplete;\n    var _d = useEnsuredRef(forwardedRef), ref = _d[0], refHandler = _d[1];\n    var filter = getFilterFunction(filterFn);\n    var _e = useState(function () {\n        var _a;\n        var options = __assign(__assign({}, filterOptions), { valueKey: valueKey, getItemValue: getResultValue, startsWith: (_a = filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.startsWith) !== null && _a !== void 0 ? _a : isInlineAutocomplete });\n        var value = propValue !== null && propValue !== void 0 ? propValue : defaultValue;\n        var filteredData = filterOnNoValue || value ? filter(value, data, options) : data;\n        var match = value;\n        if (isInlineAutocomplete && filteredData.length) {\n            match = getResultValue(filteredData[0], valueKey);\n        }\n        return {\n            value: value,\n            match: match,\n            filteredData: filteredData,\n        };\n    }), _f = _e[0], stateValue = _f.value, match = _f.match, stateFilteredData = _f.filteredData, setState = _e[1];\n    var filteredData = filterFn === \"none\" ? data : stateFilteredData;\n    var startsWith = (_b = filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.startsWith) !== null && _b !== void 0 ? _b : isInlineAutocomplete;\n    var value = propValue !== null && propValue !== void 0 ? propValue : stateValue;\n    var setValue = useCallback(function (nextValue) {\n        var isBackspace = value.length > nextValue.length ||\n            (!!match && value.length === nextValue.length);\n        var filtered = data;\n        if (nextValue || filterOnNoValue) {\n            var options = __assign(__assign({}, filterOptions), { valueKey: valueKey, getItemValue: getResultValue, startsWith: startsWith });\n            filtered = filter(nextValue, data, options);\n        }\n        var nextMatch = nextValue;\n        if (isInlineAutocomplete && filtered.length && !isBackspace) {\n            nextMatch = getResultValue(filtered[0], valueKey);\n            var input = ref.current;\n            if (input && !isBackspace) {\n                input.value = nextMatch;\n                input.setSelectionRange(nextValue.length, nextMatch.length);\n            }\n        }\n        setState({ value: nextValue, match: nextMatch, filteredData: filtered });\n    }, [\n        ref,\n        data,\n        filter,\n        filterOnNoValue,\n        filterOptions,\n        isInlineAutocomplete,\n        getResultValue,\n        value,\n        match,\n        startsWith,\n        valueKey,\n    ]);\n    // this is really just a hacky way to make sure that once a value has been\n    // autocompleted, the menu doesn't immediately re-appear due to the hook below\n    // for showing when the value/ filtered data list change\n    var autocompleted = useRef(false);\n    var handleChange = useCallback(function (event) {\n        if (onChange) {\n            onChange(event);\n        }\n        autocompleted.current = false;\n        setValue(event.currentTarget.value);\n    }, [setValue, onChange]);\n    var _g = useToggle(false), visible = _g[0], show = _g[1], hide = _g[2];\n    var isTouch = useIsUserInteractionMode(\"touch\");\n    var disableShowOnFocus = propDisableShowOnFocus !== null && propDisableShowOnFocus !== void 0 ? propDisableShowOnFocus : isTouch;\n    var focused = useRef(false);\n    var handleBlur = useCallback(function (event) {\n        if (onBlur) {\n            onBlur(event);\n        }\n        focused.current = false;\n    }, [onBlur]);\n    var handleFocus = useCallback(function (event) {\n        if (onFocus) {\n            onFocus(event);\n        }\n        if (disableShowOnFocus) {\n            return;\n        }\n        focused.current = true;\n        if (isListAutocomplete && filteredData.length) {\n            show();\n        }\n    }, [filteredData, isListAutocomplete, onFocus, show, disableShowOnFocus]);\n    var handleClick = useCallback(function (event) {\n        if (onClick) {\n            onClick(event);\n        }\n        // since click events also trigger focus events right beforehand, want to\n        // skip the first click handler and require a second click to show it.\n        // this is why the focused.current isn't set onFocus for\n        // disableShowOnFocus\n        if (disableShowOnFocus && !focused.current) {\n            focused.current = true;\n            return;\n        }\n        if (isListAutocomplete && filteredData.length) {\n            show();\n        }\n    }, [disableShowOnFocus, filteredData.length, isListAutocomplete, onClick, show]);\n    var handleAutoComplete = useCallback(function (index) {\n        var result = filteredData[index];\n        var resultValue = getResultValue(result, valueKey);\n        if (onAutoComplete) {\n            onAutoComplete({\n                value: resultValue,\n                index: index,\n                result: result,\n                dataIndex: data.findIndex(function (datum) { return getResultValue(datum, valueKey) === resultValue; }),\n                filteredData: filteredData,\n            });\n        }\n        setValue(clearOnAutoComplete ? \"\" : resultValue);\n        autocompleted.current = true;\n    }, [\n        clearOnAutoComplete,\n        data,\n        filteredData,\n        getResultValue,\n        onAutoComplete,\n        valueKey,\n        setValue,\n    ]);\n    var listboxRef = useRef(null);\n    var _h = useActiveDescendantMovement(__assign(__assign({}, MovementPresets.VERTICAL_COMBOBOX), { getId: getResultId, items: filteredData, baseId: suggestionsId, onChange: function (_a, itemRefs) {\n            var index = _a.index, items = _a.items, target = _a.target;\n            // the default scroll into view behavior for aria-activedescendant\n            // movement won't work here since the \"target\" element will actually be\n            // the input element instead of the listbox. So need to implement the\n            // scroll into view behavior manually from the listbox instead.\n            var item = itemRefs[index] && itemRefs[index].current;\n            var listbox = listboxRef.current;\n            if (item && listbox && listbox.scrollHeight > listbox.offsetHeight) {\n                scrollIntoView(listbox, item);\n            }\n            if (!isInlineAutocomplete) {\n                return;\n            }\n            var nextMatch = getResultValue(items[index], valueKey);\n            target.value = nextMatch;\n            target.setSelectionRange(0, nextMatch.length);\n            setState(function (prevState) { return (__assign(__assign({}, prevState), { value: nextMatch, match: nextMatch })); });\n        },\n        onKeyDown: function (event) {\n            if (onKeyDown) {\n                onKeyDown(event);\n            }\n            var input = event.currentTarget;\n            switch (event.key) {\n                case \"ArrowDown\":\n                    if (isListAutocomplete &&\n                        event.altKey &&\n                        !visible &&\n                        filteredData.length) {\n                        // don't want the cursor to move if there is text\n                        event.preventDefault();\n                        event.stopPropagation();\n                        show();\n                        setFocusedIndex(-1);\n                    }\n                    break;\n                case \"ArrowUp\":\n                    if (isListAutocomplete && event.altKey && visible) {\n                        // don't want the cursor to move if there is text\n                        event.preventDefault();\n                        event.stopPropagation();\n                        hide();\n                    }\n                    break;\n                case \"Tab\":\n                    event.stopPropagation();\n                    hide();\n                    break;\n                case \"ArrowRight\":\n                    if (isInlineAutocomplete &&\n                        input.selectionStart !== input.selectionEnd) {\n                        var index = focusedIndex !== -1 ? focusedIndex : 0;\n                        hide();\n                        handleAutoComplete(index);\n                    }\n                    break;\n                case \"Enter\":\n                    if (visible && focusedIndex >= 0) {\n                        event.stopPropagation();\n                        handleAutoComplete(focusedIndex);\n                        hide();\n                    }\n                    break;\n                case \"Escape\":\n                    if (visible) {\n                        event.stopPropagation();\n                        hide();\n                    }\n                    else if (value) {\n                        event.stopPropagation();\n                        setValue(\"\");\n                    }\n                    break;\n                // no default\n            }\n        } })), activeId = _h.activeId, itemRefs = _h.itemRefs, handleKeyDown = _h.onKeyDown, focusedIndex = _h.focusedIndex, setFocusedIndex = _h.setFocusedIndex;\n    useCloseOnOutsideClick({\n        enabled: visible,\n        element: ref.current,\n        onOutsideClick: hide,\n    });\n    var _j = useFixedPositioning({\n        fixedTo: function () { return ref.current; },\n        anchor: anchor,\n        onScroll: function (_event, _a) {\n            var visible = _a.visible;\n            if (closeOnScroll || !visible) {\n                hide();\n            }\n        },\n        onResize: closeOnResize ? hide : undefined,\n        width: listboxWidth,\n        xMargin: xMargin,\n        yMargin: yMargin,\n        vwMargin: vwMargin,\n        vhMargin: vhMargin,\n        transformOrigin: transformOrigin,\n        preventOverlap: preventOverlap,\n        disableSwapping: disableSwapping,\n        disableVHBounds: disableVHBounds,\n    }), style = _j.style, onEnter = _j.onEnter, onEntering = _j.onEntering, onEntered = _j.onEntered, onExited = _j.onExited, updateStyle = _j.updateStyle;\n    useEffect(function () {\n        if (!focused.current || autocompleted.current) {\n            return;\n        }\n        if (filteredData.length && !visible && value.length && isListAutocomplete) {\n            show();\n        }\n        else if (!filteredData.length && visible) {\n            hide();\n        }\n        // this effect is just for toggling the visibility states as needed if the\n        // value or filter data list changes\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [filteredData, value]);\n    useEffect(function () {\n        if (!visible) {\n            setFocusedIndex(-1);\n            return;\n        }\n        updateStyle();\n        // only want to trigger on data changes and setFocusedIndex shouldn't change\n        // anyways\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [visible, filteredData]);\n    return {\n        ref: refHandler,\n        value: value,\n        match: match,\n        visible: visible,\n        activeId: activeId,\n        itemRefs: itemRefs,\n        filteredData: filteredData,\n        fixedStyle: __assign(__assign({}, style), listboxStyle),\n        transitionHooks: {\n            onEnter: onEnter,\n            onEntering: onEntering,\n            onEntered: onEntered,\n            onExited: onExited,\n        },\n        listboxRef: listboxRef,\n        handleBlur: handleBlur,\n        handleFocus: handleFocus,\n        handleClick: handleClick,\n        handleChange: handleChange,\n        handleKeyDown: handleKeyDown,\n        handleAutoComplete: handleAutoComplete,\n    };\n}\n//# sourceMappingURL=useAutoComplete.js.map"]},"metadata":{},"sourceType":"module"}