{"ast":null,"code":"import { createContext, useCallback, useContext, useState } from \"react\";\nimport { useRefCache, useTimeout } from \"@react-md/utils\";\nimport { DEFAULT_TOOLTIP_DELAY } from \"./constants\";\n/**\n * This is a private hook that is used to cache and update the tooltip delay\n * context state when needed.\n *\n * @param defaultDelay The default delay to use for all tooltips\n * @return the tooltip delay state\n */\n\nexport function useTooltipHoverModeState(defaultDelay, delayTimeout) {\n  var _a = useState(defaultDelay),\n      delay = _a[0],\n      setDelay = _a[1];\n\n  var delayRef = useRefCache(delay);\n  var disable = useCallback(function () {\n    if (delayRef.current === 0) {\n      setDelay(defaultDelay);\n    } // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [defaultDelay]);\n\n  var _b = useTimeout(disable, delayTimeout),\n      start = _b[0],\n      stop = _b[1];\n\n  var enable = useCallback(function () {\n    stop();\n\n    if (delayRef.current !== 0) {\n      setDelay(0);\n    } // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [stop]);\n  return {\n    delay: delay,\n    enable: enable,\n    startDisableTimer: start\n  };\n}\n/**\n * This keeps track of the current \"immediate\" delay to use for all child\n * tooltip components.  When the `enable` function is called, this is updated to\n * be `0` so tooltips can appear immediately on hover.\n */\n\nexport var HoverModeDelay = createContext(DEFAULT_TOOLTIP_DELAY);\n/**\n * Contains the actions to enable or start disabling the immediate mode for\n * tooltips.\n */\n\nexport var HoverModeActions = createContext({\n  enable: function () {},\n  startDisableTimer: function () {}\n});\n/**\n * Keeps track of if the immediate mode is enabled. This allows for easy\n * configuration of the app by automatically enabling hover mode functionality\n * if the `ImmediateTooltipConfig` is in your app.\n */\n\nexport var HoverModeEnabled = createContext(false);\n/**\n * This hook returns the current delay timeout. This probably shouldn't be used\n * much outside of this package.\n * @private\n */\n\nexport function useTooltipHoverModeDelay() {\n  return useContext(HoverModeDelay);\n}\n/**\n * This hook returns the actions to enable the hover mode as well as start a\n * timer to disable it.\n * @private\n */\n\nexport function useTooltipHoverModeActions() {\n  return useContext(HoverModeActions);\n}\n/**\n * @private\n */\n\nexport function useTooltipHoverModeEnabled() {\n  return useContext(HoverModeEnabled);\n}","map":{"version":3,"sources":["../src/useTooltipHoverMode.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,WAAxB,EAAqC,UAArC,EAAiD,QAAjD,QAAiE,OAAjE;AACA,SAAS,WAAT,EAAsB,UAAtB,QAAwC,iBAAxC;AAEA,SAAS,qBAAT,QAAsC,aAAtC;AAwBA;;;;;;;;AAOA,OAAM,SAAU,wBAAV,CACJ,YADI,EAEJ,YAFI,EAEgB;AAEd,MAAA,EAAA,GAAoB,QAAQ,CAAC,YAAD,CAA5B;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAhB;;AACN,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAD,CAA5B;AAEA,MAAM,OAAO,GAAG,WAAW,CAAC,YAAA;AAC1B,QAAI,QAAQ,CAAC,OAAT,KAAqB,CAAzB,EAA4B;AAC1B,MAAA,QAAQ,CAAC,YAAD,CAAR;AACD,KAHyB,CAI1B;AACA;;AACD,GAN0B,EAMxB,CAAC,YAAD,CANwB,CAA3B;;AAQM,MAAA,EAAA,GAAgB,UAAU,CAAC,OAAD,EAAU,YAAV,CAA1B;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,IAAI,GAAA,EAAA,CAAA,CAAA,CAAZ;;AACN,MAAM,MAAM,GAAG,WAAW,CAAC,YAAA;AACzB,IAAA,IAAI;;AACJ,QAAI,QAAQ,CAAC,OAAT,KAAqB,CAAzB,EAA4B;AAC1B,MAAA,QAAQ,CAAC,CAAD,CAAR;AACD,KAJwB,CAKzB;AACA;;AACD,GAPyB,EAOvB,CAAC,IAAD,CAPuB,CAA1B;AASA,SAAO;AACL,IAAA,KAAK,EAAA,KADA;AAEL,IAAA,MAAM,EAAA,MAFD;AAGL,IAAA,iBAAiB,EAAE;AAHd,GAAP;AAKD;AAED;;;;;;AAKA,OAAO,IAAM,cAAc,GAAG,aAAa,CAAC,qBAAD,CAApC;AAOP;;;;;AAIA,OAAO,IAAM,gBAAgB,GAAG,aAAa,CAA0B;AACrE,EAAA,MAAM,EAAE,YAAA,CAAQ,CADqD;AAErE,EAAA,iBAAiB,EAAE,YAAA,CAAQ;AAF0C,CAA1B,CAAtC;AAKP;;;;;;AAKA,OAAO,IAAM,gBAAgB,GAAG,aAAa,CAAC,KAAD,CAAtC;AAEP;;;;;;AAKA,OAAM,SAAU,wBAAV,GAAkC;AACtC,SAAO,UAAU,CAAC,cAAD,CAAjB;AACD;AAED;;;;;;AAKA,OAAM,SAAU,0BAAV,GAAoC;AACxC,SAAO,UAAU,CAAC,gBAAD,CAAjB;AACD;AAED;;;;AAGA,OAAM,SAAU,0BAAV,GAAoC;AACxC,SAAO,UAAU,CAAC,gBAAD,CAAjB;AACD","sourceRoot":"","sourcesContent":["import { createContext, useCallback, useContext, useState } from \"react\";\nimport { useRefCache, useTimeout } from \"@react-md/utils\";\nimport { DEFAULT_TOOLTIP_DELAY } from \"./constants\";\n/**\n * This is a private hook that is used to cache and update the tooltip delay\n * context state when needed.\n *\n * @param defaultDelay The default delay to use for all tooltips\n * @return the tooltip delay state\n */\nexport function useTooltipHoverModeState(defaultDelay, delayTimeout) {\n    var _a = useState(defaultDelay), delay = _a[0], setDelay = _a[1];\n    var delayRef = useRefCache(delay);\n    var disable = useCallback(function () {\n        if (delayRef.current === 0) {\n            setDelay(defaultDelay);\n        }\n        // disabled since useRefCache\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [defaultDelay]);\n    var _b = useTimeout(disable, delayTimeout), start = _b[0], stop = _b[1];\n    var enable = useCallback(function () {\n        stop();\n        if (delayRef.current !== 0) {\n            setDelay(0);\n        }\n        // disabled since useRefCache\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [stop]);\n    return {\n        delay: delay,\n        enable: enable,\n        startDisableTimer: start,\n    };\n}\n/**\n * This keeps track of the current \"immediate\" delay to use for all child\n * tooltip components.  When the `enable` function is called, this is updated to\n * be `0` so tooltips can appear immediately on hover.\n */\nexport var HoverModeDelay = createContext(DEFAULT_TOOLTIP_DELAY);\n/**\n * Contains the actions to enable or start disabling the immediate mode for\n * tooltips.\n */\nexport var HoverModeActions = createContext({\n    enable: function () { },\n    startDisableTimer: function () { },\n});\n/**\n * Keeps track of if the immediate mode is enabled. This allows for easy\n * configuration of the app by automatically enabling hover mode functionality\n * if the `ImmediateTooltipConfig` is in your app.\n */\nexport var HoverModeEnabled = createContext(false);\n/**\n * This hook returns the current delay timeout. This probably shouldn't be used\n * much outside of this package.\n * @private\n */\nexport function useTooltipHoverModeDelay() {\n    return useContext(HoverModeDelay);\n}\n/**\n * This hook returns the actions to enable the hover mode as well as start a\n * timer to disable it.\n * @private\n */\nexport function useTooltipHoverModeActions() {\n    return useContext(HoverModeActions);\n}\n/**\n * @private\n */\nexport function useTooltipHoverModeEnabled() {\n    return useContext(HoverModeEnabled);\n}\n//# sourceMappingURL=useTooltipHoverMode.js.map"]},"metadata":{},"sourceType":"module"}