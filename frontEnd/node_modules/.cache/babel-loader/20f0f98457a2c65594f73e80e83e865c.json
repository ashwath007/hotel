{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, cloneElement, isValidElement } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-chip\");\n/**\n * A chip is a simplified and condensed button component that be used to create\n * compact radio groups, checkboxes, and trigger actions. The chip only has a\n * `\"solid\"` and `\"outline\"` theme but can be raisable once clicked or\n * selectable with an inline icon. A chip also supports rendering icons, avatars,\n * or circular progress bars to the left and right of the children.\n */\n\nvar Chip = forwardRef(function Chip(_a, ref) {\n  var _b;\n\n  var ariaPressed = _a[\"aria-pressed\"],\n      propClassName = _a.className,\n      children = _a.children,\n      _c = _a.theme,\n      theme = _c === void 0 ? \"solid\" : _c,\n      propLeftIcon = _a.leftIcon,\n      rightIcon = _a.rightIcon,\n      _d = _a.raisable,\n      raisable = _d === void 0 ? false : _d,\n      _e = _a.disabled,\n      disabled = _e === void 0 ? false : _e,\n      selected = _a.selected,\n      _f = _a.selectedThemed,\n      selectedThemed = _f === void 0 ? false : _f,\n      contentStyle = _a.contentStyle,\n      contentClassName = _a.contentClassName,\n      _g = _a.disableContentWrap,\n      disableContentWrap = _g === void 0 ? false : _g,\n      propSelectedIcon = _a.selectedIcon,\n      _h = _a.disableIconTransition,\n      disableIconTransition = _h === void 0 ? false : _h,\n      props = __rest(_a, [\"aria-pressed\", \"className\", \"children\", \"theme\", \"leftIcon\", \"rightIcon\", \"raisable\", \"disabled\", \"selected\", \"selectedThemed\", \"contentStyle\", \"contentClassName\", \"disableContentWrap\", \"selectedIcon\", \"disableIconTransition\"]);\n\n  var _j = useInteractionStates({\n    handlers: props,\n    className: propClassName,\n    disabled: disabled,\n    enablePressedAndRipple: raisable\n  }),\n      ripples = _j.ripples,\n      className = _j.className,\n      handlers = _j.handlers;\n\n  var content = children;\n\n  if (!disableContentWrap) {\n    content = React.createElement(\"span\", {\n      style: contentStyle,\n      className: cn(block(\"content\"), contentClassName)\n    }, children);\n  }\n\n  var leftIcon = propLeftIcon;\n  var selectable = typeof selected === \"boolean\";\n  var selectedIcon = useIcon(\"selected\", propSelectedIcon);\n  var isHiddenIcon = false;\n\n  if (selectable && !selectedThemed && typeof leftIcon === \"undefined\" && selectedIcon) {\n    leftIcon = selectedIcon;\n\n    if (!disableIconTransition && isValidElement(selectedIcon)) {\n      isHiddenIcon = !selected;\n      leftIcon = cloneElement(selectedIcon, {\n        className: block(\"selected-icon\", {\n          visible: selected\n        })\n      });\n    } else if (disableIconTransition && !selected) {\n      // don't want to render it when not selected if there's no transition\n      leftIcon = null;\n    }\n  }\n\n  var leading = leftIcon && !isHiddenIcon;\n  var trailing = rightIcon;\n  return React.createElement(\"button\", __assign({}, props, handlers, {\n    ref: ref,\n    \"aria-pressed\": ariaPressed !== null && ariaPressed !== void 0 ? ariaPressed : !!selected || undefined,\n    type: \"button\",\n    className: cn(block((_b = {}, _b[theme] = true, _b.disabled = disabled, _b.selected = !disabled && selected && !selectedThemed, _b.themed = !disabled && selected && selectedThemed, _b[\"solid-disabled\"] = disabled && theme === \"solid\", _b[\"leading-icon\"] = leading && !trailing, _b[\"trailing-icon\"] = trailing && !leading, _b.surrounded = leading && trailing, _b)), className),\n    disabled: disabled\n  }), React.createElement(TextIconSpacing, {\n    icon: leftIcon,\n    beforeClassName: isHiddenIcon ? \"\" : undefined\n  }, React.createElement(TextIconSpacing, {\n    icon: rightIcon,\n    iconAfter: true\n  }, content)), ripples);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    Chip.propTypes = {\n      \"aria-pressed\": PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf([\"true\", \"false\"])]),\n      className: PropTypes.string,\n      theme: PropTypes.oneOf([\"outline\", \"solid\"]),\n      disabled: PropTypes.bool,\n      leftIcon: PropTypes.node,\n      rightIcon: PropTypes.node,\n      raisable: PropTypes.bool,\n      contentStyle: PropTypes.object,\n      contentClassName: PropTypes.string,\n      disableContentWrap: PropTypes.bool,\n      selected: PropTypes.bool,\n      selectedThemed: PropTypes.bool,\n      children: PropTypes.node,\n      selectedIcon: PropTypes.node,\n      disableIconTransition: PropTypes.bool\n    };\n  } catch (e) {}\n}\n\nexport default Chip;","map":{"version":3,"sources":["../src/Chip.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, cloneElement, isValidElement, } from \"react\";\nimport cn from \"classnames\";\nimport { TextIconSpacing, useIcon } from \"@react-md/icon\";\nimport { useInteractionStates } from \"@react-md/states\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-chip\");\n/**\n * A chip is a simplified and condensed button component that be used to create\n * compact radio groups, checkboxes, and trigger actions. The chip only has a\n * `\"solid\"` and `\"outline\"` theme but can be raisable once clicked or\n * selectable with an inline icon. A chip also supports rendering icons, avatars,\n * or circular progress bars to the left and right of the children.\n */\nvar Chip = forwardRef(function Chip(_a, ref) {\n    var _b;\n    var ariaPressed = _a[\"aria-pressed\"], propClassName = _a.className, children = _a.children, _c = _a.theme, theme = _c === void 0 ? \"solid\" : _c, propLeftIcon = _a.leftIcon, rightIcon = _a.rightIcon, _d = _a.raisable, raisable = _d === void 0 ? false : _d, _e = _a.disabled, disabled = _e === void 0 ? false : _e, selected = _a.selected, _f = _a.selectedThemed, selectedThemed = _f === void 0 ? false : _f, contentStyle = _a.contentStyle, contentClassName = _a.contentClassName, _g = _a.disableContentWrap, disableContentWrap = _g === void 0 ? false : _g, propSelectedIcon = _a.selectedIcon, _h = _a.disableIconTransition, disableIconTransition = _h === void 0 ? false : _h, props = __rest(_a, [\"aria-pressed\", \"className\", \"children\", \"theme\", \"leftIcon\", \"rightIcon\", \"raisable\", \"disabled\", \"selected\", \"selectedThemed\", \"contentStyle\", \"contentClassName\", \"disableContentWrap\", \"selectedIcon\", \"disableIconTransition\"]);\n    var _j = useInteractionStates({\n        handlers: props,\n        className: propClassName,\n        disabled: disabled,\n        enablePressedAndRipple: raisable,\n    }), ripples = _j.ripples, className = _j.className, handlers = _j.handlers;\n    var content = children;\n    if (!disableContentWrap) {\n        content = (React.createElement(\"span\", { style: contentStyle, className: cn(block(\"content\"), contentClassName) }, children));\n    }\n    var leftIcon = propLeftIcon;\n    var selectable = typeof selected === \"boolean\";\n    var selectedIcon = useIcon(\"selected\", propSelectedIcon);\n    var isHiddenIcon = false;\n    if (selectable &&\n        !selectedThemed &&\n        typeof leftIcon === \"undefined\" &&\n        selectedIcon) {\n        leftIcon = selectedIcon;\n        if (!disableIconTransition && isValidElement(selectedIcon)) {\n            isHiddenIcon = !selected;\n            leftIcon = cloneElement(selectedIcon, {\n                className: block(\"selected-icon\", { visible: selected }),\n            });\n        }\n        else if (disableIconTransition && !selected) {\n            // don't want to render it when not selected if there's no transition\n            leftIcon = null;\n        }\n    }\n    var leading = leftIcon && !isHiddenIcon;\n    var trailing = rightIcon;\n    return (React.createElement(\"button\", __assign({}, props, handlers, { ref: ref, \"aria-pressed\": ariaPressed !== null && ariaPressed !== void 0 ? ariaPressed : (!!selected || undefined), type: \"button\", className: cn(block((_b = {},\n            _b[theme] = true,\n            _b.disabled = disabled,\n            _b.selected = !disabled && selected && !selectedThemed,\n            _b.themed = !disabled && selected && selectedThemed,\n            _b[\"solid-disabled\"] = disabled && theme === \"solid\",\n            _b[\"leading-icon\"] = leading && !trailing,\n            _b[\"trailing-icon\"] = trailing && !leading,\n            _b.surrounded = leading && trailing,\n            _b)), className), disabled: disabled }),\n        React.createElement(TextIconSpacing, { icon: leftIcon, beforeClassName: isHiddenIcon ? \"\" : undefined },\n            React.createElement(TextIconSpacing, { icon: rightIcon, iconAfter: true }, content)),\n        ripples));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        Chip.propTypes = {\n            \"aria-pressed\": PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.oneOf([\"true\", \"false\"]),\n            ]),\n            className: PropTypes.string,\n            theme: PropTypes.oneOf([\"outline\", \"solid\"]),\n            disabled: PropTypes.bool,\n            leftIcon: PropTypes.node,\n            rightIcon: PropTypes.node,\n            raisable: PropTypes.bool,\n            contentStyle: PropTypes.object,\n            contentClassName: PropTypes.string,\n            disableContentWrap: PropTypes.bool,\n            selected: PropTypes.bool,\n            selectedThemed: PropTypes.bool,\n            children: PropTypes.node,\n            selectedIcon: PropTypes.node,\n            disableIconTransition: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\nexport default Chip;\n//# sourceMappingURL=Chip.js.map"]},"metadata":{},"sourceType":"module"}