{"ast":null,"code":"/**\n * Creates an \"amazing\" regular expression that matches the letters in order and\n * escapes any letters that could be part of a regex. This should normally be\n * used in fuzzy filters or determining fuzzy matches.\n *\n * @param query The query string to convert into a \"fuzzy\" regular expression\n * @return The \"fuzzy\" regular expression that can be used to determine matches.\n */\nexport default function getFuzzyRegExp(query) {\n  return new RegExp((\"\" + query).split(\"\").join(\"\\\\w*\").replace(/(\\(|\\||\\)|\\\\(?!w\\*)|\\[|\\|-|\\.|\\^|\\+|\\$|\\?|^(?!w)\\*)/g, \"\\\\$1\") // Couldn't get the matching of two '*' working, so replace them here..\n  .replace(/\\*\\*/g, \"*\\\\*\"), \"i\");\n}","map":{"version":3,"sources":["../../src/search/getFuzzyRegExp.ts"],"names":[],"mappings":"AAAA;;;;;;;;AAQA,eAAc,SAAU,cAAV,CAAyB,KAAzB,EAAsC;AAClD,SAAO,IAAI,MAAJ,CACL,CAAA,KAAG,KAAH,EACG,KADH,CACS,EADT,EAEG,IAFH,CAEQ,MAFR,EAGG,OAHH,CAGW,sDAHX,EAGmE,MAHnE,EAIE;AAJF,GAKG,OALH,CAKW,OALX,EAKoB,MALpB,CADK,EAOL,GAPK,CAAP;AASD","sourceRoot":"","sourcesContent":["/**\n * Creates an \"amazing\" regular expression that matches the letters in order and\n * escapes any letters that could be part of a regex. This should normally be\n * used in fuzzy filters or determining fuzzy matches.\n *\n * @param query The query string to convert into a \"fuzzy\" regular expression\n * @return The \"fuzzy\" regular expression that can be used to determine matches.\n */\nexport default function getFuzzyRegExp(query) {\n    return new RegExp((\"\" + query)\n        .split(\"\")\n        .join(\"\\\\w*\")\n        .replace(/(\\(|\\||\\)|\\\\(?!w\\*)|\\[|\\|-|\\.|\\^|\\+|\\$|\\?|^(?!w)\\*)/g, \"\\\\$1\")\n        // Couldn't get the matching of two '*' working, so replace them here..\n        .replace(/\\*\\*/g, \"*\\\\*\"), \"i\");\n}\n//# sourceMappingURL=getFuzzyRegExp.js.map"]},"metadata":{},"sourceType":"module"}