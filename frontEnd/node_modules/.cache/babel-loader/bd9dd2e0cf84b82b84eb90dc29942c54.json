{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-expansion-panel\");\n/**\n * The header for a panel that controls the expansion state. This is really just\n * a simple button that displays the children before an expander icon.\n *\n * Reminder: Since this is a `<button>`, only `inline` elements should be\n * rendered within (so use `<span>` instead of `<div>` for children).\n */\n\nvar ExpansionPanelHeader = forwardRef(function ExpansionPanelHeader(_a, ref) {\n  var propIcon = _a.icon,\n      expanded = _a.expanded,\n      children = _a.children,\n      className = _a.className,\n      _b = _a.disableTransition,\n      disableTransition = _b === void 0 ? false : _b,\n      props = __rest(_a, [\"icon\", \"expanded\", \"children\", \"className\", \"disableTransition\"]);\n\n  var icon = useIcon(\"expander\", propIcon);\n  return React.createElement(UnstyledButton, __assign({}, props, {\n    ref: ref,\n    \"aria-expanded\": expanded || undefined,\n    className: cn(block(\"header\"), className)\n  }), children, icon && React.createElement(\"span\", {\n    className: block(\"icon\")\n  }, React.createElement(IconRotator, {\n    animate: !disableTransition,\n    rotated: expanded\n  }, icon)));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    ExpansionPanelHeader.propTypes = {\n      id: PropTypes.string.isRequired,\n      icon: PropTypes.node,\n      expanded: PropTypes.bool.isRequired,\n      onClick: PropTypes.func.isRequired,\n      children: PropTypes.node.isRequired,\n      className: PropTypes.string,\n      disableTransition: PropTypes.bool\n    };\n  } catch (e) {}\n}\n\nexport default ExpansionPanelHeader;","map":{"version":3,"sources":["../src/ExpansionPanelHeader.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAEE,UAFF,QAKO,OALP;AAMA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,WAAT,EAAsB,OAAtB,QAAqC,gBAArC;AACA,SAAS,GAAT,QAAoB,iBAApB;AAwCA,IAAM,KAAK,GAAG,GAAG,CAAC,qBAAD,CAAjB;AAEA;;;;;;;;AAOA,IAAM,oBAAoB,GAAG,UAAU,CAGrC,SAAS,oBAAT,CACA,EADA,EASA,GATA,EASG;AAPD,MAAM,QAAQ,GAAA,EAAA,CAAA,IAAd;AAAA,MACA,QAAQ,GAAA,EAAA,CAAA,QADR;AAAA,MAEA,QAAQ,GAAA,EAAA,CAAA,QAFR;AAAA,MAGA,SAAS,GAAA,EAAA,CAAA,SAHT;AAAA,MAIA,EAAA,GAAA,EAAA,CAAA,iBAJA;AAAA,MAIA,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAJzB;AAAA,MAKG,KAAK,GAAA,MAAA,CAAA,EAAA,EANV,CAAA,MAAA,EAAA,UAAA,EAAA,UAAA,EAAA,WAAA,EAAA,mBAAA,CAMU,CALR;;AASF,MAAM,IAAI,GAAG,OAAO,CAAC,UAAD,EAAa,QAAb,CAApB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe,QAAA,CAAA,EAAA,EACT,KADS,EACJ;AACT,IAAA,GAAG,EAAE,GADI;AACD,qBACO,QAAQ,IAAI,SAFlB;AAGT,IAAA,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC,QAAD,CAAN,EAAkB,SAAlB;AAHJ,GADI,CAAf,EAMG,QANH,EAOG,IAAI,IACH,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAE,KAAK,CAAC,MAAD;AAAtB,GAAA,EACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY;AAAC,IAAA,OAAO,EAAE,CAAC,iBAAX;AAA8B,IAAA,OAAO,EAAE;AAAvC,GAAZ,EACG,IADH,CADF,CARJ,CADF;AAiBD,CAjCsC,CAAvC;;AAmCA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,oBAAoB,CAAC,SAArB,GAAiC;AAC/B,MAAA,EAAE,EAAE,SAAS,CAAC,MAAV,CAAiB,UADU;AAE/B,MAAA,IAAI,EAAE,SAAS,CAAC,IAFe;AAG/B,MAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe,UAHM;AAI/B,MAAA,OAAO,EAAE,SAAS,CAAC,IAAV,CAAe,UAJO;AAK/B,MAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe,UALM;AAM/B,MAAA,SAAS,EAAE,SAAS,CAAC,MANU;AAO/B,MAAA,iBAAiB,EAAE,SAAS,CAAC;AAPE,KAAjC;AASD,GAZD,CAYE,OAAO,CAAP,EAAU,CAAE;AACf;;AAED,eAAe,oBAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, } from \"react\";\nimport cn from \"classnames\";\nimport { UnstyledButton } from \"@react-md/button\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-expansion-panel\");\n/**\n * The header for a panel that controls the expansion state. This is really just\n * a simple button that displays the children before an expander icon.\n *\n * Reminder: Since this is a `<button>`, only `inline` elements should be\n * rendered within (so use `<span>` instead of `<div>` for children).\n */\nvar ExpansionPanelHeader = forwardRef(function ExpansionPanelHeader(_a, ref) {\n    var propIcon = _a.icon, expanded = _a.expanded, children = _a.children, className = _a.className, _b = _a.disableTransition, disableTransition = _b === void 0 ? false : _b, props = __rest(_a, [\"icon\", \"expanded\", \"children\", \"className\", \"disableTransition\"]);\n    var icon = useIcon(\"expander\", propIcon);\n    return (React.createElement(UnstyledButton, __assign({}, props, { ref: ref, \"aria-expanded\": expanded || undefined, className: cn(block(\"header\"), className) }),\n        children,\n        icon && (React.createElement(\"span\", { className: block(\"icon\") },\n            React.createElement(IconRotator, { animate: !disableTransition, rotated: expanded }, icon)))));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        ExpansionPanelHeader.propTypes = {\n            id: PropTypes.string.isRequired,\n            icon: PropTypes.node,\n            expanded: PropTypes.bool.isRequired,\n            onClick: PropTypes.func.isRequired,\n            children: PropTypes.node.isRequired,\n            className: PropTypes.string,\n            disableTransition: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\nexport default ExpansionPanelHeader;\n//# sourceMappingURL=ExpansionPanelHeader.js.map"]},"metadata":{},"sourceType":"module"}