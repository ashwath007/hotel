{"ast":null,"code":"import React from \"react\";\nimport cn from \"classnames\";\n/**\n * The `HighlightedResult` component can be used to bold specific letters\n * within the `children` if the `children` is a string.\n */\n\nvar HighlightedResult = function (_a) {\n  var propId = _a.id,\n      style = _a.style,\n      className = _a.className,\n      _b = _a.enabled,\n      enabled = _b === void 0 ? true : _b,\n      value = _a.value,\n      children = _a.children,\n      _c = _a.repeatable,\n      repeatable = _c === void 0 ? false : _c,\n      _d = _a.index,\n      index = _d === void 0 ? 0 : _d;\n\n  if (!enabled || !value || typeof children !== \"string\") {\n    return React.createElement(React.Fragment, null, children);\n  }\n\n  var i = children.toLowerCase().indexOf(value.toLowerCase());\n\n  if (i === -1) {\n    return React.createElement(React.Fragment, null, children);\n  }\n\n  var end = i + value.length;\n  var id = propId;\n\n  if (id && index > 0) {\n    id = id + \"-\" + index;\n  }\n\n  return React.createElement(React.Fragment, null, i > 0 && children.substring(0, i), React.createElement(\"span\", {\n    id: id,\n    style: style,\n    className: cn(\"rmd-typography--bold\", className)\n  }, children.substring(i, end)), end < children.length && React.createElement(HighlightedResult, {\n    style: style,\n    className: className,\n    value: value,\n    enabled: enabled && repeatable,\n    repeatable: repeatable,\n    index: index + 1\n  }, children.substring(end)));\n};\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    HighlightedResult.propTypes = {\n      id: PropTypes.string,\n      index: PropTypes.number,\n      value: PropTypes.string.isRequired,\n      style: PropTypes.object,\n      className: PropTypes.string,\n      children: PropTypes.node,\n      enabled: PropTypes.bool,\n      repeatable: PropTypes.bool\n    };\n  } catch (e) {}\n}\n\nexport default HighlightedResult;","map":{"version":3,"sources":["../src/HighlightedResult.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from \"react\";\nimport cn from \"classnames\";\n/**\n * The `HighlightedResult` component can be used to bold specific letters\n * within the `children` if the `children` is a string.\n */\nvar HighlightedResult = function (_a) {\n    var propId = _a.id, style = _a.style, className = _a.className, _b = _a.enabled, enabled = _b === void 0 ? true : _b, value = _a.value, children = _a.children, _c = _a.repeatable, repeatable = _c === void 0 ? false : _c, _d = _a.index, index = _d === void 0 ? 0 : _d;\n    if (!enabled || !value || typeof children !== \"string\") {\n        return React.createElement(React.Fragment, null, children);\n    }\n    var i = children.toLowerCase().indexOf(value.toLowerCase());\n    if (i === -1) {\n        return React.createElement(React.Fragment, null, children);\n    }\n    var end = i + value.length;\n    var id = propId;\n    if (id && index > 0) {\n        id = id + \"-\" + index;\n    }\n    return (React.createElement(React.Fragment, null,\n        i > 0 && children.substring(0, i),\n        React.createElement(\"span\", { id: id, style: style, className: cn(\"rmd-typography--bold\", className) }, children.substring(i, end)),\n        end < children.length && (React.createElement(HighlightedResult, { style: style, className: className, value: value, enabled: enabled && repeatable, repeatable: repeatable, index: index + 1 }, children.substring(end)))));\n};\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        HighlightedResult.propTypes = {\n            id: PropTypes.string,\n            index: PropTypes.number,\n            value: PropTypes.string.isRequired,\n            style: PropTypes.object,\n            className: PropTypes.string,\n            children: PropTypes.node,\n            enabled: PropTypes.bool,\n            repeatable: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\nexport default HighlightedResult;\n//# sourceMappingURL=HighlightedResult.js.map"]},"metadata":{},"sourceType":"module"}