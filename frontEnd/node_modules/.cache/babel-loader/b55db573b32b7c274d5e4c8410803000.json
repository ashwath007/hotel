{"ast":null,"code":"import { createContext, useContext } from \"react\";\nvar context = createContext(false);\n/**\n * A quick way to conditionally inherit the sticky context within a table.  If\n * the sticky prop was defined and a boolean, it will be used. Otherwise the\n * inherited context value will be used.\n * @private\n */\n\nexport function useSticky(sticky) {\n  var isSticky = useContext(context);\n  return typeof sticky !== \"undefined\" ? !!sticky : isSticky;\n}\n/**\n * @private\n */\n\nexport var StickyTableProvider = context.Provider;","map":{"version":3,"sources":["../src/sticky.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,UAAxB,QAA0C,OAA1C;AAEA,IAAM,OAAO,GAAG,aAAa,CAAC,KAAD,CAA7B;AAEA;;;;;;;AAMA,OAAM,SAAU,SAAV,CAAoB,MAApB,EAAwD;AAC5D,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAD,CAA3B;AAEA,SAAO,OAAO,MAAP,KAAkB,WAAlB,GAAgC,CAAC,CAAC,MAAlC,GAA2C,QAAlD;AACD;AAED;;;;AAGA,OAAe,IAAU,mBAAmB,GAAK,OAAO,CAAZ,QAA7B","sourceRoot":"","sourcesContent":["import { createContext, useContext } from \"react\";\nvar context = createContext(false);\n/**\n * A quick way to conditionally inherit the sticky context within a table.  If\n * the sticky prop was defined and a boolean, it will be used. Otherwise the\n * inherited context value will be used.\n * @private\n */\nexport function useSticky(sticky) {\n    var isSticky = useContext(context);\n    return typeof sticky !== \"undefined\" ? !!sticky : isSticky;\n}\n/**\n * @private\n */\nexport var StickyTableProvider = context.Provider;\n//# sourceMappingURL=sticky.js.map"]},"metadata":{},"sourceType":"module"}