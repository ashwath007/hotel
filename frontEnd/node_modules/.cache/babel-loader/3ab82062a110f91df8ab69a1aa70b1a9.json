{"ast":null,"code":"import { createContext, useContext } from \"react\";\n/**\n * Boolean if the child components should inherit the color of the app bar.\n * @private\n */\n\nexport var InheritContext = createContext(false);\n/**\n * This is probably a bit overkill... but this is used so that all the AppBar\n * child components can automatically inherit the base color as needed within an\n * AppBar. If the `inheritColor` prop was provided to the component, that value\n * will be used instead.\n *\n * @param inheritColor The prop inheritColor for the component\n * @return true if the color should be inherited.\n * @private\n */\n\nexport function useInheritContext(inheritColor) {\n  var inheritContext = useContext(InheritContext);\n  return typeof inheritColor === \"boolean\" ? inheritColor : inheritContext;\n}\n/**\n * Boolean if there is a parent app bar. The theme colors will be inherited from\n * the parent app bar instead of the current app bar for these cases since\n * nested app bars usually happen with prominent toolbars and the root app bar\n * defines the theme.\n *\n * @private\n */\n\nexport var ParentContext = createContext(false);\n/**\n *\n * @private\n */\n\nexport function useParentContext() {\n  return useContext(ParentContext);\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  InheritContext.displayName = \"InheritColorContext\";\n  ParentContext.displayName = \"ParentContext\";\n}","map":{"version":3,"sources":["../src/useInheritContext.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,UAAxB,QAA0C,OAA1C;AAEA;;;;;AAIA,OAAO,IAAM,cAAc,GAAG,aAAa,CAAC,KAAD,CAApC;AAWP;;;;;;;;;;;AAUA,OAAM,SAAU,iBAAV,CAA4B,YAA5B,EAA6D;AACjE,MAAM,cAAc,GAAG,UAAU,CAAC,cAAD,CAAjC;AACA,SAAO,OAAO,YAAP,KAAwB,SAAxB,GAAoC,YAApC,GAAmD,cAA1D;AACD;AAED;;;;;;;;;AAQA,OAAO,IAAM,aAAa,GAAG,aAAa,CAAC,KAAD,CAAnC;AAEP;;;;;AAIA,OAAM,SAAU,gBAAV,GAA0B;AAC9B,SAAO,UAAU,CAAC,aAAD,CAAjB;AACD;;AAED,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,EAAA,cAAc,CAAC,WAAf,GAA6B,qBAA7B;AACA,EAAA,aAAa,CAAC,WAAd,GAA4B,eAA5B;AACD","sourceRoot":"","sourcesContent":["import { createContext, useContext } from \"react\";\n/**\n * Boolean if the child components should inherit the color of the app bar.\n * @private\n */\nexport var InheritContext = createContext(false);\n/**\n * This is probably a bit overkill... but this is used so that all the AppBar\n * child components can automatically inherit the base color as needed within an\n * AppBar. If the `inheritColor` prop was provided to the component, that value\n * will be used instead.\n *\n * @param inheritColor The prop inheritColor for the component\n * @return true if the color should be inherited.\n * @private\n */\nexport function useInheritContext(inheritColor) {\n    var inheritContext = useContext(InheritContext);\n    return typeof inheritColor === \"boolean\" ? inheritColor : inheritContext;\n}\n/**\n * Boolean if there is a parent app bar. The theme colors will be inherited from\n * the parent app bar instead of the current app bar for these cases since\n * nested app bars usually happen with prominent toolbars and the root app bar\n * defines the theme.\n *\n * @private\n */\nexport var ParentContext = createContext(false);\n/**\n *\n * @private\n */\nexport function useParentContext() {\n    return useContext(ParentContext);\n}\nif (process.env.NODE_ENV !== \"production\") {\n    InheritContext.displayName = \"InheritColorContext\";\n    ParentContext.displayName = \"ParentContext\";\n}\n//# sourceMappingURL=useInheritContext.js.map"]},"metadata":{},"sourceType":"module"}