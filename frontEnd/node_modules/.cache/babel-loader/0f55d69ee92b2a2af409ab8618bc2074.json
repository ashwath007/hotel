{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef, useEffect, useRef } from \"react\";\nimport cn from \"classnames\";\nimport { Tree } from \"@react-md/tree\";\nimport defaultNavigationItemRenderer from \"./defaultNavigationItemRenderer\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isTemporaryLayout } from \"./utils\";\n/**\n * Renders the navigation tree for the Layout component that adds some\n * reasonable defaults to work with navigation items.\n */\n\nvar LayoutTree = forwardRef(function LayoutTree(_a, ref) {\n  var propId = _a.id,\n      ariaLabelledBy = _a[\"aria-labelledby\"],\n      _b = _a[\"aria-label\"],\n      ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : \"Navigation\" : _b,\n      className = _a.className,\n      navStyle = _a.navStyle,\n      navClassName = _a.navClassName,\n      navItems = _a.navItems,\n      _c = _a.labelKey,\n      labelKey = _c === void 0 ? \"children\" : _c,\n      _d = _a.valueKey,\n      valueKey = _d === void 0 ? \"children\" : _d,\n      _e = _a.itemRenderer,\n      itemRenderer = _e === void 0 ? defaultNavigationItemRenderer : _e,\n      selectedIds = _a.selectedIds,\n      _f = _a.disableTemporaryAutoclose,\n      disableTemporaryAutoclose = _f === void 0 ? false : _f,\n      props = __rest(_a, [\"id\", \"aria-labelledby\", \"aria-label\", \"className\", \"navStyle\", \"navClassName\", \"navItems\", \"labelKey\", \"valueKey\", \"itemRenderer\", \"selectedIds\", \"disableTemporaryAutoclose\"]);\n\n  var _g = useLayoutConfig(),\n      baseId = _g.baseId,\n      layout = _g.layout,\n      hideNav = _g.hideNav,\n      visible = _g.visible;\n\n  var selectedId = selectedIds[0];\n  var lastSelectedId = useRef(selectedId);\n  var isTemporary = isTemporaryLayout(layout);\n  var id = propId !== null && propId !== void 0 ? propId : baseId + \"-navigation-tree\";\n  useEffect(function () {\n    if (disableTemporaryAutoclose || !isTemporary || !visible || lastSelectedId.current === selectedId) {\n      // need to update the lastSelectedId since the selectedId might've changed\n      // by a route change OUTSIDE of the navigation drawer. if it isn't\n      // updated, it'll automatically close the next time it is opened.\n      lastSelectedId.current = selectedId;\n      return;\n    }\n\n    lastSelectedId.current = selectedId;\n    hideNav();\n  }, [disableTemporaryAutoclose, isTemporary, visible, hideNav, selectedId]);\n  return React.createElement(\"nav\", {\n    id: id + \"-nav\",\n    style: navStyle,\n    className: cn(\"rmd-layout-nav\", navClassName)\n  }, React.createElement(Tree, __assign({}, props, {\n    id: id,\n    ref: ref,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    data: navItems,\n    labelKey: labelKey,\n    valueKey: valueKey,\n    selectedIds: selectedIds,\n    itemRenderer: itemRenderer,\n    className: cn(\"rmd-layout-tree\", className)\n  })));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    LayoutTree.propTypes = {\n      id: PropTypes.string,\n      \"aria-label\": PropTypes.string,\n      \"aria-labelledby\": PropTypes.string,\n      className: PropTypes.string,\n      navStyle: PropTypes.object,\n      navClassName: PropTypes.string,\n      children: PropTypes.node,\n      labelKey: PropTypes.string,\n      valueKey: PropTypes.string,\n      navItems: PropTypes.object.isRequired,\n      selectedIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n      itemRenderer: PropTypes.func,\n      disableTemporaryAutoclose: PropTypes.bool\n    };\n  } catch (error) {}\n}\n\nexport default LayoutTree;","map":{"version":3,"sources":["../src/LayoutTree.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef, useEffect, useRef } from \"react\";\nimport cn from \"classnames\";\nimport { Tree } from \"@react-md/tree\";\nimport defaultNavigationItemRenderer from \"./defaultNavigationItemRenderer\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isTemporaryLayout } from \"./utils\";\n/**\n * Renders the navigation tree for the Layout component that adds some\n * reasonable defaults to work with navigation items.\n */\nvar LayoutTree = forwardRef(function LayoutTree(_a, ref) {\n    var propId = _a.id, ariaLabelledBy = _a[\"aria-labelledby\"], _b = _a[\"aria-label\"], ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : \"Navigation\" : _b, className = _a.className, navStyle = _a.navStyle, navClassName = _a.navClassName, navItems = _a.navItems, _c = _a.labelKey, labelKey = _c === void 0 ? \"children\" : _c, _d = _a.valueKey, valueKey = _d === void 0 ? \"children\" : _d, _e = _a.itemRenderer, itemRenderer = _e === void 0 ? defaultNavigationItemRenderer : _e, selectedIds = _a.selectedIds, _f = _a.disableTemporaryAutoclose, disableTemporaryAutoclose = _f === void 0 ? false : _f, props = __rest(_a, [\"id\", \"aria-labelledby\", \"aria-label\", \"className\", \"navStyle\", \"navClassName\", \"navItems\", \"labelKey\", \"valueKey\", \"itemRenderer\", \"selectedIds\", \"disableTemporaryAutoclose\"]);\n    var _g = useLayoutConfig(), baseId = _g.baseId, layout = _g.layout, hideNav = _g.hideNav, visible = _g.visible;\n    var selectedId = selectedIds[0];\n    var lastSelectedId = useRef(selectedId);\n    var isTemporary = isTemporaryLayout(layout);\n    var id = propId !== null && propId !== void 0 ? propId : baseId + \"-navigation-tree\";\n    useEffect(function () {\n        if (disableTemporaryAutoclose ||\n            !isTemporary ||\n            !visible ||\n            lastSelectedId.current === selectedId) {\n            // need to update the lastSelectedId since the selectedId might've changed\n            // by a route change OUTSIDE of the navigation drawer. if it isn't\n            // updated, it'll automatically close the next time it is opened.\n            lastSelectedId.current = selectedId;\n            return;\n        }\n        lastSelectedId.current = selectedId;\n        hideNav();\n    }, [disableTemporaryAutoclose, isTemporary, visible, hideNav, selectedId]);\n    return (React.createElement(\"nav\", { id: id + \"-nav\", style: navStyle, className: cn(\"rmd-layout-nav\", navClassName) },\n        React.createElement(Tree, __assign({}, props, { id: id, ref: ref, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy, data: navItems, labelKey: labelKey, valueKey: valueKey, selectedIds: selectedIds, itemRenderer: itemRenderer, className: cn(\"rmd-layout-tree\", className) }))));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        LayoutTree.propTypes = {\n            id: PropTypes.string,\n            \"aria-label\": PropTypes.string,\n            \"aria-labelledby\": PropTypes.string,\n            className: PropTypes.string,\n            navStyle: PropTypes.object,\n            navClassName: PropTypes.string,\n            children: PropTypes.node,\n            labelKey: PropTypes.string,\n            valueKey: PropTypes.string,\n            navItems: PropTypes.object.isRequired,\n            selectedIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n            itemRenderer: PropTypes.func,\n            disableTemporaryAutoclose: PropTypes.bool,\n        };\n    }\n    catch (error) { }\n}\nexport default LayoutTree;\n//# sourceMappingURL=LayoutTree.js.map"]},"metadata":{},"sourceType":"module"}