{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useInheritContext } from \"./useInheritContext\";\nvar block = bem(\"rmd-app-bar\");\n/**\n * This component is used to create a title for your application. If your app is\n * not using the `AppBarNav` component, you can enable the `keyline` prop to\n * ensure that your title aligns with the keyline of your navigation element.\n */\n\nvar AppBarTitle = forwardRef(function AppBarTitle(_a, ref) {\n  var _b = _a.noWrap,\n      noWrap = _b === void 0 ? true : _b,\n      _c = _a.keyline,\n      keyline = _c === void 0 ? false : _c,\n      className = _a.className,\n      children = _a.children,\n      inheritColor = _a.inheritColor,\n      props = __rest(_a, [\"noWrap\", \"keyline\", \"className\", \"children\", \"inheritColor\"]);\n\n  return React.createElement(\"h6\", __assign({}, props, {\n    ref: ref,\n    className: cn(block(\"title\", {\n      \"no-wrap\": noWrap,\n      keyline: keyline,\n      inherit: useInheritContext(inheritColor)\n    }), className)\n  }), children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    AppBarTitle.propTypes = {\n      className: PropTypes.string,\n      children: PropTypes.node,\n      keyline: PropTypes.bool,\n      noWrap: PropTypes.bool,\n      inheritColor: PropTypes.bool\n    };\n  } catch (e) {}\n}\n\nexport default AppBarTitle;","map":{"version":3,"sources":["../src/AppBarTitle.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAkD,OAAlD;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,GAAT,QAAoB,iBAApB;AAEA,SAA6B,iBAA7B,QAAsD,qBAAtD;AAkBA,IAAM,KAAK,GAAG,GAAG,CAAC,aAAD,CAAjB;AAEA;;;;;;AAKA,IAAM,WAAW,GAAG,UAAU,CAC5B,SAAS,WAAT,CACE,EADF,EASE,GATF,EASK;AAPD,MAAA,EAAA,GAAA,EAAA,CAAA,MAAA;AAAA,MAAA,MAAM,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EAAb;AAAA,MACA,EAAA,GAAA,EAAA,CAAA,OADA;AAAA,MACA,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EADf;AAAA,MAEA,SAAS,GAAA,EAAA,CAAA,SAFT;AAAA,MAGA,QAAQ,GAAA,EAAA,CAAA,QAHR;AAAA,MAIA,YAAY,GAAA,EAAA,CAAA,YAJZ;AAAA,MAKG,KAAK,GAAA,MAAA,CAAA,EAAA,EANV,CAAA,QAAA,EAAA,SAAA,EAAA,WAAA,EAAA,UAAA,EAAA,cAAA,CAMU,CALR;;AASF,SACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,GAAG,EAAE,GADI;AAET,IAAA,SAAS,EAAE,EAAE,CACX,KAAK,CAAC,OAAD,EAAU;AACb,iBAAW,MADE;AAEb,MAAA,OAAO,EAAA,OAFM;AAGb,MAAA,OAAO,EAAE,iBAAiB,CAAC,YAAD;AAHb,KAAV,CADM,EAMX,SANW;AAFJ,GADX,CAAA,EAYG,QAZH,CADF;AAgBD,CA5B2B,CAA9B;;AA+BA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,WAAW,CAAC,SAAZ,GAAwB;AACtB,MAAA,SAAS,EAAE,SAAS,CAAC,MADC;AAEtB,MAAA,QAAQ,EAAE,SAAS,CAAC,IAFE;AAGtB,MAAA,OAAO,EAAE,SAAS,CAAC,IAHG;AAItB,MAAA,MAAM,EAAE,SAAS,CAAC,IAJI;AAKtB,MAAA,YAAY,EAAE,SAAS,CAAC;AALF,KAAxB;AAOD,GAVD,CAUE,OAAO,CAAP,EAAU,CAAE;AACf;;AAED,eAAe,WAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nimport { useInheritContext } from \"./useInheritContext\";\nvar block = bem(\"rmd-app-bar\");\n/**\n * This component is used to create a title for your application. If your app is\n * not using the `AppBarNav` component, you can enable the `keyline` prop to\n * ensure that your title aligns with the keyline of your navigation element.\n */\nvar AppBarTitle = forwardRef(function AppBarTitle(_a, ref) {\n    var _b = _a.noWrap, noWrap = _b === void 0 ? true : _b, _c = _a.keyline, keyline = _c === void 0 ? false : _c, className = _a.className, children = _a.children, inheritColor = _a.inheritColor, props = __rest(_a, [\"noWrap\", \"keyline\", \"className\", \"children\", \"inheritColor\"]);\n    return (React.createElement(\"h6\", __assign({}, props, { ref: ref, className: cn(block(\"title\", {\n            \"no-wrap\": noWrap,\n            keyline: keyline,\n            inherit: useInheritContext(inheritColor),\n        }), className) }), children));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        AppBarTitle.propTypes = {\n            className: PropTypes.string,\n            children: PropTypes.node,\n            keyline: PropTypes.bool,\n            noWrap: PropTypes.bool,\n            inheritColor: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\nexport default AppBarTitle;\n//# sourceMappingURL=AppBarTitle.js.map"]},"metadata":{},"sourceType":"module"}