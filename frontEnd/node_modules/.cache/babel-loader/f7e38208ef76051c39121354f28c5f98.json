{"ast":null,"code":"/* eslint-disable react/prop-types */\nimport React, { createContext, useCallback, useContext, useMemo, useState } from \"react\";\nvar context = createContext({\n  stack: [],\n  add: function () {},\n  remove: function () {}\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  context.displayName = \"NestedDialogContext\";\n}\n\nvar Provider = context.Provider;\n/**\n * This component is used to help with handling nested dialogs by:\n * - preventing all dialogs to be closed when the escape key is pressed\n * - hiding the overlays for dialogs that are not the top-most focus\n *\n * This should be added to the root of your app if you would like to enable this\n * feature.\n */\n\nexport var NestedDialogContextProvider = function (_a) {\n  var children = _a.children;\n\n  var _b = useState([]),\n      stack = _b[0],\n      setStack = _b[1];\n\n  var add = useCallback(function (dialogId) {\n    setStack(function (prevStack) {\n      if (process.env.NODE_ENV !== \"production\" && prevStack.includes(dialogId)) {\n        /* eslint-disable no-console */\n        console.warn(\"Tried to add a duplicate dialog id to the `NestedDialogContext`.\");\n        console.warn(\"This means that you have two dialogs with the same id: `\" + dialogId + \"`.\");\n        console.warn(\"This should be fixed before moving to production since this will break accessibility and is technically invalid.\");\n      }\n\n      return prevStack.concat(dialogId);\n    });\n  }, []);\n  var remove = useCallback(function (dialogId) {\n    setStack(function (prevStack) {\n      return prevStack.filter(function (id) {\n        return id !== dialogId;\n      });\n    });\n  }, []);\n  var value = useMemo(function () {\n    return {\n      stack: stack,\n      add: add,\n      remove: remove\n    };\n  }, [add, remove, stack]);\n  return React.createElement(Provider, {\n    value: value\n  }, children);\n};\n/**\n * Gets the current nested dialog context. This shouldn't really be used\n * externally and is a private context hook.\n *\n * @private\n */\n\nexport function useNestedDialogContext() {\n  return useContext(context);\n}","map":{"version":3,"sources":["../src/NestedDialogContext.tsx"],"names":[],"mappings":"AAAA;AACA,OAAO,KAAP,IACE,aADF,EAGE,WAHF,EAIE,UAJF,EAKE,OALF,EAME,QANF,QAOO,OAPP;AAeA,IAAM,OAAO,GAAG,aAAa,CAAsB;AACjD,EAAA,KAAK,EAAE,EAD0C;AAEjD,EAAA,GAAG,EAAE,YAAA,CAAQ,CAFoC;AAGjD,EAAA,MAAM,EAAE,YAAA,CAAQ;AAHiC,CAAtB,CAA7B;;AAMA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,EAAA,OAAO,CAAC,WAAR,GAAsB,qBAAtB;AACD;;AAEO,IAAA,QAAQ,GAAK,OAAO,CAAZ,QAAR;AAER;;;;;;;;;AAQA,OAAO,IAAM,2BAA2B,GAAO,UAAC,EAAD,EAAa;MAAV,QAAQ,GAAA,EAAA,CAAA,Q;;AAClD,MAAA,EAAA,GAAoB,QAAQ,CAAW,EAAX,CAA5B;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAhB;;AACN,MAAM,GAAG,GAAG,WAAW,CAAC,UAAC,QAAD,EAAiB;AACvC,IAAA,QAAQ,CAAC,UAAC,SAAD,EAAU;AACjB,UACE,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,IACA,SAAS,CAAC,QAAV,CAAmB,QAAnB,CAFF,EAGE;AACA;AACA,QAAA,OAAO,CAAC,IAAR,CACE,kEADF;AAGA,QAAA,OAAO,CAAC,IAAR,CACE,6DAA4D,QAA5D,GAAoE,IADtE;AAGA,QAAA,OAAO,CAAC,IAAR,CACE,kHADF;AAGD;;AAED,aAAO,SAAS,CAAC,MAAV,CAAiB,QAAjB,CAAP;AACD,KAlBO,CAAR;AAmBD,GApBsB,EAoBpB,EApBoB,CAAvB;AAqBA,MAAM,MAAM,GAAG,WAAW,CAAC,UAAC,QAAD,EAAiB;AAC1C,IAAA,QAAQ,CAAC,UAAC,SAAD,EAAU;AAAK,aAAA,SAAS,CAAC,MAAV,CAAiB,UAAC,EAAD,EAAG;AAAK,eAAA,EAAE,KAAF,QAAA;AAAzB,OAAA,CAAA;AAAyC,KAAzD,CAAR;AACD,GAFyB,EAEvB,EAFuB,CAA1B;AAGA,MAAM,KAAK,GAAG,OAAO,CAAC,YAAA;AAAM,WAAC;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,GAAG,EAAA,GAAZ;AAAc,MAAA,MAAM,EAArB;AAAC,KAAD;AAAwB,GAA/B,EAAiC,CAAC,GAAD,EAAM,MAAN,EAAc,KAAd,CAAjC,CAArB;AAEA,SAAO,KAAA,CAAA,aAAA,CAAC,QAAD,EAAS;AAAC,IAAA,KAAK,EAAE;AAAR,GAAT,EAAyB,QAAzB,CAAP;AACD,CA7BM;AA+BP;;;;;;;AAMA,OAAM,SAAU,sBAAV,GAAgC;AACpC,SAAO,UAAU,CAAC,OAAD,CAAjB;AACD","sourceRoot":"","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, { createContext, useCallback, useContext, useMemo, useState, } from \"react\";\nvar context = createContext({\n    stack: [],\n    add: function () { },\n    remove: function () { },\n});\nif (process.env.NODE_ENV !== \"production\") {\n    context.displayName = \"NestedDialogContext\";\n}\nvar Provider = context.Provider;\n/**\n * This component is used to help with handling nested dialogs by:\n * - preventing all dialogs to be closed when the escape key is pressed\n * - hiding the overlays for dialogs that are not the top-most focus\n *\n * This should be added to the root of your app if you would like to enable this\n * feature.\n */\nexport var NestedDialogContextProvider = function (_a) {\n    var children = _a.children;\n    var _b = useState([]), stack = _b[0], setStack = _b[1];\n    var add = useCallback(function (dialogId) {\n        setStack(function (prevStack) {\n            if (process.env.NODE_ENV !== \"production\" &&\n                prevStack.includes(dialogId)) {\n                /* eslint-disable no-console */\n                console.warn(\"Tried to add a duplicate dialog id to the `NestedDialogContext`.\");\n                console.warn(\"This means that you have two dialogs with the same id: `\" + dialogId + \"`.\");\n                console.warn(\"This should be fixed before moving to production since this will break accessibility and is technically invalid.\");\n            }\n            return prevStack.concat(dialogId);\n        });\n    }, []);\n    var remove = useCallback(function (dialogId) {\n        setStack(function (prevStack) { return prevStack.filter(function (id) { return id !== dialogId; }); });\n    }, []);\n    var value = useMemo(function () { return ({ stack: stack, add: add, remove: remove }); }, [add, remove, stack]);\n    return React.createElement(Provider, { value: value }, children);\n};\n/**\n * Gets the current nested dialog context. This shouldn't really be used\n * externally and is a private context hook.\n *\n * @private\n */\nexport function useNestedDialogContext() {\n    return useContext(context);\n}\n//# sourceMappingURL=NestedDialogContext.js.map"]},"metadata":{},"sourceType":"module"}