{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React from \"react\";\nimport cn from \"classnames\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-tree-item\");\n/**\n * The `TreeItemExpanderIcon` is a simple wrapper of the `IconRotator` prop to\n * be used within a `TreeView`.\n */\n\nexport default function TreeItemExpanderIcon(_a) {\n  var className = _a.className,\n      children = _a.children,\n      _b = _a.rotated,\n      rotated = _b === void 0 ? false : _b,\n      props = __rest(_a, [\"className\", \"children\", \"rotated\"]);\n\n  var icon = useIcon(\"expander\", children);\n  return React.createElement(IconRotator, __assign({}, props, {\n    rotated: rotated,\n    className: cn(block(\"rotator-icon\"), className)\n  }), icon);\n}","map":{"version":3,"sources":["../src/TreeItemExpanderIcon.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,MAA+C,OAA/C;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,WAAT,EAA4C,OAA5C,QAA2D,gBAA3D;AACA,SAAS,GAAT,QAAoB,iBAApB;AAMA,IAAM,KAAK,GAAG,GAAG,CAAC,eAAD,CAAjB;AAEA;;;;;AAIA,eAAc,SAAU,oBAAV,CAA+B,EAA/B,EAKc;AAJ1B,MAAA,SAAS,GAAA,EAAA,CAAA,SAAT;AAAA,MACA,QAAQ,GAAA,EAAA,CAAA,QADR;AAAA,MAEA,EAAA,GAAA,EAAA,CAAA,OAFA;AAAA,MAEA,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EAFf;AAAA,MAGG,KAAK,GAAA,MAAA,CAAA,EAAA,EAJmC,CAAA,WAAA,EAAA,UAAA,EAAA,SAAA,CAInC,CAHR;;AAKA,MAAM,IAAI,GAAG,OAAO,CAAC,UAAD,EAAa,QAAb,CAApB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,QAAA,CAAA,EAAA,EACN,KADM,EACD;AACT,IAAA,OAAO,EAAE,OADA;AAET,IAAA,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC,cAAD,CAAN,EAAwB,SAAxB;AAFJ,GADC,CAAZ,EAKG,IALH,CADF;AASD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React from \"react\";\nimport cn from \"classnames\";\nimport { IconRotator, useIcon } from \"@react-md/icon\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-tree-item\");\n/**\n * The `TreeItemExpanderIcon` is a simple wrapper of the `IconRotator` prop to\n * be used within a `TreeView`.\n */\nexport default function TreeItemExpanderIcon(_a) {\n    var className = _a.className, children = _a.children, _b = _a.rotated, rotated = _b === void 0 ? false : _b, props = __rest(_a, [\"className\", \"children\", \"rotated\"]);\n    var icon = useIcon(\"expander\", children);\n    return (React.createElement(IconRotator, __assign({}, props, { rotated: rotated, className: cn(block(\"rotator-icon\"), className) }), icon));\n}\n//# sourceMappingURL=TreeItemExpanderIcon.js.map"]},"metadata":{},"sourceType":"module"}