{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\nimport useVisibility from \"./useVisibility\";\n/**\n * This hook is used to provide the menu visibility based on interacting with\n * the `MenuButton` component. It'll merge and return the required `onClick` and\n * `onKeyDown` event handlers that should be passed down to the `MenuButton` as\n * well as the current visibility state and a `hide` function to pass to the\n * `Menu`.\n *\n * @private\n */\n\nexport default function useButtonVisibility(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      propOnClick = _b.onClick,\n      propOnKeyDown = _b.onKeyDown,\n      defaultVisible = _b.defaultVisible,\n      propDefaultFocus = _b.defaultFocus,\n      onVisibilityChange = _b.onVisibilityChange;\n\n  var handlers = useRefCache({\n    onClick: propOnClick,\n    onKeyDown: propOnKeyDown\n  });\n\n  var _c = useVisibility({\n    defaultVisible: defaultVisible,\n    defaultFocus: propDefaultFocus,\n    onVisibilityChange: onVisibilityChange\n  }),\n      visible = _c.visible,\n      defaultFocus = _c.defaultFocus,\n      hide = _c.hide,\n      showWithFocus = _c.showWithFocus,\n      toggle = _c.toggle;\n\n  var onClick = useCallback(function (event) {\n    var onClick = handlers.current.onClick;\n\n    if (onClick) {\n      onClick(event);\n    }\n\n    toggle();\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [toggle]);\n  var onKeyDown = useCallback(function (event) {\n    var onKeyDown = handlers.current.onKeyDown;\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    switch (event.key) {\n      case \"ArrowDown\":\n        event.preventDefault();\n        showWithFocus(\"first\");\n        break;\n\n      case \"ArrowUp\":\n        event.preventDefault();\n        showWithFocus(\"last\");\n        break;\n      // no default\n    }\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [showWithFocus]);\n  return {\n    visible: visible,\n    defaultFocus: defaultFocus,\n    hide: hide,\n    onClick: onClick,\n    onKeyDown: onKeyDown\n  };\n}","map":{"version":3,"sources":["../src/useButtonVisibility.ts"],"names":[],"mappings":"AAAA,SAAyB,WAAzB,QAA4C,OAA5C;AACA,SAAS,WAAT,QAA4B,iBAA5B;AAEA,OAAO,aAAP,MAA4D,iBAA5D;AAgBA;;;;;;;;;;AASA,eAAc,SAAU,mBAAV,CAA8B,EAA9B,EAMiB;MANa,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAMf,EANe,GAMb,E;MALpB,WAAW,GAAA,EAAA,CAAA,O;MACT,aAAa,GAAA,EAAA,CAAA,S;MACxB,cAAc,GAAA,EAAA,CAAA,c;MACA,gBAAgB,GAAA,EAAA,CAAA,Y;MAC9B,kBAAkB,GAAA,EAAA,CAAA,kB;;AAElB,MAAM,QAAQ,GAAG,WAAW,CAAC;AAC3B,IAAA,OAAO,EAAE,WADkB;AAE3B,IAAA,SAAS,EAAE;AAFgB,GAAD,CAA5B;;AAIM,MAAA,EAAA,GAAyD,aAAa,CAAC;AAC3E,IAAA,cAAc,EAAA,cAD6D;AAE3E,IAAA,YAAY,EAAE,gBAF6D;AAG3E,IAAA,kBAAkB,EAAA;AAHyD,GAAD,CAAtE;AAAA,MAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,MAAW,YAAY,GAAA,EAAA,CAAA,YAAvB;AAAA,MAAyB,IAAI,GAAA,EAAA,CAAA,IAA7B;AAAA,MAA+B,aAAa,GAAA,EAAA,CAAA,aAA5C;AAAA,MAA8C,MAAM,GAAA,EAAA,CAAA,MAApD;;AAMN,MAAM,OAAO,GAAG,WAAW,CACzB,UAAC,KAAD,EAA2C;AACjC,QAAA,OAAO,GAAK,QAAQ,CAAC,OAAT,CAAL,OAAP;;AACR,QAAI,OAAJ,EAAa;AACX,MAAA,OAAO,CAAC,KAAD,CAAP;AACD;;AAED,IAAA,MAAM;AACP,GARwB,EASzB;AACA;AACA,GAAC,MAAD,CAXyB,CAA3B;AAcA,MAAM,SAAS,GAAG,WAAW,CAC3B,UAAC,KAAD,EAA8C;AACpC,QAAA,SAAS,GAAK,QAAQ,CAAC,OAAT,CAAL,SAAT;;AACR,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AAED,YAAQ,KAAK,CAAC,GAAd;AACE,WAAK,WAAL;AACE,QAAA,KAAK,CAAC,cAAN;AACA,QAAA,aAAa,CAAC,OAAD,CAAb;AACA;;AACF,WAAK,SAAL;AACE,QAAA,KAAK,CAAC,cAAN;AACA,QAAA,aAAa,CAAC,MAAD,CAAb;AACA;AACF;AATF;AAWD,GAlB0B,EAmB3B;AACA;AACA,GAAC,aAAD,CArB2B,CAA7B;AAwBA,SAAO;AACL,IAAA,OAAO,EAAA,OADF;AAEL,IAAA,YAAY,EAAA,YAFP;AAGL,IAAA,IAAI,EAAA,IAHC;AAIL,IAAA,OAAO,EAAA,OAJF;AAKL,IAAA,SAAS,EAAA;AALJ,GAAP;AAOD","sourceRoot":"","sourcesContent":["import { useCallback } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\nimport useVisibility from \"./useVisibility\";\n/**\n * This hook is used to provide the menu visibility based on interacting with\n * the `MenuButton` component. It'll merge and return the required `onClick` and\n * `onKeyDown` event handlers that should be passed down to the `MenuButton` as\n * well as the current visibility state and a `hide` function to pass to the\n * `Menu`.\n *\n * @private\n */\nexport default function useButtonVisibility(_a) {\n    var _b = _a === void 0 ? {} : _a, propOnClick = _b.onClick, propOnKeyDown = _b.onKeyDown, defaultVisible = _b.defaultVisible, propDefaultFocus = _b.defaultFocus, onVisibilityChange = _b.onVisibilityChange;\n    var handlers = useRefCache({\n        onClick: propOnClick,\n        onKeyDown: propOnKeyDown,\n    });\n    var _c = useVisibility({\n        defaultVisible: defaultVisible,\n        defaultFocus: propDefaultFocus,\n        onVisibilityChange: onVisibilityChange,\n    }), visible = _c.visible, defaultFocus = _c.defaultFocus, hide = _c.hide, showWithFocus = _c.showWithFocus, toggle = _c.toggle;\n    var onClick = useCallback(function (event) {\n        var onClick = handlers.current.onClick;\n        if (onClick) {\n            onClick(event);\n        }\n        toggle();\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [toggle]);\n    var onKeyDown = useCallback(function (event) {\n        var onKeyDown = handlers.current.onKeyDown;\n        if (onKeyDown) {\n            onKeyDown(event);\n        }\n        switch (event.key) {\n            case \"ArrowDown\":\n                event.preventDefault();\n                showWithFocus(\"first\");\n                break;\n            case \"ArrowUp\":\n                event.preventDefault();\n                showWithFocus(\"last\");\n                break;\n            // no default\n        }\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [showWithFocus]);\n    return {\n        visible: visible,\n        defaultFocus: defaultFocus,\n        hide: hide,\n        onClick: onClick,\n        onKeyDown: onKeyDown,\n    };\n}\n//# sourceMappingURL=useButtonVisibility.js.map"]},"metadata":{},"sourceType":"module"}