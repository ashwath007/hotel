{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { Children, cloneElement, forwardRef, isValidElement, useCallback, useEffect, useRef, useState } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef } from \"@react-md/utils\";\nimport PanelGroup from \"./PanelGroup\";\nimport { useTabs } from \"./TabsManager\";\nvar block = bem(\"rmd-tab-panels\");\n/**\n * This component allows you to control the visibility of the `TabPanel`\n * components and animating the next and current panels as needed. This works by\n * looping over all the children and getting the current `TabPanel` by the\n * `activeIndex`. This is why the children for this component can only be\n * `TabPanel` and should not be conditional.\n */\n\nvar TabPanels = forwardRef(function TabPanels(_a, forwardedRef) {\n  var className = _a.className,\n      children = _a.children,\n      _b = _a.disableScrollFix,\n      disableScrollFix = _b === void 0 ? false : _b,\n      _c = _a.disableTransition,\n      disableTransition = _c === void 0 ? false : _c,\n      _d = _a.persistent,\n      persistent = _d === void 0 ? false : _d,\n      props = __rest(_a, [\"className\", \"children\", \"disableScrollFix\", \"disableTransition\", \"persistent\"]);\n\n  var _e = useTabs(),\n      tabsId = _e.tabsId,\n      tabs = _e.tabs,\n      activeIndex = _e.activeIndex;\n\n  var prevIndex = useRef(activeIndex);\n\n  var _f = useState({\n    previous: activeIndex,\n    incrementing: true\n  }),\n      _g = _f[0],\n      previous = _g.previous,\n      incrementing = _g.incrementing,\n      setState = _f[1]; // have to set these in refs since changing these might cause mounting\n  // and unmounting in the Transition group component :/ they should only\n  // be re-evaluated when the activeIndex changes.\n\n\n  var transitionable = useRef(!persistent && !disableTransition);\n  var animimatable = useRef(persistent && !disableTransition);\n\n  if (prevIndex.current !== activeIndex) {\n    prevIndex.current = activeIndex;\n    transitionable.current = !persistent && !disableTransition;\n    animimatable.current = persistent && !disableTransition;\n  }\n\n  useEffect(function () {\n    setState(function (_a) {\n      var previous = _a.previous;\n      return {\n        incrementing: previous < activeIndex,\n        previous: disableTransition ? activeIndex : previous\n      };\n    }); // this is for only updating the incrementing state and should not be fired\n    // again if the disableTransition prop is changed\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeIndex]);\n  var onEntered = useCallback(function () {\n    setState(function (_a) {\n      var incrementing = _a.incrementing;\n      return {\n        incrementing: incrementing,\n        previous: activeIndex\n      };\n    });\n  }, [activeIndex]);\n\n  var _h = useEnsuredRef(forwardedRef),\n      ref = _h[0],\n      refHandler = _h[1];\n\n  useEffect(function () {\n    if (!ref.current || disableScrollFix) {\n      return;\n    }\n\n    ref.current.scrollTop = 0; // don't want it to be triggered if only the disableScrollFix prop has changed\n    // since it might be independent from active indexes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [activeIndex]);\n  return React.createElement(\"div\", __assign({}, props, {\n    ref: refHandler,\n    className: cn(block({\n      \"slide-left\": incrementing && !persistent,\n      \"slide-left-persistent\": incrementing && persistent,\n      \"slide-right\": !incrementing\n    }), className)\n  }), React.createElement(PanelGroup, {\n    persistent: persistent,\n    disableTransition: disableTransition\n  }, Children.map(children, function (child, index) {\n    if (!persistent && index !== activeIndex) {\n      return null;\n    }\n\n    if (!isValidElement(child)) {\n      return child;\n    }\n\n    var panel = Children.only(child);\n    var labelledBy = panel.props[\"aria-labelledby\"];\n\n    if (!labelledBy && !panel.props[\"aria-label\"] && tabs[index]) {\n      // generally guaranteed to be defined by this point since the TabsManager\n      // will add ids if missing.\n      labelledBy = tabs[index].id;\n    }\n\n    var key = panel.key || undefined;\n\n    if (index === activeIndex && transitionable.current) {\n      key = \"\" + activeIndex;\n    }\n\n    var animateIn = panel.props.in;\n\n    if (animimatable.current) {\n      // when the persistent flag is in, I have too handle the TransitionGroup\n      // `in` behavior manually based on activeIndex\n      animateIn = index === activeIndex;\n    }\n\n    var hidden = index !== activeIndex;\n\n    if (persistent) {\n      hidden = hidden && index !== previous;\n    }\n\n    return cloneElement(child, {\n      key: key,\n      in: animateIn,\n      id: tabsId + \"-panel-\" + (index + 1),\n      \"aria-labelledby\": labelledBy,\n      hidden: hidden,\n      onEntered: disableTransition ? undefined : onEntered\n    });\n  })));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    TabPanels.propTypes = {\n      className: PropTypes.string,\n      children: PropTypes.node,\n      disableScrollFix: PropTypes.bool,\n      disableTransition: PropTypes.bool,\n      persistent: PropTypes.bool\n    };\n  } catch (e) {}\n}\n\nexport default TabPanels;","map":{"version":3,"sources":["../src/TabPanels.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { Children, cloneElement, forwardRef, isValidElement, useCallback, useEffect, useRef, useState, } from \"react\";\nimport cn from \"classnames\";\nimport { bem, useEnsuredRef } from \"@react-md/utils\";\nimport PanelGroup from \"./PanelGroup\";\nimport { useTabs } from \"./TabsManager\";\nvar block = bem(\"rmd-tab-panels\");\n/**\n * This component allows you to control the visibility of the `TabPanel`\n * components and animating the next and current panels as needed. This works by\n * looping over all the children and getting the current `TabPanel` by the\n * `activeIndex`. This is why the children for this component can only be\n * `TabPanel` and should not be conditional.\n */\nvar TabPanels = forwardRef(function TabPanels(_a, forwardedRef) {\n    var className = _a.className, children = _a.children, _b = _a.disableScrollFix, disableScrollFix = _b === void 0 ? false : _b, _c = _a.disableTransition, disableTransition = _c === void 0 ? false : _c, _d = _a.persistent, persistent = _d === void 0 ? false : _d, props = __rest(_a, [\"className\", \"children\", \"disableScrollFix\", \"disableTransition\", \"persistent\"]);\n    var _e = useTabs(), tabsId = _e.tabsId, tabs = _e.tabs, activeIndex = _e.activeIndex;\n    var prevIndex = useRef(activeIndex);\n    var _f = useState({\n        previous: activeIndex,\n        incrementing: true,\n    }), _g = _f[0], previous = _g.previous, incrementing = _g.incrementing, setState = _f[1];\n    // have to set these in refs since changing these might cause mounting\n    // and unmounting in the Transition group component :/ they should only\n    // be re-evaluated when the activeIndex changes.\n    var transitionable = useRef(!persistent && !disableTransition);\n    var animimatable = useRef(persistent && !disableTransition);\n    if (prevIndex.current !== activeIndex) {\n        prevIndex.current = activeIndex;\n        transitionable.current = !persistent && !disableTransition;\n        animimatable.current = persistent && !disableTransition;\n    }\n    useEffect(function () {\n        setState(function (_a) {\n            var previous = _a.previous;\n            return ({\n                incrementing: previous < activeIndex,\n                previous: disableTransition ? activeIndex : previous,\n            });\n        });\n        // this is for only updating the incrementing state and should not be fired\n        // again if the disableTransition prop is changed\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeIndex]);\n    var onEntered = useCallback(function () {\n        setState(function (_a) {\n            var incrementing = _a.incrementing;\n            return ({ incrementing: incrementing, previous: activeIndex });\n        });\n    }, [activeIndex]);\n    var _h = useEnsuredRef(forwardedRef), ref = _h[0], refHandler = _h[1];\n    useEffect(function () {\n        if (!ref.current || disableScrollFix) {\n            return;\n        }\n        ref.current.scrollTop = 0;\n        // don't want it to be triggered if only the disableScrollFix prop has changed\n        // since it might be independent from active indexes\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [activeIndex]);\n    return (React.createElement(\"div\", __assign({}, props, { ref: refHandler, className: cn(block({\n            \"slide-left\": incrementing && !persistent,\n            \"slide-left-persistent\": incrementing && persistent,\n            \"slide-right\": !incrementing,\n        }), className) }),\n        React.createElement(PanelGroup, { persistent: persistent, disableTransition: disableTransition }, Children.map(children, function (child, index) {\n            if (!persistent && index !== activeIndex) {\n                return null;\n            }\n            if (!isValidElement(child)) {\n                return child;\n            }\n            var panel = Children.only(child);\n            var labelledBy = panel.props[\"aria-labelledby\"];\n            if (!labelledBy && !panel.props[\"aria-label\"] && tabs[index]) {\n                // generally guaranteed to be defined by this point since the TabsManager\n                // will add ids if missing.\n                labelledBy = tabs[index].id;\n            }\n            var key = panel.key || undefined;\n            if (index === activeIndex && transitionable.current) {\n                key = \"\" + activeIndex;\n            }\n            var animateIn = panel.props.in;\n            if (animimatable.current) {\n                // when the persistent flag is in, I have too handle the TransitionGroup\n                // `in` behavior manually based on activeIndex\n                animateIn = index === activeIndex;\n            }\n            var hidden = index !== activeIndex;\n            if (persistent) {\n                hidden = hidden && index !== previous;\n            }\n            return cloneElement(child, {\n                key: key,\n                in: animateIn,\n                id: tabsId + \"-panel-\" + (index + 1),\n                \"aria-labelledby\": labelledBy,\n                hidden: hidden,\n                onEntered: disableTransition ? undefined : onEntered,\n            });\n        }))));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        TabPanels.propTypes = {\n            className: PropTypes.string,\n            children: PropTypes.node,\n            disableScrollFix: PropTypes.bool,\n            disableTransition: PropTypes.bool,\n            persistent: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\nexport default TabPanels;\n//# sourceMappingURL=TabPanels.js.map"]},"metadata":{},"sourceType":"module"}