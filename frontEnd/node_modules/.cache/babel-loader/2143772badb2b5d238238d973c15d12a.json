{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React from \"react\";\nimport TreeItem from \"./TreeItem\";\n\nfunction isElementType(contentComponent) {\n  return typeof contentComponent !== \"undefined\";\n}\n/**\n * A \"reasonable\" default implementation for rendering a tree item that extracts\n * the most used ListItem props and passes them down to the `TreeItem`.\n *\n * This is actually exported from this package so it can be used along with a\n * custom renderer for all items that have `isCustom` enabled.\n *\n * ```tsx\n * const itemRenderer: TreeItemRenderer<MyTreeItem> = (\n *   itemProps,\n *   item,\n *   treeProps\n * ) => {\n *   const { key } = itemProps;\n *   const { isCustom } = item;\n *   if (isCustom) {\n *     return <MyFancyNonTreeItem item={item} key={key} />\n *   }\n *\n *   return defaultTreeItemRenderer(itemProps, item, treeProps);\n * }\n * ```\n *\n * @param itemProps The providied tree item props that should be passed down for\n * keyboard functionality, accessibility, and a `key` for the item.\n * @param item The item itself. This is used to extract any of the common\n * ListItemChildren props.\n * @param treeProps The props for the Tree this item is being rendered in. This\n * is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,\n * `getItemLabel`, and `getItemProps` can be used to render the TreeItem itself.\n * @return a `TreeItem` or a custom `ReactElement`\n */\n\n\nexport default function defaultTreeItemRenderer(itemProps, item, treeProps) {\n  var treeItem = item;\n  var focused = itemProps.focused,\n      selected = itemProps.selected,\n      expanded = itemProps.expanded;\n  var expanderLeft = treeProps.expanderLeft,\n      expanderIcon = treeProps.expanderIcon,\n      labelKey = treeProps.labelKey,\n      getItemLabel = treeProps.getItemLabel,\n      getItemProps = treeProps.getItemProps,\n      linkComponent = treeProps.linkComponent;\n  var leftAddon = treeItem.leftAddon,\n      leftAddonType = treeItem.leftAddonType,\n      leftAddonPosition = treeItem.leftAddonPosition,\n      rightAddon = treeItem.rightAddon,\n      rightAddonType = treeItem.rightAddonType,\n      rightAddonPosition = treeItem.rightAddonPosition,\n      as = treeItem.as,\n      to = treeItem.to,\n      href = treeItem.href;\n  var isLink;\n  var readOnly;\n  var disabled;\n  var className;\n  var liClassName;\n\n  if (typeof treeItem.isLink === \"boolean\") {\n    isLink = treeItem.isLink;\n  }\n\n  if (typeof treeItem.readOnly === \"boolean\") {\n    readOnly = treeItem.readOnly;\n  }\n\n  if (typeof treeItem.disabled === \"boolean\") {\n    disabled = treeItem.disabled;\n  }\n\n  if (typeof treeItem.className === \"string\") {\n    className = treeItem.className;\n  }\n\n  if (typeof treeItem.liClassName === \"string\") {\n    liClassName = treeItem.liClassName;\n  }\n\n  var overrides = getItemProps(__assign(__assign({}, treeItem), {\n    focused: focused,\n    selected: selected,\n    expanded: expanded\n  }));\n  var children = overrides && overrides.children || undefined;\n\n  if (typeof children === \"undefined\") {\n    children = getItemLabel(treeItem, labelKey);\n  }\n\n  var contentComponent;\n\n  if (isElementType(treeItem.contentComponent)) {\n    contentComponent = treeItem.contentComponent;\n  }\n\n  if (isLink !== false && (to || href || isLink)) {\n    contentComponent = contentComponent || linkComponent;\n  }\n\n  return React.createElement(TreeItem, __assign({}, itemProps, {\n    as: as,\n    to: to,\n    href: href,\n    isLink: isLink,\n    contentComponent: contentComponent,\n    readOnly: readOnly,\n    disabled: disabled,\n    leftAddon: leftAddon,\n    leftAddonType: leftAddonType,\n    leftAddonPosition: leftAddonPosition,\n    rightAddon: rightAddon,\n    rightAddonType: rightAddonType,\n    rightAddonPosition: rightAddonPosition,\n    expanderLeft: expanderLeft,\n    expanderIcon: expanderIcon,\n    className: className,\n    liClassName: liClassName\n  }, overrides), children);\n}","map":{"version":3,"sources":["../src/defaultTreeItemRenderer.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React from \"react\";\nimport TreeItem from \"./TreeItem\";\nfunction isElementType(contentComponent) {\n    return typeof contentComponent !== \"undefined\";\n}\n/**\n * A \"reasonable\" default implementation for rendering a tree item that extracts\n * the most used ListItem props and passes them down to the `TreeItem`.\n *\n * This is actually exported from this package so it can be used along with a\n * custom renderer for all items that have `isCustom` enabled.\n *\n * ```tsx\n * const itemRenderer: TreeItemRenderer<MyTreeItem> = (\n *   itemProps,\n *   item,\n *   treeProps\n * ) => {\n *   const { key } = itemProps;\n *   const { isCustom } = item;\n *   if (isCustom) {\n *     return <MyFancyNonTreeItem item={item} key={key} />\n *   }\n *\n *   return defaultTreeItemRenderer(itemProps, item, treeProps);\n * }\n * ```\n *\n * @param itemProps The providied tree item props that should be passed down for\n * keyboard functionality, accessibility, and a `key` for the item.\n * @param item The item itself. This is used to extract any of the common\n * ListItemChildren props.\n * @param treeProps The props for the Tree this item is being rendered in. This\n * is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,\n * `getItemLabel`, and `getItemProps` can be used to render the TreeItem itself.\n * @return a `TreeItem` or a custom `ReactElement`\n */\nexport default function defaultTreeItemRenderer(itemProps, item, treeProps) {\n    var treeItem = item;\n    var focused = itemProps.focused, selected = itemProps.selected, expanded = itemProps.expanded;\n    var expanderLeft = treeProps.expanderLeft, expanderIcon = treeProps.expanderIcon, labelKey = treeProps.labelKey, getItemLabel = treeProps.getItemLabel, getItemProps = treeProps.getItemProps, linkComponent = treeProps.linkComponent;\n    var leftAddon = treeItem.leftAddon, leftAddonType = treeItem.leftAddonType, leftAddonPosition = treeItem.leftAddonPosition, rightAddon = treeItem.rightAddon, rightAddonType = treeItem.rightAddonType, rightAddonPosition = treeItem.rightAddonPosition, as = treeItem.as, to = treeItem.to, href = treeItem.href;\n    var isLink;\n    var readOnly;\n    var disabled;\n    var className;\n    var liClassName;\n    if (typeof treeItem.isLink === \"boolean\") {\n        (isLink = treeItem.isLink);\n    }\n    if (typeof treeItem.readOnly === \"boolean\") {\n        (readOnly = treeItem.readOnly);\n    }\n    if (typeof treeItem.disabled === \"boolean\") {\n        (disabled = treeItem.disabled);\n    }\n    if (typeof treeItem.className === \"string\") {\n        (className = treeItem.className);\n    }\n    if (typeof treeItem.liClassName === \"string\") {\n        (liClassName = treeItem.liClassName);\n    }\n    var overrides = getItemProps(__assign(__assign({}, treeItem), { focused: focused,\n        selected: selected,\n        expanded: expanded }));\n    var children = (overrides && overrides.children) || undefined;\n    if (typeof children === \"undefined\") {\n        children = getItemLabel(treeItem, labelKey);\n    }\n    var contentComponent;\n    if (isElementType(treeItem.contentComponent)) {\n        (contentComponent = treeItem.contentComponent);\n    }\n    if (isLink !== false && (to || href || isLink)) {\n        contentComponent = contentComponent || linkComponent;\n    }\n    return (React.createElement(TreeItem, __assign({}, itemProps, { as: as, to: to, href: href, isLink: isLink, contentComponent: contentComponent, readOnly: readOnly, disabled: disabled, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, expanderLeft: expanderLeft, expanderIcon: expanderIcon, className: className, liClassName: liClassName }, overrides), children));\n}\n//# sourceMappingURL=defaultTreeItemRenderer.js.map"]},"metadata":{},"sourceType":"module"}