{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { List } from \"@react-md/list\";\nimport { Collapse } from \"@react-md/transition\";\n/**\n * The `TreeGroup` component is used to render a tree item's nested items\n * whenever the `expanded` prop is `true`. It uses the `Collapse` component\n * behind the scenes to animate in-and-out of view and will fully unrender when\n * the `expanded` prop is `false`.\n */\n\nvar TreeGroup = forwardRef(function TreeGroup(_a, ref) {\n  var style = _a.style,\n      className = _a.className,\n      collapsed = _a.collapsed,\n      minHeight = _a.minHeight,\n      minPaddingBottom = _a.minPaddingBottom,\n      minPaddingTop = _a.minPaddingTop,\n      timeout = _a.timeout,\n      onEnter = _a.onEnter,\n      onEntering = _a.onEntering,\n      onEntered = _a.onEntered,\n      onExit = _a.onExit,\n      onExiting = _a.onExiting,\n      onExited = _a.onExited,\n      children = _a.children,\n      temporary = _a.temporary,\n      props = __rest(_a, [\"style\", \"className\", \"collapsed\", \"minHeight\", \"minPaddingBottom\", \"minPaddingTop\", \"timeout\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"children\", \"temporary\"]);\n\n  return React.createElement(Collapse, {\n    style: style,\n    className: cn(\"rmd-tree-group\", className),\n    collapsed: collapsed,\n    minHeight: minHeight,\n    minPaddingBottom: minPaddingBottom,\n    minPaddingTop: minPaddingTop,\n    timeout: timeout,\n    onEnter: onEnter,\n    onEntering: onEntering,\n    onEntered: onEntered,\n    onExit: onExit,\n    onExiting: onExiting,\n    onExited: onExited,\n    temporary: temporary\n  }, React.createElement(List, __assign({}, props, {\n    ref: ref,\n    role: \"group\"\n  }), children));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    TreeGroup.propTypes = {\n      style: PropTypes.object,\n      className: PropTypes.string,\n      collapsed: PropTypes.bool.isRequired,\n      minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      minPaddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      minPaddingBottom: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      timeout: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n        appear: PropTypes.number,\n        enter: PropTypes.number,\n        exit: PropTypes.number\n      })]),\n      temporary: PropTypes.bool,\n      children: PropTypes.node,\n      onEnter: PropTypes.func,\n      onEntering: PropTypes.func,\n      onEntered: PropTypes.func,\n      onExit: PropTypes.func,\n      onExiting: PropTypes.func,\n      onExited: PropTypes.func\n    };\n  } catch (e) {}\n}\n\nexport default TreeGroup;","map":{"version":3,"sources":["../src/TreeGroup.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { List } from \"@react-md/list\";\nimport { Collapse } from \"@react-md/transition\";\n/**\n * The `TreeGroup` component is used to render a tree item's nested items\n * whenever the `expanded` prop is `true`. It uses the `Collapse` component\n * behind the scenes to animate in-and-out of view and will fully unrender when\n * the `expanded` prop is `false`.\n */\nvar TreeGroup = forwardRef(function TreeGroup(_a, ref) {\n    var style = _a.style, className = _a.className, collapsed = _a.collapsed, minHeight = _a.minHeight, minPaddingBottom = _a.minPaddingBottom, minPaddingTop = _a.minPaddingTop, timeout = _a.timeout, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, children = _a.children, temporary = _a.temporary, props = __rest(_a, [\"style\", \"className\", \"collapsed\", \"minHeight\", \"minPaddingBottom\", \"minPaddingTop\", \"timeout\", \"onEnter\", \"onEntering\", \"onEntered\", \"onExit\", \"onExiting\", \"onExited\", \"children\", \"temporary\"]);\n    return (React.createElement(Collapse, { style: style, className: cn(\"rmd-tree-group\", className), collapsed: collapsed, minHeight: minHeight, minPaddingBottom: minPaddingBottom, minPaddingTop: minPaddingTop, timeout: timeout, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, temporary: temporary },\n        React.createElement(List, __assign({}, props, { ref: ref, role: \"group\" }), children)));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        TreeGroup.propTypes = {\n            style: PropTypes.object,\n            className: PropTypes.string,\n            collapsed: PropTypes.bool.isRequired,\n            minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            minPaddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            minPaddingBottom: PropTypes.oneOfType([\n                PropTypes.string,\n                PropTypes.number,\n            ]),\n            timeout: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.shape({\n                    appear: PropTypes.number,\n                    enter: PropTypes.number,\n                    exit: PropTypes.number,\n                }),\n            ]),\n            temporary: PropTypes.bool,\n            children: PropTypes.node,\n            onEnter: PropTypes.func,\n            onEntering: PropTypes.func,\n            onEntered: PropTypes.func,\n            onExit: PropTypes.func,\n            onExiting: PropTypes.func,\n            onExited: PropTypes.func,\n        };\n    }\n    catch (e) { }\n}\nexport default TreeGroup;\n//# sourceMappingURL=TreeGroup.js.map"]},"metadata":{},"sourceType":"module"}