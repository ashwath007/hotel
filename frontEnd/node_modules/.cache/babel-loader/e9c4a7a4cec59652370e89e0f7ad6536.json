{"ast":null,"code":"import { createRef, useCallback, useMemo, useState } from \"react\";\nimport { loop } from \"@react-md/utils\";\n/**\n * @private\n */\n\nvar attemptFocus = function (index, panels) {\n  var _a;\n\n  var panel = (_a = panels[index]) === null || _a === void 0 ? void 0 : _a.headerRef.current;\n\n  if (panel) {\n    panel.focus();\n  }\n};\n/**\n * This hook is used to control the expansion of a list of panels along with\n * providing some of the required props for each panel. This hook will provide\n * an ordered list of:\n *\n * - the list of panel props that include the `id`, `key`, `expanded`, and\n *   `onExpandChange`.\n * - a keydown event handler to pass to a parent component (normally the\n *   ExpansionList) to allow keyboard movement with the arrow keys, and home+end\n *   keys. This should only be used when there are multiple panels.\n * - the current list of panel ids that are expanded\n * - the React setState dispatcher for controlling the expanded list of ids\n *   manually if desired\n * - a function to create a handler for toggling the expansion of a specific\n *   panel\n *\n * This hook is usually used to control a list of expansion panels, but can also\n * control a single panel if desired.\n *\n * Examples:\n *\n * Single panel:\n *\n * ```tsx\n * const [panels] = usePanels({ count: 1, idPrefix: \"my-panel\" });\n * // since the count is one, it'll just be a list of only one panel props\n * const [panelProps] = panels;\n *\n * return (\n *   <ExpansionPanel {...panelProps}>\n *     Content within the panel...\n *   </ExpansionPanel>\n * );\n * ```\n *\n * Multiple Panels:\n *\n * ```tsx\n * const [panels, onKeyDown] = usePanels({ count: 3, idPrefix: \"panel-list\" });\n *\n * const [panel1Props, panel2Props, panel3Props] = panels;\n *\n * return (\n *   <ExpansionList onKeyDown={onKeyDown}>\n *     <ExpansionPanel {...panel1Props}>\n *       Panel 1 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel2Props}>\n *       Panel 2 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel3Props}>\n *       Panel 3 Content...\n *     </ExpansionPanel>\n *   </ExpansionList>\n * );\n * ```\n */\n\n\nexport default function usePanels(_a) {\n  var idPrefix = _a.idPrefix,\n      count = _a.count,\n      _b = _a.multiple,\n      multiple = _b === void 0 ? false : _b,\n      _c = _a.preventAllClosed,\n      preventAllClosed = _c === void 0 ? false : _c,\n      defaultExpandedIndex = _a.defaultExpandedIndex;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (count < 1) {\n      throw new RangeError(\"The `count` must be greater than `0`\");\n    }\n\n    if (typeof defaultExpandedIndex === \"number\" && defaultExpandedIndex >= count) {\n      throw new RangeError(\"The `defaultExpandedIndex` must be less than or equal to the `count`\");\n    }\n\n    if (typeof defaultExpandedIndex === \"number\" && defaultExpandedIndex < -1) {\n      throw new RangeError(\"The `defaultExpandedIndex` must be greater than or equal to `-1`\");\n    }\n\n    if (Array.isArray(defaultExpandedIndex)) {\n      var greater = defaultExpandedIndex.filter(function (i) {\n        return i > count;\n      });\n\n      if (greater.length) {\n        throw new RangeError(\"The `defaultExpandedIndex` array must contain numbers less than the `count`\");\n      }\n\n      var lessThan = defaultExpandedIndex.filter(function (i) {\n        return i < 0;\n      });\n\n      if (lessThan.length) {\n        throw new RangeError(\"The `defaultExpandedIndex` array must contain numbers greater than or equal to `0`\");\n      }\n    }\n  }\n\n  var panels = useMemo(function () {\n    return Array.from({\n      length: count\n    }, function (_, i) {\n      return {\n        id: idPrefix + \"-\" + (i + 1),\n        headerRef: createRef()\n      };\n    });\n  }, [idPrefix, count]);\n\n  var _d = useState(function () {\n    if (typeof defaultExpandedIndex === \"undefined\") {\n      return preventAllClosed ? [panels[0].id] : [];\n    }\n\n    if (typeof defaultExpandedIndex === \"number\") {\n      return defaultExpandedIndex === -1 ? panels.map(function (_a) {\n        var id = _a.id;\n        return id;\n      }) : [panels[Math.min(defaultExpandedIndex, panels.length)].id];\n    }\n\n    return panels.filter(function (_, i) {\n      return defaultExpandedIndex.includes(i);\n    }).map(function (_a) {\n      var id = _a.id;\n      return id;\n    });\n  }),\n      expandedIds = _d[0],\n      setExpandedIds = _d[1];\n\n  var createExpandClick = function (panelId) {\n    return function () {\n      setExpandedIds(function (prevIds) {\n        var i = prevIds.indexOf(panelId);\n\n        if (!multiple) {\n          if (prevIds[0] === panelId && prevIds.length === 1) {\n            return preventAllClosed ? prevIds : [];\n          }\n\n          return [panelId];\n        }\n\n        var nextSelectedIds = prevIds.slice();\n\n        if (i === -1) {\n          nextSelectedIds.push(panelId);\n        } else {\n          nextSelectedIds.splice(i, 1);\n        }\n\n        if (preventAllClosed && nextSelectedIds.length === 0) {\n          return [panelId];\n        }\n\n        return nextSelectedIds;\n      });\n    };\n  };\n\n  var previousExpanded = false;\n  var panelPropList = panels.map(function (_a, i) {\n    var id = _a.id,\n        headerRef = _a.headerRef;\n    var expanded = expandedIds.includes(id);\n    var marginTop = i > 0 && (expanded || previousExpanded);\n    previousExpanded = expanded;\n    return {\n      id: id,\n      disabled: expanded && preventAllClosed && expandedIds.length === 1,\n      expanded: expanded,\n      headerRef: headerRef,\n      marginTop: marginTop,\n      onExpandClick: createExpandClick(id)\n    };\n  });\n  var onKeyDown = useCallback(function (event) {\n    if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n      return;\n    }\n\n    var key = event.key;\n    var increment = key === \"ArrowDown\";\n    var decrement = key === \"ArrowUp\";\n    var jumpToFirst = key === \"Home\";\n    var jumpToLast = key === \"End\";\n\n    if (!increment && !decrement && !jumpToFirst && !jumpToLast) {\n      return;\n    }\n\n    var currentIndex = panels.findIndex(function (_a) {\n      var headerRef = _a.headerRef;\n      return event.target === headerRef.current;\n    });\n\n    if (currentIndex === -1) {\n      return;\n    } // don't want page scroll behavior\n\n\n    event.preventDefault();\n\n    if (jumpToFirst) {\n      attemptFocus(0, panels);\n      return;\n    }\n\n    if (jumpToLast) {\n      attemptFocus(panels.length - 1, panels);\n      return;\n    }\n\n    attemptFocus(loop(currentIndex, panels.length - 1, increment), panels);\n  }, [panels]);\n  return [panelPropList, onKeyDown, expandedIds, setExpandedIds, createExpandClick];\n}","map":{"version":3,"sources":["../src/usePanels.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { createRef, useCallback, useMemo, useState, } from \"react\";\nimport { loop } from \"@react-md/utils\";\n/**\n * @private\n */\nvar attemptFocus = function (index, panels) {\n    var _a;\n    var panel = (_a = panels[index]) === null || _a === void 0 ? void 0 : _a.headerRef.current;\n    if (panel) {\n        panel.focus();\n    }\n};\n/**\n * This hook is used to control the expansion of a list of panels along with\n * providing some of the required props for each panel. This hook will provide\n * an ordered list of:\n *\n * - the list of panel props that include the `id`, `key`, `expanded`, and\n *   `onExpandChange`.\n * - a keydown event handler to pass to a parent component (normally the\n *   ExpansionList) to allow keyboard movement with the arrow keys, and home+end\n *   keys. This should only be used when there are multiple panels.\n * - the current list of panel ids that are expanded\n * - the React setState dispatcher for controlling the expanded list of ids\n *   manually if desired\n * - a function to create a handler for toggling the expansion of a specific\n *   panel\n *\n * This hook is usually used to control a list of expansion panels, but can also\n * control a single panel if desired.\n *\n * Examples:\n *\n * Single panel:\n *\n * ```tsx\n * const [panels] = usePanels({ count: 1, idPrefix: \"my-panel\" });\n * // since the count is one, it'll just be a list of only one panel props\n * const [panelProps] = panels;\n *\n * return (\n *   <ExpansionPanel {...panelProps}>\n *     Content within the panel...\n *   </ExpansionPanel>\n * );\n * ```\n *\n * Multiple Panels:\n *\n * ```tsx\n * const [panels, onKeyDown] = usePanels({ count: 3, idPrefix: \"panel-list\" });\n *\n * const [panel1Props, panel2Props, panel3Props] = panels;\n *\n * return (\n *   <ExpansionList onKeyDown={onKeyDown}>\n *     <ExpansionPanel {...panel1Props}>\n *       Panel 1 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel2Props}>\n *       Panel 2 Content...\n *     </ExpansionPanel>\n *     <ExpansionPanel {...panel3Props}>\n *       Panel 3 Content...\n *     </ExpansionPanel>\n *   </ExpansionList>\n * );\n * ```\n */\nexport default function usePanels(_a) {\n    var idPrefix = _a.idPrefix, count = _a.count, _b = _a.multiple, multiple = _b === void 0 ? false : _b, _c = _a.preventAllClosed, preventAllClosed = _c === void 0 ? false : _c, defaultExpandedIndex = _a.defaultExpandedIndex;\n    if (process.env.NODE_ENV !== \"production\") {\n        if (count < 1) {\n            throw new RangeError(\"The `count` must be greater than `0`\");\n        }\n        if (typeof defaultExpandedIndex === \"number\" &&\n            defaultExpandedIndex >= count) {\n            throw new RangeError(\"The `defaultExpandedIndex` must be less than or equal to the `count`\");\n        }\n        if (typeof defaultExpandedIndex === \"number\" && defaultExpandedIndex < -1) {\n            throw new RangeError(\"The `defaultExpandedIndex` must be greater than or equal to `-1`\");\n        }\n        if (Array.isArray(defaultExpandedIndex)) {\n            var greater = defaultExpandedIndex.filter(function (i) { return i > count; });\n            if (greater.length) {\n                throw new RangeError(\"The `defaultExpandedIndex` array must contain numbers less than the `count`\");\n            }\n            var lessThan = defaultExpandedIndex.filter(function (i) { return i < 0; });\n            if (lessThan.length) {\n                throw new RangeError(\"The `defaultExpandedIndex` array must contain numbers greater than or equal to `0`\");\n            }\n        }\n    }\n    var panels = useMemo(function () {\n        return Array.from({ length: count }, function (_, i) { return ({\n            id: idPrefix + \"-\" + (i + 1),\n            headerRef: createRef(),\n        }); });\n    }, [idPrefix, count]);\n    var _d = useState(function () {\n        if (typeof defaultExpandedIndex === \"undefined\") {\n            return preventAllClosed ? [panels[0].id] : [];\n        }\n        if (typeof defaultExpandedIndex === \"number\") {\n            return defaultExpandedIndex === -1\n                ? panels.map(function (_a) {\n                    var id = _a.id;\n                    return id;\n                })\n                : [panels[Math.min(defaultExpandedIndex, panels.length)].id];\n        }\n        return panels\n            .filter(function (_, i) { return defaultExpandedIndex.includes(i); })\n            .map(function (_a) {\n            var id = _a.id;\n            return id;\n        });\n    }), expandedIds = _d[0], setExpandedIds = _d[1];\n    var createExpandClick = function (panelId) { return function () {\n        setExpandedIds(function (prevIds) {\n            var i = prevIds.indexOf(panelId);\n            if (!multiple) {\n                if (prevIds[0] === panelId && prevIds.length === 1) {\n                    return preventAllClosed ? prevIds : [];\n                }\n                return [panelId];\n            }\n            var nextSelectedIds = prevIds.slice();\n            if (i === -1) {\n                nextSelectedIds.push(panelId);\n            }\n            else {\n                nextSelectedIds.splice(i, 1);\n            }\n            if (preventAllClosed && nextSelectedIds.length === 0) {\n                return [panelId];\n            }\n            return nextSelectedIds;\n        });\n    }; };\n    var previousExpanded = false;\n    var panelPropList = panels.map(function (_a, i) {\n        var id = _a.id, headerRef = _a.headerRef;\n        var expanded = expandedIds.includes(id);\n        var marginTop = i > 0 && (expanded || previousExpanded);\n        previousExpanded = expanded;\n        return {\n            id: id,\n            disabled: expanded && preventAllClosed && expandedIds.length === 1,\n            expanded: expanded,\n            headerRef: headerRef,\n            marginTop: marginTop,\n            onExpandClick: createExpandClick(id),\n        };\n    });\n    var onKeyDown = useCallback(function (event) {\n        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {\n            return;\n        }\n        var key = event.key;\n        var increment = key === \"ArrowDown\";\n        var decrement = key === \"ArrowUp\";\n        var jumpToFirst = key === \"Home\";\n        var jumpToLast = key === \"End\";\n        if (!increment && !decrement && !jumpToFirst && !jumpToLast) {\n            return;\n        }\n        var currentIndex = panels.findIndex(function (_a) {\n            var headerRef = _a.headerRef;\n            return event.target === headerRef.current;\n        });\n        if (currentIndex === -1) {\n            return;\n        }\n        // don't want page scroll behavior\n        event.preventDefault();\n        if (jumpToFirst) {\n            attemptFocus(0, panels);\n            return;\n        }\n        if (jumpToLast) {\n            attemptFocus(panels.length - 1, panels);\n            return;\n        }\n        attemptFocus(loop(currentIndex, panels.length - 1, increment), panels);\n    }, [panels]);\n    return [\n        panelPropList,\n        onKeyDown,\n        expandedIds,\n        setExpandedIds,\n        createExpandClick,\n    ];\n}\n//# sourceMappingURL=usePanels.js.map"]},"metadata":{},"sourceType":"module"}