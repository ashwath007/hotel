{"ast":null,"code":"import React, { createContext, useContext } from \"react\";\nimport useModeClassName from \"./useModeClassName\";\nimport useModeDetection from \"./useModeDetection\";\nvar InteractionMode = createContext(\"mouse\");\nvar ParentContext = createContext(false);\n/**\n * Gets the current interaction mode of the user.\n */\n\nexport function useUserInteractionMode() {\n  return useContext(InteractionMode);\n}\n/**\n * Checks if the provided user interaction mode matches the current interaction\n * mode within the app.\n *\n * @param mode The mode to check against.\n * @return true if the mode matches.\n */\n\nexport function useIsUserInteractionMode(mode) {\n  return useUserInteractionMode() === mode;\n}\n/**\n * A component that should be mounted once in your app near the top of the tree\n * to determine the current interaction mode for your app.\n */\n\nexport function InteractionModeListener(_a) {\n  var children = _a.children;\n\n  if (useContext(ParentContext)) {\n    throw new Error(\"Nested `InteractionModeListener` components\");\n  }\n\n  var mode = useModeDetection();\n  useModeClassName(mode);\n  return React.createElement(InteractionMode.Provider, {\n    value: mode\n  }, React.createElement(ParentContext.Provider, {\n    value: true\n  }, children));\n}\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    InteractionModeListener.propTypes = {\n      children: PropTypes.node.isRequired\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../../src/interaction/InteractionMode.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IACE,aADF,EAIE,UAJF,QAKO,OALP;AAOA,OAAO,gBAAP,MAA6B,oBAA7B;AACA,OAAO,gBAAP,MAAsD,oBAAtD;AAEA,IAAM,eAAe,GAAG,aAAa,CAAsB,OAAtB,CAArC;AACA,IAAM,aAAa,GAAG,aAAa,CAAC,KAAD,CAAnC;AAEA;;;;AAGA,OAAM,SAAU,sBAAV,GAAgC;AACpC,SAAO,UAAU,CAAC,eAAD,CAAjB;AACD;AAED;;;;;;;;AAOA,OAAM,SAAU,wBAAV,CAAmC,IAAnC,EAA4D;AAChE,SAAO,sBAAsB,OAAO,IAApC;AACD;AAMD;;;;;AAIA,OAAM,SAAU,uBAAV,CAAkC,EAAlC,EAEyB;MAD7B,QAAQ,GAAA,EAAA,CAAA,Q;;AAER,MAAI,UAAU,CAAC,aAAD,CAAd,EAA+B;AAC7B,UAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAM,IAAI,GAAG,gBAAgB,EAA7B;AACA,EAAA,gBAAgB,CAAC,IAAD,CAAhB;AAEA,SACE,KAAA,CAAA,aAAA,CAAC,eAAe,CAAC,QAAjB,EAAyB;AAAC,IAAA,KAAK,EAAE;AAAR,GAAzB,EACE,KAAA,CAAA,aAAA,CAAC,aAAa,CAAC,QAAf,EAAuB;AAAC,IAAA,KAAK,EAAA;AAAN,GAAvB,EAA+B,QAA/B,CADF,CADF;AAKD;;AAED,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,uBAAuB,CAAC,SAAxB,GAAoC;AAClC,MAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe;AADS,KAApC;AAGD,GAND,CAME,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["import React, { createContext, useContext, } from \"react\";\nimport useModeClassName from \"./useModeClassName\";\nimport useModeDetection from \"./useModeDetection\";\nvar InteractionMode = createContext(\"mouse\");\nvar ParentContext = createContext(false);\n/**\n * Gets the current interaction mode of the user.\n */\nexport function useUserInteractionMode() {\n    return useContext(InteractionMode);\n}\n/**\n * Checks if the provided user interaction mode matches the current interaction\n * mode within the app.\n *\n * @param mode The mode to check against.\n * @return true if the mode matches.\n */\nexport function useIsUserInteractionMode(mode) {\n    return useUserInteractionMode() === mode;\n}\n/**\n * A component that should be mounted once in your app near the top of the tree\n * to determine the current interaction mode for your app.\n */\nexport function InteractionModeListener(_a) {\n    var children = _a.children;\n    if (useContext(ParentContext)) {\n        throw new Error(\"Nested `InteractionModeListener` components\");\n    }\n    var mode = useModeDetection();\n    useModeClassName(mode);\n    return (React.createElement(InteractionMode.Provider, { value: mode },\n        React.createElement(ParentContext.Provider, { value: true }, children)));\n}\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        InteractionModeListener.propTypes = {\n            children: PropTypes.node.isRequired,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=InteractionMode.js.map"]},"metadata":{},"sourceType":"module"}