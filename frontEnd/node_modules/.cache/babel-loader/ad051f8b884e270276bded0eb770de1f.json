{"ast":null,"code":"import useAppSize from \"./useAppSize\";\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\n\nexport var MobileOnly = function (props) {\n  var _a = props,\n      children = _a.children,\n      fallback = _a.fallback;\n\n  var _b = useAppSize(),\n      isPhone = _b.isPhone,\n      isTablet = _b.isTablet;\n\n  if (isPhone || isTablet) {\n    return children;\n  }\n\n  return fallback;\n};\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\n\nexport var PhoneOnly = function (props) {\n  var _a = props,\n      children = _a.children,\n      fallback = _a.fallback;\n  var isPhone = useAppSize().isPhone;\n\n  if (isPhone) {\n    return children;\n  }\n\n  return fallback;\n};\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\n\nexport var TabletOnly = function (props) {\n  var _a = props,\n      children = _a.children,\n      fallback = _a.fallback;\n  var isTablet = useAppSize().isTablet;\n\n  if (isTablet) {\n    return children;\n  }\n\n  return fallback;\n};\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\n\nexport var DesktopOnly = function (props) {\n  var _a = props,\n      children = _a.children,\n      fallback = _a.fallback;\n  var isDesktop = useAppSize().isDesktop;\n\n  if (isDesktop) {\n    return children;\n  }\n\n  return fallback;\n};\nvar defaultProps = {\n  fallback: null\n};\nMobileOnly.defaultProps = defaultProps;\nPhoneOnly.defaultProps = defaultProps;\nTabletOnly.defaultProps = defaultProps;\nDesktopOnly.defaultProps = defaultProps;","map":{"version":3,"sources":["../../src/sizing/MediaOnly.tsx"],"names":[],"mappings":"AAEA,OAAO,UAAP,MAAuB,cAAvB;AAiBA;;;;;;AAKA,OAAO,IAAM,UAAU,GAAuB,UAAC,KAAD,EAAM;AAC5C,MAAA,EAAA,GAAyB,KAAzB;AAAA,MAAE,QAAQ,GAAA,EAAA,CAAA,QAAV;AAAA,MAAY,QAAQ,GAAA,EAAA,CAAA,QAApB;;AACA,MAAA,EAAA,GAAwB,UAAU,EAAlC;AAAA,MAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,MAAW,QAAQ,GAAA,EAAA,CAAA,QAAnB;;AACN,MAAI,OAAO,IAAI,QAAf,EAAyB;AACvB,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD,CARM;AAUP;;;;;AAIA,OAAO,IAAM,SAAS,GAAuB,UAAC,KAAD,EAAM;AAC3C,MAAA,EAAA,GAAyB,KAAzB;AAAA,MAAE,QAAQ,GAAA,EAAA,CAAA,QAAV;AAAA,MAAY,QAAQ,GAAA,EAAA,CAAA,QAApB;AACE,MAAA,OAAO,GAAK,UAAU,GAAf,OAAP;;AACR,MAAI,OAAJ,EAAa;AACX,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD,CARM;AAUP;;;;;AAIA,OAAO,IAAM,UAAU,GAAuB,UAAC,KAAD,EAAM;AAC5C,MAAA,EAAA,GAAyB,KAAzB;AAAA,MAAE,QAAQ,GAAA,EAAA,CAAA,QAAV;AAAA,MAAY,QAAQ,GAAA,EAAA,CAAA,QAApB;AACE,MAAA,QAAQ,GAAK,UAAU,GAAf,QAAR;;AACR,MAAI,QAAJ,EAAc;AACZ,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD,CARM;AAUP;;;;;AAIA,OAAO,IAAM,WAAW,GAAuB,UAAC,KAAD,EAAM;AAC7C,MAAA,EAAA,GAAyB,KAAzB;AAAA,MAAE,QAAQ,GAAA,EAAA,CAAA,QAAV;AAAA,MAAY,QAAQ,GAAA,EAAA,CAAA,QAApB;AACE,MAAA,SAAS,GAAK,UAAU,GAAf,SAAT;;AACR,MAAI,SAAJ,EAAe;AACb,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD,CARM;AAUP,IAAM,YAAY,GAAiB;AACjC,EAAA,QAAQ,EAAE;AADuB,CAAnC;AAIA,UAAU,CAAC,YAAX,GAA0B,YAA1B;AACA,SAAS,CAAC,YAAV,GAAyB,YAAzB;AACA,UAAU,CAAC,YAAX,GAA0B,YAA1B;AACA,WAAW,CAAC,YAAZ,GAA2B,YAA3B","sourceRoot":"","sourcesContent":["import useAppSize from \"./useAppSize\";\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\nexport var MobileOnly = function (props) {\n    var _a = props, children = _a.children, fallback = _a.fallback;\n    var _b = useAppSize(), isPhone = _b.isPhone, isTablet = _b.isTablet;\n    if (isPhone || isTablet) {\n        return children;\n    }\n    return fallback;\n};\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\nexport var PhoneOnly = function (props) {\n    var _a = props, children = _a.children, fallback = _a.fallback;\n    var isPhone = useAppSize().isPhone;\n    if (isPhone) {\n        return children;\n    }\n    return fallback;\n};\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\nexport var TabletOnly = function (props) {\n    var _a = props, children = _a.children, fallback = _a.fallback;\n    var isTablet = useAppSize().isTablet;\n    if (isTablet) {\n        return children;\n    }\n    return fallback;\n};\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\nexport var DesktopOnly = function (props) {\n    var _a = props, children = _a.children, fallback = _a.fallback;\n    var isDesktop = useAppSize().isDesktop;\n    if (isDesktop) {\n        return children;\n    }\n    return fallback;\n};\nvar defaultProps = {\n    fallback: null,\n};\nMobileOnly.defaultProps = defaultProps;\nPhoneOnly.defaultProps = defaultProps;\nTabletOnly.defaultProps = defaultProps;\nDesktopOnly.defaultProps = defaultProps;\n//# sourceMappingURL=MediaOnly.js.map"]},"metadata":{},"sourceType":"module"}