{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-avatar\");\n/**\n * An `Avatar` is generally used to represent objects or people within your app.\n * The avatar can consist of an image, an icon, or some text to display. When\n * the avatar is not an image, different themes can be applied to make the\n * avatar more unique.\n */\n\nvar Avatar = forwardRef(function Avatar(_a, ref) {\n  var _b;\n\n  var className = _a.className,\n      children = _a.children,\n      src = _a.src,\n      _c = _a.alt,\n      alt = _c === void 0 ? \"\" : _c,\n      _d = _a.color,\n      color = _d === void 0 ? \"\" : _d,\n      imgProps = _a.imgProps,\n      referrerPolicy = _a.referrerPolicy,\n      props = __rest(_a, [\"className\", \"children\", \"src\", \"alt\", \"color\", \"imgProps\", \"referrerPolicy\"]);\n\n  var img;\n\n  if (src || imgProps) {\n    img = React.createElement(\"img\", __assign({\n      src: src,\n      alt: alt,\n      referrerPolicy: referrerPolicy\n    }, imgProps, {\n      className: cn(block(\"image\"), imgProps === null || imgProps === void 0 ? void 0 : imgProps.className)\n    }));\n  }\n\n  return React.createElement(\"span\", __assign({}, props, {\n    ref: ref,\n    className: cn(block((_b = {}, _b[color] = color, _b)), className)\n  }), img, children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    Avatar.propTypes = {\n      alt: PropTypes.string,\n      src: PropTypes.string,\n      color: PropTypes.string,\n      className: PropTypes.string,\n      children: PropTypes.node,\n      // Note: The MDN website has a lot more values, but this is what Typescript\n      // says is valid at the time of writing this\n      referrerPolicy: PropTypes.oneOf([\"no-referrer\", \"origin\", \"unsafe-url\"]),\n      imgProps: PropTypes.object\n    };\n  } catch (e) {}\n}\n\nexport default Avatar;","map":{"version":3,"sources":["../src/Avatar.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAqE,OAArE;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,GAAT,QAAkC,iBAAlC;AAwDA,IAAM,KAAK,GAAG,GAAG,CAAC,YAAD,CAAjB;AAEA;;;;;;;AAMA,IAAM,MAAM,GAAG,UAAU,CAA+B,SAAS,MAAT,CACtD,EADsD,EAWtD,GAXsD,EAWnD;;;AATD,MAAA,SAAS,GAAA,EAAA,CAAA,SAAT;AAAA,MACA,QAAQ,GAAA,EAAA,CAAA,QADR;AAAA,MAEA,GAAG,GAAA,EAAA,CAAA,GAFH;AAAA,MAGA,EAAA,GAAA,EAAA,CAAA,GAHA;AAAA,MAGA,GAAG,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAHR;AAAA,MAIA,EAAA,GAAA,EAAA,CAAA,KAJA;AAAA,MAIA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAJV;AAAA,MAKA,QAAQ,GAAA,EAAA,CAAA,QALR;AAAA,MAMA,cAAc,GAAA,EAAA,CAAA,cANd;AAAA,MAOG,KAAK,GAAA,MAAA,CAAA,EAAA,EARV,CAAA,WAAA,EAAA,UAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,UAAA,EAAA,gBAAA,CAQU,CAPR;;AAWF,MAAI,GAAJ;;AACA,MAAI,GAAG,IAAI,QAAX,EAAqB;AACnB,IAAA,GAAG,GACD,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AACE,MAAA,GAAG,EAAE,GADP;AAEE,MAAA,GAAG,EAAE,GAFP;AAGE,MAAA,cAAc,EAAE;AAHlB,KAAA,EAIM,QAJN,EAIc;AACZ,MAAA,SAAS,EAAE,EAAE,CAAC,KAAK,CAAC,OAAD,CAAN,EAAiB,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,SAA3B;AADD,KAJd,CAAA,CADF;AASD;;AAED,SACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA,EAAA,EACM,KADN,EACW;AACT,IAAA,GAAG,EAAE,GADI;AAET,IAAA,SAAS,EAAE,EAAE,CAAC,KAAK,EAAA,EAAA,GAAA,EAAA,EAAG,EAAA,CAAC,KAAD,CAAA,GAAS,KAAZ,EAAiB,EAAjB,EAAN,EAA4B,SAA5B;AAFJ,GADX,CAAA,EAKG,GALH,EAMG,QANH,CADF;AAUD,CApCwB,CAAzB;;AAsCA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,MAAM,CAAC,SAAP,GAAmB;AACjB,MAAA,GAAG,EAAE,SAAS,CAAC,MADE;AAEjB,MAAA,GAAG,EAAE,SAAS,CAAC,MAFE;AAGjB,MAAA,KAAK,EAAE,SAAS,CAAC,MAHA;AAIjB,MAAA,SAAS,EAAE,SAAS,CAAC,MAJJ;AAKjB,MAAA,QAAQ,EAAE,SAAS,CAAC,IALH;AAMjB;AACA;AACA,MAAA,cAAc,EAAE,SAAS,CAAC,KAAV,CAAgB,CAAC,aAAD,EAAgB,QAAhB,EAA0B,YAA1B,CAAhB,CARC;AASjB,MAAA,QAAQ,EAAE,SAAS,CAAC;AATH,KAAnB;AAWD,GAdD,CAcE,OAAO,CAAP,EAAU,CAAE;AACf;;AAED,eAAe,MAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { bem } from \"@react-md/utils\";\nvar block = bem(\"rmd-avatar\");\n/**\n * An `Avatar` is generally used to represent objects or people within your app.\n * The avatar can consist of an image, an icon, or some text to display. When\n * the avatar is not an image, different themes can be applied to make the\n * avatar more unique.\n */\nvar Avatar = forwardRef(function Avatar(_a, ref) {\n    var _b;\n    var className = _a.className, children = _a.children, src = _a.src, _c = _a.alt, alt = _c === void 0 ? \"\" : _c, _d = _a.color, color = _d === void 0 ? \"\" : _d, imgProps = _a.imgProps, referrerPolicy = _a.referrerPolicy, props = __rest(_a, [\"className\", \"children\", \"src\", \"alt\", \"color\", \"imgProps\", \"referrerPolicy\"]);\n    var img;\n    if (src || imgProps) {\n        img = (React.createElement(\"img\", __assign({ src: src, alt: alt, referrerPolicy: referrerPolicy }, imgProps, { className: cn(block(\"image\"), imgProps === null || imgProps === void 0 ? void 0 : imgProps.className) })));\n    }\n    return (React.createElement(\"span\", __assign({}, props, { ref: ref, className: cn(block((_b = {}, _b[color] = color, _b)), className) }),\n        img,\n        children));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        Avatar.propTypes = {\n            alt: PropTypes.string,\n            src: PropTypes.string,\n            color: PropTypes.string,\n            className: PropTypes.string,\n            children: PropTypes.node,\n            // Note: The MDN website has a lot more values, but this is what Typescript\n            // says is valid at the time of writing this\n            referrerPolicy: PropTypes.oneOf([\"no-referrer\", \"origin\", \"unsafe-url\"]),\n            imgProps: PropTypes.object,\n        };\n    }\n    catch (e) { }\n}\nexport default Avatar;\n//# sourceMappingURL=Avatar.js.map"]},"metadata":{},"sourceType":"module"}