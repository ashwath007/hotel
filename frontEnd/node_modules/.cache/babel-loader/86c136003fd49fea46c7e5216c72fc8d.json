{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Checkbox } from \"@react-md/form\";\nimport TableCell from \"./TableCell\";\nvar DEFAULT_ARIA_LABEL = \"Toggle Row Selection\";\n/**\n * This is a simple wrapper for the `Checkbox` component that allows you to\n * render a nicely styled `Checkbox` within a `TableCell` element. This will\n * mostly just remove the additional padding applied and default an `aria-label`\n * since you normally don't want a checkbox with a label within a table since\n * it's more for selection.\n */\n\nvar TableCheckbox = forwardRef(function TableCheckbox(_a, ref) {\n  var cellId = _a.cellId,\n      className = _a.className,\n      id = _a.id,\n      ariaLabel = _a[\"aria-label\"],\n      ariaLabelledBy = _a[\"aria-labelledby\"],\n      ariaChecked = _a[\"aria-checked\"],\n      ariaControls = _a[\"aria-controls\"],\n      checkboxRef = _a.checkboxRef,\n      checkboxStyle = _a.checkboxStyle,\n      checkboxClassName = _a.checkboxClassName,\n      icon = _a.icon,\n      iconStyle = _a.iconStyle,\n      iconClassName = _a.iconClassName,\n      toggleStyle = _a.toggleStyle,\n      toggleClassName = _a.toggleClassName,\n      disableIconOverlay = _a.disableIconOverlay,\n      name = _a.name,\n      value = _a.value,\n      checked = _a.checked,\n      onChange = _a.onChange,\n      defaultChecked = _a.defaultChecked,\n      indeterminate = _a.indeterminate,\n      props = __rest(_a, [\"cellId\", \"className\", \"id\", \"aria-label\", \"aria-labelledby\", \"aria-checked\", \"aria-controls\", \"checkboxRef\", \"checkboxStyle\", \"checkboxClassName\", \"icon\", \"iconStyle\", \"iconClassName\", \"toggleStyle\", \"toggleClassName\", \"disableIconOverlay\", \"name\", \"value\", \"checked\", \"onChange\", \"defaultChecked\", \"indeterminate\"]);\n\n  return React.createElement(TableCell, __assign({}, props, {\n    ref: ref,\n    id: cellId,\n    header: false,\n    className: cn(\"rmd-table-cell--checkbox\", className)\n  }), React.createElement(Checkbox, {\n    id: id,\n    \"aria-label\": (ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : ariaLabelledBy) ? undefined : DEFAULT_ARIA_LABEL,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-checked\": ariaChecked,\n    \"aria-controls\": ariaControls,\n    ref: checkboxRef,\n    style: checkboxStyle,\n    indeterminate: indeterminate,\n    className: checkboxClassName,\n    icon: icon,\n    iconStyle: iconStyle,\n    iconClassName: iconClassName,\n    toggleStyle: toggleStyle,\n    toggleClassName: toggleClassName,\n    disableIconOverlay: disableIconOverlay,\n    name: name,\n    value: value,\n    checked: checked,\n    onChange: onChange,\n    defaultChecked: defaultChecked\n  }));\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    TableCheckbox.propTypes = {\n      id: PropTypes.string.isRequired,\n      className: PropTypes.string,\n      \"aria-label\": PropTypes.string,\n      \"aria-labelledby\": PropTypes.string,\n      \"aria-checked\": PropTypes.string,\n      \"aria-controls\": PropTypes.string,\n      checkboxRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n      checkboxStyle: PropTypes.object,\n      checkboxClassName: PropTypes.string,\n      icon: PropTypes.node,\n      iconStyle: PropTypes.object,\n      iconClassName: PropTypes.string,\n      toggleStyle: PropTypes.object,\n      toggleClassName: PropTypes.string,\n      disableIconOverlay: PropTypes.bool,\n      name: PropTypes.string,\n      value: PropTypes.string,\n      checked: PropTypes.bool,\n      defaultChecked: PropTypes.bool,\n      onChange: PropTypes.func,\n      cellId: PropTypes.string,\n      indeterminate: PropTypes.bool\n    };\n  } catch (e) {}\n}\n\nexport default TableCheckbox;","map":{"version":3,"sources":["../src/TableCheckbox.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { Checkbox } from \"@react-md/form\";\nimport TableCell from \"./TableCell\";\nvar DEFAULT_ARIA_LABEL = \"Toggle Row Selection\";\n/**\n * This is a simple wrapper for the `Checkbox` component that allows you to\n * render a nicely styled `Checkbox` within a `TableCell` element. This will\n * mostly just remove the additional padding applied and default an `aria-label`\n * since you normally don't want a checkbox with a label within a table since\n * it's more for selection.\n */\nvar TableCheckbox = forwardRef(function TableCheckbox(_a, ref) {\n    var cellId = _a.cellId, className = _a.className, id = _a.id, ariaLabel = _a[\"aria-label\"], ariaLabelledBy = _a[\"aria-labelledby\"], ariaChecked = _a[\"aria-checked\"], ariaControls = _a[\"aria-controls\"], checkboxRef = _a.checkboxRef, checkboxStyle = _a.checkboxStyle, checkboxClassName = _a.checkboxClassName, icon = _a.icon, iconStyle = _a.iconStyle, iconClassName = _a.iconClassName, toggleStyle = _a.toggleStyle, toggleClassName = _a.toggleClassName, disableIconOverlay = _a.disableIconOverlay, name = _a.name, value = _a.value, checked = _a.checked, onChange = _a.onChange, defaultChecked = _a.defaultChecked, indeterminate = _a.indeterminate, props = __rest(_a, [\"cellId\", \"className\", \"id\", \"aria-label\", \"aria-labelledby\", \"aria-checked\", \"aria-controls\", \"checkboxRef\", \"checkboxStyle\", \"checkboxClassName\", \"icon\", \"iconStyle\", \"iconClassName\", \"toggleStyle\", \"toggleClassName\", \"disableIconOverlay\", \"name\", \"value\", \"checked\", \"onChange\", \"defaultChecked\", \"indeterminate\"]);\n    return (React.createElement(TableCell, __assign({}, props, { ref: ref, id: cellId, header: false, className: cn(\"rmd-table-cell--checkbox\", className) }),\n        React.createElement(Checkbox, { id: id, \"aria-label\": (ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : ariaLabelledBy) ? undefined : DEFAULT_ARIA_LABEL, \"aria-labelledby\": ariaLabelledBy, \"aria-checked\": ariaChecked, \"aria-controls\": ariaControls, ref: checkboxRef, style: checkboxStyle, indeterminate: indeterminate, className: checkboxClassName, icon: icon, iconStyle: iconStyle, iconClassName: iconClassName, toggleStyle: toggleStyle, toggleClassName: toggleClassName, disableIconOverlay: disableIconOverlay, name: name, value: value, checked: checked, onChange: onChange, defaultChecked: defaultChecked })));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        TableCheckbox.propTypes = {\n            id: PropTypes.string.isRequired,\n            className: PropTypes.string,\n            \"aria-label\": PropTypes.string,\n            \"aria-labelledby\": PropTypes.string,\n            \"aria-checked\": PropTypes.string,\n            \"aria-controls\": PropTypes.string,\n            checkboxRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n            checkboxStyle: PropTypes.object,\n            checkboxClassName: PropTypes.string,\n            icon: PropTypes.node,\n            iconStyle: PropTypes.object,\n            iconClassName: PropTypes.string,\n            toggleStyle: PropTypes.object,\n            toggleClassName: PropTypes.string,\n            disableIconOverlay: PropTypes.bool,\n            name: PropTypes.string,\n            value: PropTypes.string,\n            checked: PropTypes.bool,\n            defaultChecked: PropTypes.bool,\n            onChange: PropTypes.func,\n            cellId: PropTypes.string,\n            indeterminate: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\nexport default TableCheckbox;\n//# sourceMappingURL=TableCheckbox.js.map"]},"metadata":{},"sourceType":"module"}