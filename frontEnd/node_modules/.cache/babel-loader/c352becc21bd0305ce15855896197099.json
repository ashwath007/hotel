{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport LayoutAppBarTitle from \"./LayoutAppBarTitle\";\nimport LayoutNavToggle from \"./LayoutNavToggle\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\n/**\n * This is the default implementation for an `AppBar` within the `Layout` that\n * will conditionally render the default `LayoutNavToggle` button and\n * `AppBarTitle` depending on specific props that were provided.\n */\n\nvar LayoutAppBar = forwardRef(function LayoutAppBar(_a, ref) {\n  var children = _a.children,\n      _b = _a.fixed,\n      fixed = _b === void 0 ? true : _b,\n      propNavToggle = _a.navToggle,\n      navToggleProps = _a.navToggleProps,\n      customTitle = _a.customTitle,\n      titleChildren = _a.title,\n      titleProps = _a.titleProps,\n      props = __rest(_a, [\"children\", \"fixed\", \"navToggle\", \"navToggleProps\", \"customTitle\", \"title\", \"titleProps\"]);\n\n  var _c = useLayoutConfig(),\n      baseId = _c.baseId,\n      layout = _c.layout;\n\n  var nav = propNavToggle;\n\n  if (typeof nav === \"undefined\") {\n    // set the key to the current layout since we want the button to re-mount\n    // on layout changes so the transition does not occur\n    nav = React.createElement(LayoutNavToggle, __assign({\n      key: layout\n    }, navToggleProps));\n  }\n\n  var title = customTitle;\n\n  if (typeof title === \"undefined\") {\n    title = React.createElement(LayoutAppBarTitle, __assign({}, titleProps), titleChildren);\n  }\n\n  return React.createElement(AppBar, __assign({\n    id: baseId + \"-header\"\n  }, props, {\n    ref: ref,\n    fixed: fixed\n  }), nav, title, children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    LayoutAppBar.propTypes = {\n      fixed: PropTypes.bool,\n      navToggle: PropTypes.node,\n      navToggleProps: PropTypes.object,\n      className: PropTypes.string,\n      customTitle: PropTypes.node,\n      title: PropTypes.node,\n      titleProps: PropTypes.object,\n      children: PropTypes.node\n    };\n  } catch (error) {}\n}\n\nexport default LayoutAppBar;","map":{"version":3,"sources":["../src/LayoutAppBar.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAkC,OAAlC;AACA,SAAS,MAAT,QAAoC,mBAApC;AAEA,OAAO,iBAAP,MAA8B,qBAA9B;AACA,OAAO,eAAP,MAAqD,mBAArD;AACA,SAAS,eAAT,QAAgC,kBAAhC;AAgBA;;;;;;AAKA,IAAM,YAAY,GAAG,UAAU,CAC7B,SAAS,YAAT,CACE,EADF,EAWE,GAXF,EAWK;AATD,MAAA,QAAQ,GAAA,EAAA,CAAA,QAAR;AAAA,MACA,EAAA,GAAA,EAAA,CAAA,KADA;AAAA,MACA,KAAK,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,EADZ;AAAA,MAEW,aAAa,GAAA,EAAA,CAAA,SAFxB;AAAA,MAGA,cAAc,GAAA,EAAA,CAAA,cAHd;AAAA,MAIA,WAAW,GAAA,EAAA,CAAA,WAJX;AAAA,MAKO,aAAa,GAAA,EAAA,CAAA,KALpB;AAAA,MAMA,UAAU,GAAA,EAAA,CAAA,UANV;AAAA,MAOG,KAAK,GAAA,MAAA,CAAA,EAAA,EARV,CAAA,UAAA,EAAA,OAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,aAAA,EAAA,OAAA,EAAA,YAAA,CAQU,CAPR;;AAWI,MAAA,EAAA,GAAqB,eAAe,EAApC;AAAA,MAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,MAAU,MAAM,GAAA,EAAA,CAAA,MAAhB;;AAEN,MAAI,GAAG,GAAG,aAAV;;AACA,MAAI,OAAO,GAAP,KAAe,WAAnB,EAAgC;AAC9B;AACA;AACA,IAAA,GAAG,GAAG,KAAA,CAAA,aAAA,CAAC,eAAD,EAAgB,QAAA,CAAA;AAAC,MAAA,GAAG,EAAE;AAAN,KAAA,EAAkB,cAAlB,CAAhB,CAAN;AACD;;AAED,MAAI,KAAK,GAAG,WAAZ;;AACA,MAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAChC,IAAA,KAAK,GACH,KAAA,CAAA,aAAA,CAAC,iBAAD,EAAkB,QAAA,CAAA,EAAA,EAAK,UAAL,CAAlB,EAAoC,aAApC,CADF;AAGD;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,MAAD,EAAO,QAAA,CAAA;AAAC,IAAA,EAAE,EAAK,MAAM,GAAA;AAAd,GAAA,EAA6B,KAA7B,EAAkC;AAAE,IAAA,GAAG,EAAE,GAAP;AAAY,IAAA,KAAK,EAAE;AAAnB,GAAlC,CAAP,EACG,GADH,EAEG,KAFH,EAGG,QAHH,CADF;AAOD,CArC4B,CAA/B;;AAwCA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,YAAY,CAAC,SAAb,GAAyB;AACvB,MAAA,KAAK,EAAE,SAAS,CAAC,IADM;AAEvB,MAAA,SAAS,EAAE,SAAS,CAAC,IAFE;AAGvB,MAAA,cAAc,EAAE,SAAS,CAAC,MAHH;AAIvB,MAAA,SAAS,EAAE,SAAS,CAAC,MAJE;AAKvB,MAAA,WAAW,EAAE,SAAS,CAAC,IALA;AAMvB,MAAA,KAAK,EAAE,SAAS,CAAC,IANM;AAOvB,MAAA,UAAU,EAAE,SAAS,CAAC,MAPC;AAQvB,MAAA,QAAQ,EAAE,SAAS,CAAC;AARG,KAAzB;AAUD,GAbD,CAaE,OAAO,KAAP,EAAc,CAAE;AACnB;;AAED,eAAe,YAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport { AppBar } from \"@react-md/app-bar\";\nimport LayoutAppBarTitle from \"./LayoutAppBarTitle\";\nimport LayoutNavToggle from \"./LayoutNavToggle\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\n/**\n * This is the default implementation for an `AppBar` within the `Layout` that\n * will conditionally render the default `LayoutNavToggle` button and\n * `AppBarTitle` depending on specific props that were provided.\n */\nvar LayoutAppBar = forwardRef(function LayoutAppBar(_a, ref) {\n    var children = _a.children, _b = _a.fixed, fixed = _b === void 0 ? true : _b, propNavToggle = _a.navToggle, navToggleProps = _a.navToggleProps, customTitle = _a.customTitle, titleChildren = _a.title, titleProps = _a.titleProps, props = __rest(_a, [\"children\", \"fixed\", \"navToggle\", \"navToggleProps\", \"customTitle\", \"title\", \"titleProps\"]);\n    var _c = useLayoutConfig(), baseId = _c.baseId, layout = _c.layout;\n    var nav = propNavToggle;\n    if (typeof nav === \"undefined\") {\n        // set the key to the current layout since we want the button to re-mount\n        // on layout changes so the transition does not occur\n        nav = React.createElement(LayoutNavToggle, __assign({ key: layout }, navToggleProps));\n    }\n    var title = customTitle;\n    if (typeof title === \"undefined\") {\n        title = (React.createElement(LayoutAppBarTitle, __assign({}, titleProps), titleChildren));\n    }\n    return (React.createElement(AppBar, __assign({ id: baseId + \"-header\" }, props, { ref: ref, fixed: fixed }),\n        nav,\n        title,\n        children));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        LayoutAppBar.propTypes = {\n            fixed: PropTypes.bool,\n            navToggle: PropTypes.node,\n            navToggleProps: PropTypes.object,\n            className: PropTypes.string,\n            customTitle: PropTypes.node,\n            title: PropTypes.node,\n            titleProps: PropTypes.object,\n            children: PropTypes.node,\n        };\n    }\n    catch (error) { }\n}\nexport default LayoutAppBar;\n//# sourceMappingURL=LayoutAppBar.js.map"]},"metadata":{},"sourceType":"module"}