{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { AppBarTitle } from \"@react-md/app-bar\";\nimport { bem } from \"@react-md/utils\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isFullHeightLayout } from \"./utils\";\nvar styles = bem(\"rmd-layout-title\");\n/**\n * An extremely simple wrapper for the `AppBarTitle` that will automatically\n * apply an `id` and apply the correct margin for full-height layouts.\n */\n\nvar LayoutAppBarTitle = forwardRef(function LayoutAppBarTitle(_a, ref) {\n  var propId = _a.id,\n      className = _a.className,\n      children = _a.children,\n      props = __rest(_a, [\"id\", \"className\", \"children\"]);\n\n  var _b = useLayoutConfig(),\n      baseId = _b.baseId,\n      layout = _b.layout;\n\n  var id = propId !== null && propId !== void 0 ? propId : baseId + \"-title\";\n  return React.createElement(AppBarTitle, __assign({}, props, {\n    id: id,\n    ref: ref,\n    className: cn(styles({\n      offset: isFullHeightLayout(layout)\n    }), className)\n  }), children);\n});\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    LayoutAppBarTitle.propTypes = {\n      id: PropTypes.string,\n      className: PropTypes.string,\n      children: PropTypes.node\n    };\n  } catch (error) {}\n}\n\nexport default LayoutAppBarTitle;","map":{"version":3,"sources":["../src/LayoutAppBarTitle.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,IAAgB,UAAhB,QAAkC,OAAlC;AACA,OAAO,EAAP,MAAe,YAAf;AACA,SAAS,WAAT,QAA8C,mBAA9C;AACA,SAAS,GAAT,QAAoB,iBAApB;AAEA,SAAS,eAAT,QAAgC,kBAAhC;AACA,SAAS,kBAAT,QAAmC,SAAnC;AAIA,IAAM,MAAM,GAAG,GAAG,CAAC,kBAAD,CAAlB;AAEA;;;;;AAIA,IAAM,iBAAiB,GAAG,UAAU,CAClC,SAAS,iBAAT,CACE,EADF,EAEE,GAFF,EAEK;AADD,MAAI,MAAM,GAAA,EAAA,CAAA,EAAV;AAAA,MAAY,SAAS,GAAA,EAAA,CAAA,SAArB;AAAA,MAAuB,QAAQ,GAAA,EAAA,CAAA,QAA/B;AAAA,MAAoC,KAAK,GAAA,MAAA,CAAA,EAAA,EAA3C,CAAA,IAAA,EAAA,WAAA,EAAA,UAAA,CAA2C,CAAzC;;AAGI,MAAA,EAAA,GAAqB,eAAe,EAApC;AAAA,MAAE,MAAM,GAAA,EAAA,CAAA,MAAR;AAAA,MAAU,MAAM,GAAA,EAAA,CAAA,MAAhB;;AACN,MAAM,EAAE,GAAG,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAA,MAAA,GAAa,MAAM,GAAA,QAA9B;AACA,SACE,KAAA,CAAA,aAAA,CAAC,WAAD,EAAY,QAAA,CAAA,EAAA,EACN,KADM,EACD;AACT,IAAA,EAAE,EAAE,EADK;AAET,IAAA,GAAG,EAAE,GAFI;AAGT,IAAA,SAAS,EAAE,EAAE,CACX,MAAM,CAAC;AAAE,MAAA,MAAM,EAAE,kBAAkB,CAAC,MAAD;AAA5B,KAAD,CADK,EAEX,SAFW;AAHJ,GADC,CAAZ,EASG,QATH,CADF;AAaD,CApBiC,CAApC;;AAuBA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,iBAAiB,CAAC,SAAlB,GAA8B;AAC5B,MAAA,EAAE,EAAE,SAAS,CAAC,MADc;AAE5B,MAAA,SAAS,EAAE,SAAS,CAAC,MAFO;AAG5B,MAAA,QAAQ,EAAE,SAAS,CAAC;AAHQ,KAA9B;AAKD,GARD,CAQE,OAAO,KAAP,EAAc,CAAE;AACnB;;AAED,eAAe,iBAAf","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { forwardRef } from \"react\";\nimport cn from \"classnames\";\nimport { AppBarTitle } from \"@react-md/app-bar\";\nimport { bem } from \"@react-md/utils\";\nimport { useLayoutConfig } from \"./LayoutProvider\";\nimport { isFullHeightLayout } from \"./utils\";\nvar styles = bem(\"rmd-layout-title\");\n/**\n * An extremely simple wrapper for the `AppBarTitle` that will automatically\n * apply an `id` and apply the correct margin for full-height layouts.\n */\nvar LayoutAppBarTitle = forwardRef(function LayoutAppBarTitle(_a, ref) {\n    var propId = _a.id, className = _a.className, children = _a.children, props = __rest(_a, [\"id\", \"className\", \"children\"]);\n    var _b = useLayoutConfig(), baseId = _b.baseId, layout = _b.layout;\n    var id = propId !== null && propId !== void 0 ? propId : baseId + \"-title\";\n    return (React.createElement(AppBarTitle, __assign({}, props, { id: id, ref: ref, className: cn(styles({ offset: isFullHeightLayout(layout) }), className) }), children));\n});\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        LayoutAppBarTitle.propTypes = {\n            id: PropTypes.string,\n            className: PropTypes.string,\n            children: PropTypes.node,\n        };\n    }\n    catch (error) { }\n}\nexport default LayoutAppBarTitle;\n//# sourceMappingURL=LayoutAppBarTitle.js.map"]},"metadata":{},"sourceType":"module"}