{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useToggle, useRefCache } from \"@react-md/utils\";\n/**\n * This is a small hook that will enable a valued flag when the value\n * of a text input or a textarea has a length greater than 0.\n *\n * @private\n */\n\nexport default function useValuedState(_a) {\n  var onChange = _a.onChange,\n      value = _a.value,\n      defaultValue = _a.defaultValue;\n  var handler = useRefCache(onChange);\n\n  var _b = useToggle(function () {\n    if (typeof value === \"undefined\") {\n      return typeof defaultValue === \"number\" || (defaultValue || \"\").length > 0;\n    } // this isn't used for controlled components\n\n\n    return false;\n  }),\n      valued = _b[0],\n      enable = _b[1],\n      disable = _b[2];\n\n  var handleChange = useCallback(function (event) {\n    var onChange = handler.current;\n\n    if (onChange) {\n      onChange(event);\n    }\n\n    if (event.currentTarget.value.length > 0) {\n      enable();\n    } else {\n      disable();\n    }\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [enable, disable]);\n\n  if (typeof value !== \"undefined\") {\n    var isValued = typeof value === \"number\" || value.length > 0;\n    return [isValued, onChange];\n  }\n\n  return [valued, handleChange];\n}","map":{"version":3,"sources":["../../src/text-field/useValuedState.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,OAA5B;AACA,SAAS,SAAT,EAAoB,WAApB,QAAuC,iBAAvC;AAYA;;;;;;;AAMA,eAAc,SAAU,cAAV,CAAgD,EAAhD,EAID;MAHX,QAAQ,GAAA,EAAA,CAAA,Q;MACR,KAAK,GAAA,EAAA,CAAA,K;MACL,YAAY,GAAA,EAAA,CAAA,Y;AAEZ,MAAM,OAAO,GAAG,WAAW,CAAC,QAAD,CAA3B;;AACM,MAAA,EAAA,GAA4B,SAAS,CAAC,YAAA;AAC1C,QAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAChC,aACE,OAAO,YAAP,KAAwB,QAAxB,IAAoC,CAAC,YAAY,IAAI,EAAjB,EAAqB,MAArB,GAA8B,CADpE;AAGD,KALyC,CAO1C;;;AACA,WAAO,KAAP;AACD,GAT0C,CAArC;AAAA,MAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP;AAAA,MAAS,MAAM,GAAA,EAAA,CAAA,CAAA,CAAf;AAAA,MAAiB,OAAO,GAAA,EAAA,CAAA,CAAA,CAAxB;;AAWN,MAAM,YAAY,GAAG,WAAW,CAC9B,UAAC,KAAD,EAAM;AACJ,QAAM,QAAQ,GAAG,OAAO,CAAC,OAAzB;;AACA,QAAI,QAAJ,EAAc;AACZ,MAAA,QAAQ,CAAC,KAAD,CAAR;AACD;;AAED,QAAI,KAAK,CAAC,aAAN,CAAoB,KAApB,CAA0B,MAA1B,GAAmC,CAAvC,EAA0C;AACxC,MAAA,MAAM;AACP,KAFD,MAEO;AACL,MAAA,OAAO;AACR;AACF,GAZ6B,EAa9B;AACA;AACA,GAAC,MAAD,EAAS,OAAT,CAf8B,CAAhC;;AAkBA,MAAI,OAAO,KAAP,KAAiB,WAArB,EAAkC;AAChC,QAAM,QAAQ,GAAG,OAAO,KAAP,KAAiB,QAAjB,IAA6B,KAAK,CAAC,MAAN,GAAe,CAA7D;AACA,WAAO,CAAC,QAAD,EAAW,QAAX,CAAP;AACD;;AAED,SAAO,CAAC,MAAD,EAAS,YAAT,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback } from \"react\";\nimport { useToggle, useRefCache } from \"@react-md/utils\";\n/**\n * This is a small hook that will enable a valued flag when the value\n * of a text input or a textarea has a length greater than 0.\n *\n * @private\n */\nexport default function useValuedState(_a) {\n    var onChange = _a.onChange, value = _a.value, defaultValue = _a.defaultValue;\n    var handler = useRefCache(onChange);\n    var _b = useToggle(function () {\n        if (typeof value === \"undefined\") {\n            return (typeof defaultValue === \"number\" || (defaultValue || \"\").length > 0);\n        }\n        // this isn't used for controlled components\n        return false;\n    }), valued = _b[0], enable = _b[1], disable = _b[2];\n    var handleChange = useCallback(function (event) {\n        var onChange = handler.current;\n        if (onChange) {\n            onChange(event);\n        }\n        if (event.currentTarget.value.length > 0) {\n            enable();\n        }\n        else {\n            disable();\n        }\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [enable, disable]);\n    if (typeof value !== \"undefined\") {\n        var isValued = typeof value === \"number\" || value.length > 0;\n        return [isValued, onChange];\n    }\n    return [valued, handleChange];\n}\n//# sourceMappingURL=useValuedState.js.map"]},"metadata":{},"sourceType":"module"}