{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { useRef } from \"react\";\nimport { Link } from \"@react-md/link\";\nimport { getItemsFrom, useTreeItemExpansion } from \"@react-md/tree\";\n/**\n * @private\n */\n\nvar getParentIds = function (itemId, navItems) {\n  return getItemsFrom(navItems, itemId).map(function (_a) {\n    var itemId = _a.itemId;\n    return itemId;\n  });\n};\n/**\n * This is used to disable the item select and multi item select functionality\n * since only one id can be selected at a time, and it'll always be the current\n * pathname's itemId\n *\n * @private\n */\n\n\nvar noop = function () {};\n/**\n * This is a pretty reasonable default implementation for having a navigation\n * tree within the Layout component. The way it'll work is that the current\n * route will be the only selected item within the tree. When the pathname\n * changes, the selectedIds will be updated to only be the current pathname once\n * again.\n *\n * This means that you can use whatever routing library or history provider that\n * ensures that your layout re-renders on a path change.\n *\n * @see LayoutNavigationTree for description of the navItems\n * @param navItems All the navigation items within your layout. This is used for\n * determining which parent tree items should be expanded when the route changes\n * so the current route won't be hidden from view. This sort of flow happens if\n * you have a link outside of the navigation tree.\n * @param pathname The current pathname\n * @param linkComponent The link component to use within the navigation tree for\n * any item that has a `to` or `href` attribute. This defaults to the `Link`\n * from `@react-md/link` but should be changed to whatever link component you\n * need if using a routing library like `react-router`.\n * @return the required `Tree` selection and expansion state and handlers that\n * should be passed to the `Layout` component.\n */\n\n\nexport default function useLayoutNavigation(navItems, pathname, linkComponent) {\n  if (linkComponent === void 0) {\n    linkComponent = Link;\n  }\n\n  var itemId = pathname.replace(/\\?.*$/, \"\");\n\n  var _a = useTreeItemExpansion(function () {\n    return getParentIds(itemId, navItems);\n  }),\n      expandedIds = _a.expandedIds,\n      onItemExpansion = _a.onItemExpansion,\n      onMultiItemExpansion = _a.onMultiItemExpansion;\n\n  var prevItemId = useRef(itemId);\n  var prevNavItems = useRef(navItems);\n\n  if (prevItemId.current !== itemId || prevNavItems.current !== navItems) {\n    prevItemId.current = itemId;\n    prevNavItems.current = navItems;\n    onMultiItemExpansion(Array.from(new Set(__spreadArrays(expandedIds, getParentIds(itemId, navItems)))));\n  }\n\n  return {\n    navItems: navItems,\n    multiSelect: false,\n    selectedIds: [itemId],\n    onItemSelect: noop,\n    onMultiItemSelect: noop,\n    expandedIds: expandedIds,\n    onItemExpansion: onItemExpansion,\n    onMultiItemExpansion: onMultiItemExpansion,\n    linkComponent: linkComponent\n  };\n}","map":{"version":3,"sources":["../src/useLayoutNavigation.ts"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,MAAT,QAAoC,OAApC;AACA,SAAS,IAAT,QAAqB,gBAArB;AACA,SAEE,YAFF,EAOE,oBAPF,QAQO,gBARP;AA8BA;;;;AAGA,IAAM,YAAY,GAAG,UACnB,MADmB,EAEnB,QAFmB,EAEa;AACf,SAAA,YAAY,CAAC,QAAD,EAAW,MAAX,CAAZ,CAA+B,GAA/B,CAAmC,UAAC,EAAD,EAAW;QAAR,MAAM,GAAA,EAAA,CAAA,M;AAAO,WAAA,MAAA;AAAnD,GAAA,CAAA;AAA0D,CAH7E;AAKA;;;;;;;;;AAOA,IAAM,IAAI,GAAG,YAAA,CAAc,CAA3B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,eAAc,SAAU,mBAAV,CAGZ,QAHY,EAIZ,QAJY,EAKZ,aALY,EAKqB;AAAjC,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,IAAA;AAAiC;;AAEjC,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAf;;AACM,MAAA,EAAA,GAIF,oBAAoB,CAAC,YAAA;AAAM,WAAA,YAAY,CAAC,MAAD,EAAZ,QAAY,CAAZ;AAA8B,GAArC,CAJlB;AAAA,MACJ,WAAW,GAAA,EAAA,CAAA,WADP;AAAA,MAEJ,eAAe,GAAA,EAAA,CAAA,eAFX;AAAA,MAGJ,oBAAoB,GAAA,EAAA,CAAA,oBAHhB;;AAMN,MAAM,UAAU,GAAG,MAAM,CAAC,MAAD,CAAzB;AACA,MAAM,YAAY,GAAG,MAAM,CAAC,QAAD,CAA3B;;AACA,MAAI,UAAU,CAAC,OAAX,KAAuB,MAAvB,IAAiC,YAAY,CAAC,OAAb,KAAyB,QAA9D,EAAwE;AACtE,IAAA,UAAU,CAAC,OAAX,GAAqB,MAArB;AACA,IAAA,YAAY,CAAC,OAAb,GAAuB,QAAvB;AACA,IAAA,oBAAoB,CAClB,KAAK,CAAC,IAAN,CAAW,IAAI,GAAJ,CAAO,cAAA,CAAK,WAAL,EAAqB,YAAY,CAAC,MAAD,EAAS,QAAT,CAAjC,CAAP,CAAX,CADkB,CAApB;AAGD;;AAED,SAAO;AACL,IAAA,QAAQ,EAAA,QADH;AAEL,IAAA,WAAW,EAAE,KAFR;AAGL,IAAA,WAAW,EAAE,CAAC,MAAD,CAHR;AAIL,IAAA,YAAY,EAAE,IAJT;AAKL,IAAA,iBAAiB,EAAE,IALd;AAML,IAAA,WAAW,EAAA,WANN;AAOL,IAAA,eAAe,EAAA,eAPV;AAQL,IAAA,oBAAoB,EAAA,oBARf;AASL,IAAA,aAAa,EAAA;AATR,GAAP;AAWD","sourceRoot":"","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n            r[k] = a[j];\n    return r;\n};\nimport { useRef } from \"react\";\nimport { Link } from \"@react-md/link\";\nimport { getItemsFrom, useTreeItemExpansion, } from \"@react-md/tree\";\n/**\n * @private\n */\nvar getParentIds = function (itemId, navItems) { return getItemsFrom(navItems, itemId).map(function (_a) {\n    var itemId = _a.itemId;\n    return itemId;\n}); };\n/**\n * This is used to disable the item select and multi item select functionality\n * since only one id can be selected at a time, and it'll always be the current\n * pathname's itemId\n *\n * @private\n */\nvar noop = function () { };\n/**\n * This is a pretty reasonable default implementation for having a navigation\n * tree within the Layout component. The way it'll work is that the current\n * route will be the only selected item within the tree. When the pathname\n * changes, the selectedIds will be updated to only be the current pathname once\n * again.\n *\n * This means that you can use whatever routing library or history provider that\n * ensures that your layout re-renders on a path change.\n *\n * @see LayoutNavigationTree for description of the navItems\n * @param navItems All the navigation items within your layout. This is used for\n * determining which parent tree items should be expanded when the route changes\n * so the current route won't be hidden from view. This sort of flow happens if\n * you have a link outside of the navigation tree.\n * @param pathname The current pathname\n * @param linkComponent The link component to use within the navigation tree for\n * any item that has a `to` or `href` attribute. This defaults to the `Link`\n * from `@react-md/link` but should be changed to whatever link component you\n * need if using a routing library like `react-router`.\n * @return the required `Tree` selection and expansion state and handlers that\n * should be passed to the `Layout` component.\n */\nexport default function useLayoutNavigation(navItems, pathname, linkComponent) {\n    if (linkComponent === void 0) { linkComponent = Link; }\n    var itemId = pathname.replace(/\\?.*$/, \"\");\n    var _a = useTreeItemExpansion(function () { return getParentIds(itemId, navItems); }), expandedIds = _a.expandedIds, onItemExpansion = _a.onItemExpansion, onMultiItemExpansion = _a.onMultiItemExpansion;\n    var prevItemId = useRef(itemId);\n    var prevNavItems = useRef(navItems);\n    if (prevItemId.current !== itemId || prevNavItems.current !== navItems) {\n        prevItemId.current = itemId;\n        prevNavItems.current = navItems;\n        onMultiItemExpansion(Array.from(new Set(__spreadArrays(expandedIds, getParentIds(itemId, navItems)))));\n    }\n    return {\n        navItems: navItems,\n        multiSelect: false,\n        selectedIds: [itemId],\n        onItemSelect: noop,\n        onMultiItemSelect: noop,\n        expandedIds: expandedIds,\n        onItemExpansion: onItemExpansion,\n        onMultiItemExpansion: onMultiItemExpansion,\n        linkComponent: linkComponent,\n    };\n}\n//# sourceMappingURL=useLayoutNavigation.js.map"]},"metadata":{},"sourceType":"module"}