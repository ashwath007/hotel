{"ast":null,"code":"import getFocusableElements from \"./getFocusableElements\";\nimport scrollIntoView from \"../scrollIntoView\";\n/**\n * A function that is used to focus an element within the provided node.  This\n * can either focus the first, last, or a querySelector found element.\n *\n * @param container Either an HTMLElement or the document to focus an element\n * within.\n * @param focus Either the \"first\" or \"last\" string to focus the first or last\n * focusable element within the container or a query selector string to find a\n * focusable element within the container.\n * @param preventScroll Boolean if the focus event should not scroll the element\n * into view. This should normally remain `false`, but can be useful if the\n * element gets focused while offscreen during a transition.\n * @param progamatic Boolean if programatically focusable elements should be\n * included as well.\n */\n\nexport default function focusElementWithin(container, focus, programatic, preventScroll, elements) {\n  if (programatic === void 0) {\n    programatic = false;\n  }\n\n  if (preventScroll === void 0) {\n    preventScroll = false;\n  }\n\n  if (!elements || !elements.length) {\n    elements = getFocusableElements(container, programatic);\n  }\n\n  var el;\n\n  switch (focus) {\n    case \"first\":\n      el = elements[0];\n      break;\n\n    case \"last\":\n      el = elements[elements.length - 1];\n      break;\n\n    default:\n      el = container.querySelector(focus);\n  }\n\n  if (!el) {\n    throw new Error(\"Unable to find a focusable element\");\n  }\n\n  el.focus({\n    preventScroll: preventScroll\n  });\n\n  if (!preventScroll && container !== document) {\n    scrollIntoView(container, el);\n  }\n}","map":{"version":3,"sources":["../../src/wia-aria/focusElementWithin.ts"],"names":[],"mappings":"AAAA,OAAO,oBAAP,MAAiC,wBAAjC;AACA,OAAO,cAAP,MAA2B,mBAA3B;AAIA;;;;;;;;;;;;;;;;AAeA,eAAc,SAAU,kBAAV,CACZ,SADY,EAEZ,KAFY,EAGZ,WAHY,EAIZ,aAJY,EAKZ,QALY,EAKY;AAFxB,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,KAAA;AAA4B;;AAC5B,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,KAAA;AAA8B;;AAG9B,MAAI,CAAC,QAAD,IAAa,CAAC,QAAQ,CAAC,MAA3B,EAAmC;AACjC,IAAA,QAAQ,GAAG,oBAAoB,CAAC,SAAD,EAAY,WAAZ,CAA/B;AACD;;AAED,MAAI,EAAJ;;AACA,UAAQ,KAAR;AACE,SAAK,OAAL;AACG,MAAA,EAAE,GAAI,QAAQ,CAAZ,CAAY,CAAd;AACD;;AACF,SAAK,MAAL;AACE,MAAA,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAT,GAAkB,CAAnB,CAAb;AACA;;AACF;AACE,MAAA,EAAE,GAAG,SAAS,CAAC,aAAV,CAAqC,KAArC,CAAL;AARJ;;AAWA,MAAI,CAAC,EAAL,EAAS;AACP,UAAM,IAAI,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,EAAA,EAAE,CAAC,KAAH,CAAS;AAAE,IAAA,aAAa,EAAA;AAAf,GAAT;;AACA,MAAI,CAAC,aAAD,IAAkB,SAAS,KAAK,QAApC,EAA8C;AAC5C,IAAA,cAAc,CAAC,SAAD,EAA2B,EAA3B,CAAd;AACD;AACF","sourceRoot":"","sourcesContent":["import getFocusableElements from \"./getFocusableElements\";\nimport scrollIntoView from \"../scrollIntoView\";\n/**\n * A function that is used to focus an element within the provided node.  This\n * can either focus the first, last, or a querySelector found element.\n *\n * @param container Either an HTMLElement or the document to focus an element\n * within.\n * @param focus Either the \"first\" or \"last\" string to focus the first or last\n * focusable element within the container or a query selector string to find a\n * focusable element within the container.\n * @param preventScroll Boolean if the focus event should not scroll the element\n * into view. This should normally remain `false`, but can be useful if the\n * element gets focused while offscreen during a transition.\n * @param progamatic Boolean if programatically focusable elements should be\n * included as well.\n */\nexport default function focusElementWithin(container, focus, programatic, preventScroll, elements) {\n    if (programatic === void 0) { programatic = false; }\n    if (preventScroll === void 0) { preventScroll = false; }\n    if (!elements || !elements.length) {\n        elements = getFocusableElements(container, programatic);\n    }\n    var el;\n    switch (focus) {\n        case \"first\":\n            el = elements[0];\n            break;\n        case \"last\":\n            el = elements[elements.length - 1];\n            break;\n        default:\n            el = container.querySelector(focus);\n    }\n    if (!el) {\n        throw new Error(\"Unable to find a focusable element\");\n    }\n    el.focus({ preventScroll: preventScroll });\n    if (!preventScroll && container !== document) {\n        scrollIntoView(container, el);\n    }\n}\n//# sourceMappingURL=focusElementWithin.js.map"]},"metadata":{},"sourceType":"module"}