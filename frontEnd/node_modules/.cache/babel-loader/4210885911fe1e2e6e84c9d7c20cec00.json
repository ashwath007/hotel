{"ast":null,"code":"import { useCallback, useState } from \"react\";\n/**\n * A hook that implements the base functionality for selecting different tree\n * items.\n *\n * @param defaultSelectedIds The default list of tree item ids that should be\n * expanded by default\n * @param multiSelect Boolean if the tree can have multiple items selected or\n * not.\n * @return an object containing props that can be passed to the `Tree` component\n * to handle the selection state within the tree\n */\n\nexport default function useTreeItemSelection(defaultSelectedIds, multiSelect) {\n  if (multiSelect === void 0) {\n    multiSelect = false;\n  }\n\n  var _a = useState(defaultSelectedIds),\n      selectedIds = _a[0],\n      setSelectedIds = _a[1];\n\n  var onItemSelect = useCallback(function (itemId) {\n    setSelectedIds(function (selectedIds) {\n      if (!multiSelect) {\n        if (selectedIds[0] === itemId && selectedIds.length === 1) {\n          return selectedIds;\n        }\n\n        return [itemId];\n      }\n\n      var i = selectedIds.indexOf(itemId);\n      var nextSelectedIds = selectedIds.slice();\n\n      if (i === -1) {\n        nextSelectedIds.push(itemId);\n      } else {\n        nextSelectedIds.splice(i, 1);\n      }\n\n      return nextSelectedIds;\n    });\n  }, [multiSelect]);\n  var onMultiItemSelect = useCallback(function (itemIds) {\n    setSelectedIds(itemIds);\n  }, []);\n  return {\n    selectedIds: selectedIds,\n    multiSelect: multiSelect,\n    onItemSelect: onItemSelect,\n    onMultiItemSelect: onMultiItemSelect\n  };\n}","map":{"version":3,"sources":["../src/useTreeItemSelection.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,QAAtB,QAAsC,OAAtC;AAIA;;;;;;;;;;;;AAWA,eAAc,SAAU,oBAAV,CACZ,kBADY,EAEZ,WAFY,EAEgB;AAA5B,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,KAAA;AAA4B;;AAEtB,MAAA,EAAA,GAAgC,QAAQ,CAAC,kBAAD,CAAxC;AAAA,MAAC,WAAW,GAAA,EAAA,CAAA,CAAA,CAAZ;AAAA,MAAc,cAAc,GAAA,EAAA,CAAA,CAAA,CAA5B;;AACN,MAAM,YAAY,GAAG,WAAW,CAC9B,UAAC,MAAD,EAAmB;AACjB,IAAA,cAAc,CAAC,UAAC,WAAD,EAAY;AACzB,UAAI,CAAC,WAAL,EAAkB;AAChB,YAAI,WAAW,CAAC,CAAD,CAAX,KAAmB,MAAnB,IAA6B,WAAW,CAAC,MAAZ,KAAuB,CAAxD,EAA2D;AACzD,iBAAO,WAAP;AACD;;AAED,eAAO,CAAC,MAAD,CAAP;AACD;;AAED,UAAM,CAAC,GAAG,WAAW,CAAC,OAAZ,CAAoB,MAApB,CAAV;AACA,UAAM,eAAe,GAAG,WAAW,CAAC,KAAZ,EAAxB;;AACA,UAAI,CAAC,KAAK,CAAC,CAAX,EAAc;AACZ,QAAA,eAAe,CAAC,IAAhB,CAAqB,MAArB;AACD,OAFD,MAEO;AACL,QAAA,eAAe,CAAC,MAAhB,CAAuB,CAAvB,EAA0B,CAA1B;AACD;;AAED,aAAO,eAAP;AACD,KAlBa,CAAd;AAmBD,GArB6B,EAsB9B,CAAC,WAAD,CAtB8B,CAAhC;AAyBA,MAAM,iBAAiB,GAAG,WAAW,CAAC,UAAC,OAAD,EAAqB;AACzD,IAAA,cAAc,CAAC,OAAD,CAAd;AACD,GAFoC,EAElC,EAFkC,CAArC;AAIA,SAAO;AACL,IAAA,WAAW,EAAA,WADN;AAEL,IAAA,WAAW,EAAA,WAFN;AAGL,IAAA,YAAY,EAAA,YAHP;AAIL,IAAA,iBAAiB,EAAA;AAJZ,GAAP;AAMD","sourceRoot":"","sourcesContent":["import { useCallback, useState } from \"react\";\n/**\n * A hook that implements the base functionality for selecting different tree\n * items.\n *\n * @param defaultSelectedIds The default list of tree item ids that should be\n * expanded by default\n * @param multiSelect Boolean if the tree can have multiple items selected or\n * not.\n * @return an object containing props that can be passed to the `Tree` component\n * to handle the selection state within the tree\n */\nexport default function useTreeItemSelection(defaultSelectedIds, multiSelect) {\n    if (multiSelect === void 0) { multiSelect = false; }\n    var _a = useState(defaultSelectedIds), selectedIds = _a[0], setSelectedIds = _a[1];\n    var onItemSelect = useCallback(function (itemId) {\n        setSelectedIds(function (selectedIds) {\n            if (!multiSelect) {\n                if (selectedIds[0] === itemId && selectedIds.length === 1) {\n                    return selectedIds;\n                }\n                return [itemId];\n            }\n            var i = selectedIds.indexOf(itemId);\n            var nextSelectedIds = selectedIds.slice();\n            if (i === -1) {\n                nextSelectedIds.push(itemId);\n            }\n            else {\n                nextSelectedIds.splice(i, 1);\n            }\n            return nextSelectedIds;\n        });\n    }, [multiSelect]);\n    var onMultiItemSelect = useCallback(function (itemIds) {\n        setSelectedIds(itemIds);\n    }, []);\n    return {\n        selectedIds: selectedIds,\n        multiSelect: multiSelect,\n        onItemSelect: onItemSelect,\n        onMultiItemSelect: onMultiItemSelect,\n    };\n}\n//# sourceMappingURL=useTreeItemSelection.js.map"]},"metadata":{},"sourceType":"module"}